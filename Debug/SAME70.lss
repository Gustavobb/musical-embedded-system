
SAME70.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000037bc  00400000  00400000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004037bc  004037bc  000137bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000ed4  20400000  004037c4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00003b40  20400ed8  004046a0  00020ed8  2**3
                  ALLOC
  4 .stack        00002000  20404a18  004081e0  00020ed8  2**0
                  ALLOC
  5 .heap         00000200  20406a18  0040a1e0  00020ed8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020ed4  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020f02  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001695a  00000000  00000000  00020f5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000030ec  00000000  00000000  000378b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000568e  00000000  00000000  0003a9a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000007e8  00000000  00000000  0004002f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000868  00000000  00000000  00040817  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00020646  00000000  00000000  0004107f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000d668  00000000  00000000  000616c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0008f911  00000000  00000000  0006ed2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00001650  00000000  00000000  000fe640  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	18 6a 40 20 9d 12 40 00 99 12 40 00 99 12 40 00     .j@ ..@...@...@.
  400010:	99 12 40 00 99 12 40 00 99 12 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	99 12 40 00 99 12 40 00 00 00 00 00 99 12 40 00     ..@...@.......@.
  40003c:	99 12 40 00 99 12 40 00 99 12 40 00 99 12 40 00     ..@...@...@...@.
  40004c:	99 12 40 00 99 12 40 00 99 12 40 00 99 12 40 00     ..@...@...@...@.
  40005c:	99 12 40 00 99 12 40 00 00 00 00 00 c1 10 40 00     ..@...@.......@.
  40006c:	d5 10 40 00 e9 10 40 00 99 12 40 00 99 12 40 00     ..@...@...@...@.
  40007c:	99 12 40 00 fd 10 40 00 11 11 40 00 99 12 40 00     ..@...@...@...@.
  40008c:	99 12 40 00 99 12 40 00 99 12 40 00 99 12 40 00     ..@...@...@...@.
  40009c:	99 12 40 00 99 12 40 00 99 12 40 00 99 12 40 00     ..@...@...@...@.
  4000ac:	99 12 40 00 99 12 40 00 99 12 40 00 99 12 40 00     ..@...@...@...@.
  4000bc:	99 12 40 00 99 12 40 00 99 12 40 00 99 12 40 00     ..@...@...@...@.
  4000cc:	99 12 40 00 00 00 00 00 99 12 40 00 00 00 00 00     ..@.......@.....
  4000dc:	99 12 40 00 99 12 40 00 99 12 40 00 99 12 40 00     ..@...@...@...@.
  4000ec:	99 12 40 00 99 12 40 00 99 12 40 00 99 12 40 00     ..@...@...@...@.
  4000fc:	99 12 40 00 99 12 40 00 99 12 40 00 99 12 40 00     ..@...@...@...@.
  40010c:	99 12 40 00 99 12 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 99 12 40 00 99 12 40 00 99 12 40 00     ......@...@...@.
  40012c:	99 12 40 00 99 12 40 00 00 00 00 00 99 12 40 00     ..@...@.......@.
  40013c:	99 12 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400ed8 	.word	0x20400ed8
  40015c:	00000000 	.word	0x00000000
  400160:	004037c4 	.word	0x004037c4

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	004037c4 	.word	0x004037c4
  4001a0:	20400edc 	.word	0x20400edc
  4001a4:	004037c4 	.word	0x004037c4
  4001a8:	00000000 	.word	0x00000000

004001ac <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4001b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4001b4:	4bc9      	ldr	r3, [pc, #804]	; (4004dc <board_init+0x330>)
  4001b6:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4001b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4001bc:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4001c0:	4bc7      	ldr	r3, [pc, #796]	; (4004e0 <board_init+0x334>)
  4001c2:	2200      	movs	r2, #0
  4001c4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4001c8:	695a      	ldr	r2, [r3, #20]
  4001ca:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4001ce:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  4001d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4001d4:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4001d8:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4001dc:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4001e0:	f007 0007 	and.w	r0, r7, #7
  4001e4:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4001e6:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4001ea:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  4001ee:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  4001f2:	f3bf 8f4f 	dsb	sy
  4001f6:	f04f 34ff 	mov.w	r4, #4294967295
  4001fa:	fa04 fc00 	lsl.w	ip, r4, r0
  4001fe:	fa06 f000 	lsl.w	r0, r6, r0
  400202:	fa04 f40e 	lsl.w	r4, r4, lr
  400206:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  40020a:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  40020c:	463a      	mov	r2, r7
  40020e:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400210:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400214:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400218:	3a01      	subs	r2, #1
  40021a:	4423      	add	r3, r4
  40021c:	f1b2 3fff 	cmp.w	r2, #4294967295
  400220:	d1f6      	bne.n	400210 <board_init+0x64>
        } while(sets--);
  400222:	3e01      	subs	r6, #1
  400224:	4460      	add	r0, ip
  400226:	f1b6 3fff 	cmp.w	r6, #4294967295
  40022a:	d1ef      	bne.n	40020c <board_init+0x60>
  40022c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400230:	4bab      	ldr	r3, [pc, #684]	; (4004e0 <board_init+0x334>)
  400232:	695a      	ldr	r2, [r3, #20]
  400234:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400238:	615a      	str	r2, [r3, #20]
  40023a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40023e:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400242:	4aa8      	ldr	r2, [pc, #672]	; (4004e4 <board_init+0x338>)
  400244:	49a8      	ldr	r1, [pc, #672]	; (4004e8 <board_init+0x33c>)
  400246:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400248:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  40024c:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  40024e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400252:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400256:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  40025a:	f022 0201 	bic.w	r2, r2, #1
  40025e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400262:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400266:	f022 0201 	bic.w	r2, r2, #1
  40026a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  40026e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400272:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400276:	200a      	movs	r0, #10
  400278:	4c9c      	ldr	r4, [pc, #624]	; (4004ec <board_init+0x340>)
  40027a:	47a0      	blx	r4
  40027c:	200b      	movs	r0, #11
  40027e:	47a0      	blx	r4
  400280:	200c      	movs	r0, #12
  400282:	47a0      	blx	r4
  400284:	2010      	movs	r0, #16
  400286:	47a0      	blx	r4
  400288:	2011      	movs	r0, #17
  40028a:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40028c:	4f98      	ldr	r7, [pc, #608]	; (4004f0 <board_init+0x344>)
  40028e:	f44f 7a80 	mov.w	sl, #256	; 0x100
  400292:	f8c7 a010 	str.w	sl, [r7, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400296:	f8c7 a0a0 	str.w	sl, [r7, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40029a:	f8c7 a030 	str.w	sl, [r7, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40029e:	4c95      	ldr	r4, [pc, #596]	; (4004f4 <board_init+0x348>)
  4002a0:	f44f 6600 	mov.w	r6, #2048	; 0x800
  4002a4:	6166      	str	r6, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4002a6:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  4002aa:	6666      	str	r6, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4002ac:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4002b0:	6566      	str	r6, [r4, #84]	; 0x54
		base->PIO_IFER = mask;
  4002b2:	6226      	str	r6, [r4, #32]
		base->PIO_IFSCER = mask;
  4002b4:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4002b8:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4002ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4002be:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4002c0:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4002c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4002c6:	6763      	str	r3, [r4, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4002c8:	f8c4 60c0 	str.w	r6, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4002cc:	f8c4 60d4 	str.w	r6, [r4, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4002d0:	f8c4 60b0 	str.w	r6, [r4, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4002d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  4002d8:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4002da:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4002de:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  4002e0:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4002e2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4002e6:	6f22      	ldr	r2, [r4, #112]	; 0x70
  4002e8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  4002ec:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4002ee:	6f62      	ldr	r2, [r4, #116]	; 0x74
  4002f0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  4002f4:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4002f6:	6063      	str	r3, [r4, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  4002f8:	f8df 9210 	ldr.w	r9, [pc, #528]	; 40050c <board_init+0x360>
  4002fc:	f8d9 3114 	ldr.w	r3, [r9, #276]	; 0x114
  400300:	f043 0310 	orr.w	r3, r3, #16
  400304:	f8c9 3114 	str.w	r3, [r9, #276]	; 0x114
		base->PIO_PUDR = mask;
  400308:	4b7b      	ldr	r3, [pc, #492]	; (4004f8 <board_init+0x34c>)
  40030a:	2510      	movs	r5, #16
  40030c:	661d      	str	r5, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40030e:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400312:	655d      	str	r5, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400314:	625d      	str	r5, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400316:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  40031a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40031c:	432a      	orrs	r2, r5
  40031e:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400320:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400322:	432a      	orrs	r2, r5
  400324:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400326:	605d      	str	r5, [r3, #4]
		base->PIO_PUDR = mask;
  400328:	2308      	movs	r3, #8
  40032a:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40032c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400330:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400332:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400334:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400338:	6f22      	ldr	r2, [r4, #112]	; 0x70
  40033a:	f022 0208 	bic.w	r2, r2, #8
  40033e:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400340:	6f62      	ldr	r2, [r4, #116]	; 0x74
  400342:	f022 0208 	bic.w	r2, r2, #8
  400346:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400348:	6063      	str	r3, [r4, #4]
		base->PIO_PUDR = mask;
  40034a:	6625      	str	r5, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40034c:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400350:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400352:	6265      	str	r5, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400354:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400358:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40035a:	f023 0310 	bic.w	r3, r3, #16
  40035e:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400360:	6f63      	ldr	r3, [r4, #116]	; 0x74
  400362:	f023 0310 	bic.w	r3, r3, #16
  400366:	6763      	str	r3, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400368:	6065      	str	r5, [r4, #4]
	ioport_set_pin_mode(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on EBI*/
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  40036a:	2300      	movs	r3, #0
  40036c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400370:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400374:	4638      	mov	r0, r7
  400376:	f8df 8198 	ldr.w	r8, [pc, #408]	; 400510 <board_init+0x364>
  40037a:	47c0      	blx	r8
	pio_configure(PIN_EBI_CDS_PIO, PIN_EBI_CDS_TYPE, PIN_EBI_CDS_MASK, PIN_EBI_CDS_ATTRI);
  40037c:	2300      	movs	r3, #0
  40037e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400382:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400386:	4638      	mov	r0, r7
  400388:	47c0      	blx	r8
	pio_configure(PIN_EBI_DATAL_PIO, PIN_EBI_DATAL_TYPE, PIN_EBI_DATAL_MASK, PIN_EBI_DATAL_ATTRI);
  40038a:	2301      	movs	r3, #1
  40038c:	22ff      	movs	r2, #255	; 0xff
  40038e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400392:	4638      	mov	r0, r7
  400394:	47c0      	blx	r8
	pio_configure(PIN_EBI_DATAH_0_PIO, PIN_EBI_DATAH_0_TYPE, PIN_EBI_DATAH_0_MASK, PIN_EBI_DATAH_0_ATTRI);
  400396:	2301      	movs	r3, #1
  400398:	223f      	movs	r2, #63	; 0x3f
  40039a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40039e:	4857      	ldr	r0, [pc, #348]	; (4004fc <board_init+0x350>)
  4003a0:	47c0      	blx	r8
	pio_configure(PIN_EBI_DATAH_1_PIO, PIN_EBI_DATAH_1_TYPE, PIN_EBI_DATAH_1_MASK, PIN_EBI_DATAH_1_ATTRI);
  4003a2:	2301      	movs	r3, #1
  4003a4:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  4003a8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4003ac:	4620      	mov	r0, r4
  4003ae:	47c0      	blx	r8
	pio_configure(PIN_EBI_NWE_PIO, PIN_EBI_NWE_TYPE, PIN_EBI_NWE_MASK, PIN_EBI_NWE_ATTRI);
  4003b0:	2301      	movs	r3, #1
  4003b2:	4652      	mov	r2, sl
  4003b4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4003b8:	4638      	mov	r0, r7
  4003ba:	47c0      	blx	r8
	pio_configure(PIN_EBI_NRD_PIO, PIN_EBI_NRD_TYPE, PIN_EBI_NRD_MASK, PIN_EBI_NRD_ATTRI);
  4003bc:	2301      	movs	r3, #1
  4003be:	4632      	mov	r2, r6
  4003c0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4003c4:	4638      	mov	r0, r7
  4003c6:	47c0      	blx	r8
	pio_configure(PIN_EBI_CS_PIO, PIN_EBI_CS_TYPE, PIN_EBI_CS_MASK, PIN_EBI_CS_ATTRI);
  4003c8:	2301      	movs	r3, #1
  4003ca:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4003ce:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4003d2:	484b      	ldr	r0, [pc, #300]	; (400500 <board_init+0x354>)
  4003d4:	47c0      	blx	r8
	pio_configure(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_TYPE, PIN_EBI_BACKLIGHT_MASK, PIN_EBI_BACKLIGHT_ATTRI);
  4003d6:	2300      	movs	r3, #0
  4003d8:	f44f 7200 	mov.w	r2, #512	; 0x200
  4003dc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4003e0:	4638      	mov	r0, r7
  4003e2:	47c0      	blx	r8
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  4003e4:	f44f 7100 	mov.w	r1, #512	; 0x200
  4003e8:	4638      	mov	r0, r7
  4003ea:	4b46      	ldr	r3, [pc, #280]	; (400504 <board_init+0x358>)
  4003ec:	4798      	blx	r3
	ioport_set_pin_dir(USB_ID_PIN, IOPORT_DIR_INPUT);
# endif
#endif

#ifdef CONF_BOARD_SDRAMC
	pio_configure_pin(SDRAM_BA0_PIO, SDRAM_BA0_FLAGS);
  4003ee:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4003f2:	2014      	movs	r0, #20
  4003f4:	4c44      	ldr	r4, [pc, #272]	; (400508 <board_init+0x35c>)
  4003f6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDCK_PIO, SDRAM_SDCK_FLAGS);
  4003f8:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4003fc:	2077      	movs	r0, #119	; 0x77
  4003fe:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDCKE_PIO, SDRAM_SDCKE_FLAGS);
  400400:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400404:	206e      	movs	r0, #110	; 0x6e
  400406:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDCS_PIO, SDRAM_SDCS_FLAGS);
  400408:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40040c:	204f      	movs	r0, #79	; 0x4f
  40040e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_RAS_PIO, SDRAM_RAS_FLAGS);
  400410:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400414:	2070      	movs	r0, #112	; 0x70
  400416:	47a0      	blx	r4
	pio_configure_pin(SDRAM_CAS_PIO, SDRAM_CAS_FLAGS);
  400418:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40041c:	2071      	movs	r0, #113	; 0x71
  40041e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDWE_PIO, SDRAM_SDWE_FLAGS);
  400420:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400424:	207d      	movs	r0, #125	; 0x7d
  400426:	47a0      	blx	r4
	pio_configure_pin(SDRAM_NBS0_PIO, SDRAM_NBS0_FLAGS);
  400428:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40042c:	2052      	movs	r0, #82	; 0x52
  40042e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_NBS1_PIO, SDRAM_NBS1_FLAGS);
  400430:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400434:	206f      	movs	r0, #111	; 0x6f
  400436:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A2_PIO, SDRAM_A_FLAGS);  
  400438:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40043c:	2054      	movs	r0, #84	; 0x54
  40043e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A3_PIO, SDRAM_A_FLAGS);  
  400440:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400444:	2055      	movs	r0, #85	; 0x55
  400446:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A4_PIO, SDRAM_A_FLAGS);  
  400448:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40044c:	2056      	movs	r0, #86	; 0x56
  40044e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A5_PIO, SDRAM_A_FLAGS);  
  400450:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400454:	2057      	movs	r0, #87	; 0x57
  400456:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A6_PIO, SDRAM_A_FLAGS);  
  400458:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40045c:	2058      	movs	r0, #88	; 0x58
  40045e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A7_PIO, SDRAM_A_FLAGS);  
  400460:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400464:	2059      	movs	r0, #89	; 0x59
  400466:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A8_PIO, SDRAM_A_FLAGS);  
  400468:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40046c:	205a      	movs	r0, #90	; 0x5a
  40046e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A9_PIO, SDRAM_A_FLAGS);  
  400470:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400474:	205b      	movs	r0, #91	; 0x5b
  400476:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A10_PIO, SDRAM_A_FLAGS);  
  400478:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40047c:	205c      	movs	r0, #92	; 0x5c
  40047e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_A11_PIO, SDRAM_A_FLAGS);  
  400480:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400484:	205d      	movs	r0, #93	; 0x5d
  400486:	47a0      	blx	r4
	pio_configure_pin(SDRAM_SDA10_PIO, SDRAM_SDA10_FLAGS);
  400488:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40048c:	206d      	movs	r0, #109	; 0x6d
  40048e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D0_PIO, SDRAM_D_FLAGS);  
  400490:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400494:	2040      	movs	r0, #64	; 0x40
  400496:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D1_PIO, SDRAM_D_FLAGS);  
  400498:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40049c:	2041      	movs	r0, #65	; 0x41
  40049e:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D2_PIO, SDRAM_D_FLAGS);  
  4004a0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4004a4:	2042      	movs	r0, #66	; 0x42
  4004a6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D3_PIO, SDRAM_D_FLAGS);  
  4004a8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4004ac:	2043      	movs	r0, #67	; 0x43
  4004ae:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D4_PIO, SDRAM_D_FLAGS);  
  4004b0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4004b4:	2044      	movs	r0, #68	; 0x44
  4004b6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D5_PIO, SDRAM_D_FLAGS);  
  4004b8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4004bc:	2045      	movs	r0, #69	; 0x45
  4004be:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D6_PIO, SDRAM_D_FLAGS);  
  4004c0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4004c4:	2046      	movs	r0, #70	; 0x46
  4004c6:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D7_PIO, SDRAM_D_FLAGS);  
  4004c8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4004cc:	2047      	movs	r0, #71	; 0x47
  4004ce:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D8_PIO, SDRAM_D_FLAGS);  
  4004d0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4004d4:	2080      	movs	r0, #128	; 0x80
  4004d6:	47a0      	blx	r4
  4004d8:	e01c      	b.n	400514 <board_init+0x368>
  4004da:	bf00      	nop
  4004dc:	400e1850 	.word	0x400e1850
  4004e0:	e000ed00 	.word	0xe000ed00
  4004e4:	400e0c00 	.word	0x400e0c00
  4004e8:	5a00080c 	.word	0x5a00080c
  4004ec:	00401245 	.word	0x00401245
  4004f0:	400e1200 	.word	0x400e1200
  4004f4:	400e0e00 	.word	0x400e0e00
  4004f8:	400e1000 	.word	0x400e1000
  4004fc:	400e1600 	.word	0x400e1600
  400500:	400e1400 	.word	0x400e1400
  400504:	00400ced 	.word	0x00400ced
  400508:	00400ed1 	.word	0x00400ed1
  40050c:	40088000 	.word	0x40088000
  400510:	00400de5 	.word	0x00400de5
	pio_configure_pin(SDRAM_D9_PIO, SDRAM_D_FLAGS);  
  400514:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400518:	2081      	movs	r0, #129	; 0x81
  40051a:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D10_PIO, SDRAM_D_FLAGS); 
  40051c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400520:	2082      	movs	r0, #130	; 0x82
  400522:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D11_PIO, SDRAM_D_FLAGS); 
  400524:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400528:	2083      	movs	r0, #131	; 0x83
  40052a:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D12_PIO, SDRAM_D_FLAGS); 
  40052c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400530:	2084      	movs	r0, #132	; 0x84
  400532:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D13_PIO, SDRAM_D_FLAGS); 
  400534:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400538:	2085      	movs	r0, #133	; 0x85
  40053a:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D14_PIO, SDRAM_D_FLAGS); 
  40053c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400540:	200f      	movs	r0, #15
  400542:	47a0      	blx	r4
	pio_configure_pin(SDRAM_D15_PIO, SDRAM_D_FLAGS); 
  400544:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400548:	4628      	mov	r0, r5
  40054a:	47a0      	blx	r4
	
	MATRIX->CCFG_SMCNFCS = CCFG_SMCNFCS_SDRAMEN;
  40054c:	f8c9 5124 	str.w	r5, [r9, #292]	; 0x124
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on SPI*/
	pio_configure_pin(LCD_SPI_MISO_PIO, LCD_SPI_MISO_FLAGS);
  400550:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400554:	2074      	movs	r0, #116	; 0x74
  400556:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_MOSI_PIO, LCD_SPI_MOSI_FLAGS);
  400558:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40055c:	2075      	movs	r0, #117	; 0x75
  40055e:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_SPCK_PIO, LCD_SPI_SPCK_FLAGS);
  400560:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400564:	2076      	movs	r0, #118	; 0x76
  400566:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_NPCS_PIO, LCD_SPI_NPCS_FLAGS);
  400568:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40056c:	2079      	movs	r0, #121	; 0x79
  40056e:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_RESET_PIO, LCD_SPI_RESET_FLAGS);
  400570:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400574:	2003      	movs	r0, #3
  400576:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
  400578:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40057c:	2023      	movs	r0, #35	; 0x23
  40057e:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
  400580:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400584:	2000      	movs	r0, #0
  400586:	47a0      	blx	r4
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);
  400588:	2000      	movs	r0, #0
  40058a:	4b02      	ldr	r3, [pc, #8]	; (400594 <board_init+0x3e8>)
  40058c:	4798      	blx	r3
  40058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400592:	bf00      	nop
  400594:	00400eb5 	.word	0x00400eb5

00400598 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400598:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  40059a:	4b07      	ldr	r3, [pc, #28]	; (4005b8 <spi_enable_clock+0x20>)
  40059c:	4298      	cmp	r0, r3
  40059e:	d003      	beq.n	4005a8 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  4005a0:	4b06      	ldr	r3, [pc, #24]	; (4005bc <spi_enable_clock+0x24>)
  4005a2:	4298      	cmp	r0, r3
  4005a4:	d004      	beq.n	4005b0 <spi_enable_clock+0x18>
  4005a6:	bd08      	pop	{r3, pc}
  4005a8:	2015      	movs	r0, #21
  4005aa:	4b05      	ldr	r3, [pc, #20]	; (4005c0 <spi_enable_clock+0x28>)
  4005ac:	4798      	blx	r3
  4005ae:	bd08      	pop	{r3, pc}
  4005b0:	202a      	movs	r0, #42	; 0x2a
  4005b2:	4b03      	ldr	r3, [pc, #12]	; (4005c0 <spi_enable_clock+0x28>)
  4005b4:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  4005b6:	e7f6      	b.n	4005a6 <spi_enable_clock+0xe>
  4005b8:	40008000 	.word	0x40008000
  4005bc:	40058000 	.word	0x40058000
  4005c0:	00401245 	.word	0x00401245

004005c4 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4005c4:	6843      	ldr	r3, [r0, #4]
  4005c6:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4005ca:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4005cc:	6843      	ldr	r3, [r0, #4]
  4005ce:	0409      	lsls	r1, r1, #16
  4005d0:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4005d4:	4319      	orrs	r1, r3
  4005d6:	6041      	str	r1, [r0, #4]
  4005d8:	4770      	bx	lr

004005da <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4005da:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4005dc:	f643 2499 	movw	r4, #15001	; 0x3a99
  4005e0:	6905      	ldr	r5, [r0, #16]
  4005e2:	f015 0f02 	tst.w	r5, #2
  4005e6:	d103      	bne.n	4005f0 <spi_write+0x16>
		if (!timeout--) {
  4005e8:	3c01      	subs	r4, #1
  4005ea:	d1f9      	bne.n	4005e0 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  4005ec:	2001      	movs	r0, #1
  4005ee:	e00c      	b.n	40060a <spi_write+0x30>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  4005f0:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  4005f2:	f014 0f02 	tst.w	r4, #2
  4005f6:	d006      	beq.n	400606 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  4005f8:	0412      	lsls	r2, r2, #16
  4005fa:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  4005fe:	4311      	orrs	r1, r2
		if (uc_last) {
  400600:	b10b      	cbz	r3, 400606 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  400602:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  400606:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  400608:	2000      	movs	r0, #0
}
  40060a:	bc30      	pop	{r4, r5}
  40060c:	4770      	bx	lr

0040060e <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  40060e:	b932      	cbnz	r2, 40061e <spi_set_clock_polarity+0x10>
  400610:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  400614:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400616:	f023 0301 	bic.w	r3, r3, #1
  40061a:	6303      	str	r3, [r0, #48]	; 0x30
  40061c:	4770      	bx	lr
  40061e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  400622:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400624:	f043 0301 	orr.w	r3, r3, #1
  400628:	6303      	str	r3, [r0, #48]	; 0x30
  40062a:	4770      	bx	lr

0040062c <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  40062c:	b932      	cbnz	r2, 40063c <spi_set_clock_phase+0x10>
  40062e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400632:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400634:	f023 0302 	bic.w	r3, r3, #2
  400638:	6303      	str	r3, [r0, #48]	; 0x30
  40063a:	4770      	bx	lr
  40063c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400640:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400642:	f043 0302 	orr.w	r3, r3, #2
  400646:	6303      	str	r3, [r0, #48]	; 0x30
  400648:	4770      	bx	lr

0040064a <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  40064a:	2a04      	cmp	r2, #4
  40064c:	d003      	beq.n	400656 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  40064e:	b16a      	cbz	r2, 40066c <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  400650:	2a08      	cmp	r2, #8
  400652:	d016      	beq.n	400682 <spi_configure_cs_behavior+0x38>
  400654:	4770      	bx	lr
  400656:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40065a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40065c:	f023 0308 	bic.w	r3, r3, #8
  400660:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  400662:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400664:	f043 0304 	orr.w	r3, r3, #4
  400668:	6303      	str	r3, [r0, #48]	; 0x30
  40066a:	4770      	bx	lr
  40066c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400670:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400672:	f023 0308 	bic.w	r3, r3, #8
  400676:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  400678:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40067a:	f023 0304 	bic.w	r3, r3, #4
  40067e:	6303      	str	r3, [r0, #48]	; 0x30
  400680:	4770      	bx	lr
  400682:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  400686:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400688:	f043 0308 	orr.w	r3, r3, #8
  40068c:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  40068e:	e7e1      	b.n	400654 <spi_configure_cs_behavior+0xa>

00400690 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  400690:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  400694:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400696:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  40069a:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  40069c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40069e:	431a      	orrs	r2, r3
  4006a0:	630a      	str	r2, [r1, #48]	; 0x30
  4006a2:	4770      	bx	lr

004006a4 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  4006a4:	1e43      	subs	r3, r0, #1
  4006a6:	4419      	add	r1, r3
  4006a8:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  4006ac:	1e43      	subs	r3, r0, #1
  4006ae:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  4006b0:	bf94      	ite	ls
  4006b2:	b200      	sxthls	r0, r0
		return -1;
  4006b4:	f04f 30ff 	movhi.w	r0, #4294967295
}
  4006b8:	4770      	bx	lr

004006ba <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  4006ba:	b17a      	cbz	r2, 4006dc <spi_set_baudrate_div+0x22>
{
  4006bc:	b410      	push	{r4}
  4006be:	4614      	mov	r4, r2
  4006c0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4006c4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4006c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4006ca:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4006cc:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4006ce:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4006d2:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  4006d4:	2000      	movs	r0, #0
}
  4006d6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4006da:	4770      	bx	lr
        return -1;
  4006dc:	f04f 30ff 	mov.w	r0, #4294967295
  4006e0:	4770      	bx	lr
	...

004006e4 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
  4006e4:	4b01      	ldr	r3, [pc, #4]	; (4006ec <gfx_mono_set_framebuffer+0x8>)
  4006e6:	6018      	str	r0, [r3, #0]
  4006e8:	4770      	bx	lr
  4006ea:	bf00      	nop
  4006ec:	20400ef4 	.word	0x20400ef4

004006f0 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  4006f0:	4b02      	ldr	r3, [pc, #8]	; (4006fc <gfx_mono_framebuffer_put_byte+0xc>)
  4006f2:	681b      	ldr	r3, [r3, #0]
  4006f4:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  4006f8:	5442      	strb	r2, [r0, r1]
  4006fa:	4770      	bx	lr
  4006fc:	20400ef4 	.word	0x20400ef4

00400700 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  400700:	4b02      	ldr	r3, [pc, #8]	; (40070c <gfx_mono_framebuffer_get_byte+0xc>)
  400702:	681b      	ldr	r3, [r3, #0]
  400704:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
  400708:	5c40      	ldrb	r0, [r0, r1]
  40070a:	4770      	bx	lr
  40070c:	20400ef4 	.word	0x20400ef4

00400710 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  400710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
  400714:	1884      	adds	r4, r0, r2
  400716:	2c80      	cmp	r4, #128	; 0x80
  400718:	dd02      	ble.n	400720 <gfx_mono_generic_draw_horizontal_line+0x10>
		length = GFX_MONO_LCD_WIDTH - x;
  40071a:	f1c0 0480 	rsb	r4, r0, #128	; 0x80
  40071e:	b2e2      	uxtb	r2, r4
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
  400720:	b322      	cbz	r2, 40076c <gfx_mono_generic_draw_horizontal_line+0x5c>
	page = y / 8;
  400722:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
  400724:	eba1 01c5 	sub.w	r1, r1, r5, lsl #3
  400728:	2601      	movs	r6, #1
  40072a:	fa06 f101 	lsl.w	r1, r6, r1
  40072e:	b2ce      	uxtb	r6, r1
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
  400730:	2b01      	cmp	r3, #1
  400732:	d01d      	beq.n	400770 <gfx_mono_generic_draw_horizontal_line+0x60>
  400734:	2b00      	cmp	r3, #0
  400736:	d035      	beq.n	4007a4 <gfx_mono_generic_draw_horizontal_line+0x94>
  400738:	2b02      	cmp	r3, #2
  40073a:	d117      	bne.n	40076c <gfx_mono_generic_draw_horizontal_line+0x5c>
  40073c:	3801      	subs	r0, #1
  40073e:	b2c7      	uxtb	r7, r0
  400740:	19d4      	adds	r4, r2, r7
  400742:	b2e4      	uxtb	r4, r4
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
  400744:	f8df a090 	ldr.w	sl, [pc, #144]	; 4007d8 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
  400748:	f04f 0900 	mov.w	r9, #0
  40074c:	f8df 808c 	ldr.w	r8, [pc, #140]	; 4007dc <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400750:	4621      	mov	r1, r4
  400752:	4628      	mov	r0, r5
  400754:	47d0      	blx	sl
			temp ^= pixelmask;
  400756:	ea86 0200 	eor.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  40075a:	464b      	mov	r3, r9
  40075c:	b2d2      	uxtb	r2, r2
  40075e:	4621      	mov	r1, r4
  400760:	4628      	mov	r0, r5
  400762:	47c0      	blx	r8
  400764:	3c01      	subs	r4, #1
  400766:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400768:	42bc      	cmp	r4, r7
  40076a:	d1f1      	bne.n	400750 <gfx_mono_generic_draw_horizontal_line+0x40>
  40076c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400770:	3801      	subs	r0, #1
  400772:	b2c7      	uxtb	r7, r0
  400774:	19d4      	adds	r4, r2, r7
  400776:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  400778:	f8df a05c 	ldr.w	sl, [pc, #92]	; 4007d8 <gfx_mono_generic_draw_horizontal_line+0xc8>
			gfx_mono_put_byte(page, x + length, temp);
  40077c:	f04f 0900 	mov.w	r9, #0
  400780:	f8df 8058 	ldr.w	r8, [pc, #88]	; 4007dc <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400784:	4621      	mov	r1, r4
  400786:	4628      	mov	r0, r5
  400788:	47d0      	blx	sl
			temp |= pixelmask;
  40078a:	ea46 0200 	orr.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  40078e:	464b      	mov	r3, r9
  400790:	b2d2      	uxtb	r2, r2
  400792:	4621      	mov	r1, r4
  400794:	4628      	mov	r0, r5
  400796:	47c0      	blx	r8
  400798:	3c01      	subs	r4, #1
  40079a:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  40079c:	42bc      	cmp	r4, r7
  40079e:	d1f1      	bne.n	400784 <gfx_mono_generic_draw_horizontal_line+0x74>
  4007a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4007a4:	3801      	subs	r0, #1
  4007a6:	b2c7      	uxtb	r7, r0
  4007a8:	19d4      	adds	r4, r2, r7
  4007aa:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  4007ac:	f8df 8028 	ldr.w	r8, [pc, #40]	; 4007d8 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp &= ~pixelmask;
  4007b0:	43ce      	mvns	r6, r1
			gfx_mono_put_byte(page, x + length, temp);
  4007b2:	f8df 9028 	ldr.w	r9, [pc, #40]	; 4007dc <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  4007b6:	4621      	mov	r1, r4
  4007b8:	4628      	mov	r0, r5
  4007ba:	47c0      	blx	r8
			temp &= ~pixelmask;
  4007bc:	ea06 0200 	and.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  4007c0:	2300      	movs	r3, #0
  4007c2:	b2d2      	uxtb	r2, r2
  4007c4:	4621      	mov	r1, r4
  4007c6:	4628      	mov	r0, r5
  4007c8:	47c8      	blx	r9
  4007ca:	3c01      	subs	r4, #1
  4007cc:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  4007ce:	42bc      	cmp	r4, r7
  4007d0:	d1f1      	bne.n	4007b6 <gfx_mono_generic_draw_horizontal_line+0xa6>
  4007d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4007d6:	bf00      	nop
  4007d8:	00400a11 	.word	0x00400a11
  4007dc:	0040090d 	.word	0x0040090d

004007e0 <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  4007e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4007e4:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (height == 0) {
  4007e8:	b18b      	cbz	r3, 40080e <gfx_mono_generic_draw_filled_rect+0x2e>
  4007ea:	461c      	mov	r4, r3
  4007ec:	4690      	mov	r8, r2
  4007ee:	4606      	mov	r6, r0
  4007f0:	1e4d      	subs	r5, r1, #1
  4007f2:	b2ed      	uxtb	r5, r5
  4007f4:	442c      	add	r4, r5
  4007f6:	b2e4      	uxtb	r4, r4
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
  4007f8:	f8df 9018 	ldr.w	r9, [pc, #24]	; 400814 <gfx_mono_generic_draw_filled_rect+0x34>
  4007fc:	463b      	mov	r3, r7
  4007fe:	4642      	mov	r2, r8
  400800:	4621      	mov	r1, r4
  400802:	4630      	mov	r0, r6
  400804:	47c8      	blx	r9
  400806:	3c01      	subs	r4, #1
  400808:	b2e4      	uxtb	r4, r4
	while (height-- > 0) {
  40080a:	42ac      	cmp	r4, r5
  40080c:	d1f6      	bne.n	4007fc <gfx_mono_generic_draw_filled_rect+0x1c>
  40080e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400812:	bf00      	nop
  400814:	00400711 	.word	0x00400711

00400818 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
  400818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40081c:	b083      	sub	sp, #12
  40081e:	4604      	mov	r4, r0
  400820:	4688      	mov	r8, r1
  400822:	4691      	mov	r9, r2
  400824:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
  400826:	7a5b      	ldrb	r3, [r3, #9]
  400828:	f89b 2008 	ldrb.w	r2, [fp, #8]
  40082c:	2100      	movs	r1, #0
  40082e:	9100      	str	r1, [sp, #0]
  400830:	4649      	mov	r1, r9
  400832:	4640      	mov	r0, r8
  400834:	4d21      	ldr	r5, [pc, #132]	; (4008bc <gfx_mono_draw_char+0xa4>)
  400836:	47a8      	blx	r5
			GFX_PIXEL_CLR);

	switch (font->type) {
  400838:	f89b 3000 	ldrb.w	r3, [fp]
  40083c:	b113      	cbz	r3, 400844 <gfx_mono_draw_char+0x2c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
  40083e:	b003      	add	sp, #12
  400840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  400844:	f89b 2008 	ldrb.w	r2, [fp, #8]
  400848:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  40084a:	f012 0f07 	tst.w	r2, #7
		char_row_size++;
  40084e:	bf18      	it	ne
  400850:	3301      	addne	r3, #1
	glyph_data_offset = char_row_size * font->height *
  400852:	f89b a009 	ldrb.w	sl, [fp, #9]
			((uint8_t)ch - font->first_char);
  400856:	f89b 700a 	ldrb.w	r7, [fp, #10]
  40085a:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
  40085c:	fb17 f70a 	smulbb	r7, r7, sl
  400860:	fb17 f703 	smulbb	r7, r7, r3
	glyph_data = font->data.progmem + glyph_data_offset;
  400864:	f8db 3004 	ldr.w	r3, [fp, #4]
  400868:	fa13 f787 	uxtah	r7, r3, r7
  40086c:	e01f      	b.n	4008ae <gfx_mono_draw_char+0x96>
			glyph_byte <<= 1;
  40086e:	0064      	lsls	r4, r4, #1
  400870:	b2e4      	uxtb	r4, r4
  400872:	3501      	adds	r5, #1
		for (i = 0; i < pixelsToDraw; i++) {
  400874:	b2eb      	uxtb	r3, r5
  400876:	429e      	cmp	r6, r3
  400878:	d910      	bls.n	40089c <gfx_mono_draw_char+0x84>
  40087a:	b2eb      	uxtb	r3, r5
  40087c:	eb08 0003 	add.w	r0, r8, r3
  400880:	b2c0      	uxtb	r0, r0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  400882:	f013 0f07 	tst.w	r3, #7
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  400886:	bf08      	it	eq
  400888:	f817 4b01 	ldrbeq.w	r4, [r7], #1
			if ((glyph_byte & 0x80)) {
  40088c:	f014 0f80 	tst.w	r4, #128	; 0x80
  400890:	d0ed      	beq.n	40086e <gfx_mono_draw_char+0x56>
				gfx_mono_draw_pixel(inc_x, inc_y,
  400892:	2201      	movs	r2, #1
  400894:	4649      	mov	r1, r9
  400896:	4b0a      	ldr	r3, [pc, #40]	; (4008c0 <gfx_mono_draw_char+0xa8>)
  400898:	4798      	blx	r3
  40089a:	e7e8      	b.n	40086e <gfx_mono_draw_char+0x56>
		inc_y += 1;
  40089c:	f109 0901 	add.w	r9, r9, #1
  4008a0:	fa5f f989 	uxtb.w	r9, r9
		rows_left--;
  4008a4:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (rows_left > 0);
  4008a8:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
  4008ac:	d0c7      	beq.n	40083e <gfx_mono_draw_char+0x26>
		uint8_t pixelsToDraw = font->width;
  4008ae:	f89b 6008 	ldrb.w	r6, [fp, #8]
		for (i = 0; i < pixelsToDraw; i++) {
  4008b2:	2e00      	cmp	r6, #0
  4008b4:	d0f2      	beq.n	40089c <gfx_mono_draw_char+0x84>
  4008b6:	2500      	movs	r5, #0
  4008b8:	462c      	mov	r4, r5
  4008ba:	e7de      	b.n	40087a <gfx_mono_draw_char+0x62>
  4008bc:	004007e1 	.word	0x004007e1
  4008c0:	004009ad 	.word	0x004009ad

004008c4 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
  4008c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4008c8:	4604      	mov	r4, r0
  4008ca:	4690      	mov	r8, r2
  4008cc:	461d      	mov	r5, r3
  4008ce:	4689      	mov	r9, r1
			x = start_of_string_position_x;
			y += font->height + 1;
		} else if (*str == '\r') {
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
  4008d0:	4f0d      	ldr	r7, [pc, #52]	; (400908 <gfx_mono_draw_string+0x44>)
			x = start_of_string_position_x;
  4008d2:	460e      	mov	r6, r1
  4008d4:	e008      	b.n	4008e8 <gfx_mono_draw_string+0x24>
			y += font->height + 1;
  4008d6:	7a6a      	ldrb	r2, [r5, #9]
  4008d8:	3201      	adds	r2, #1
  4008da:	4442      	add	r2, r8
  4008dc:	fa5f f882 	uxtb.w	r8, r2
			x = start_of_string_position_x;
  4008e0:	46b1      	mov	r9, r6
			x += font->width;
		}
	} while (*(++str));
  4008e2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4008e6:	b16b      	cbz	r3, 400904 <gfx_mono_draw_string+0x40>
		if (*str == '\n') {
  4008e8:	7820      	ldrb	r0, [r4, #0]
  4008ea:	280a      	cmp	r0, #10
  4008ec:	d0f3      	beq.n	4008d6 <gfx_mono_draw_string+0x12>
		} else if (*str == '\r') {
  4008ee:	280d      	cmp	r0, #13
  4008f0:	d0f7      	beq.n	4008e2 <gfx_mono_draw_string+0x1e>
			gfx_mono_draw_char(*str, x, y, font);
  4008f2:	462b      	mov	r3, r5
  4008f4:	4642      	mov	r2, r8
  4008f6:	4649      	mov	r1, r9
  4008f8:	47b8      	blx	r7
			x += font->width;
  4008fa:	7a2b      	ldrb	r3, [r5, #8]
  4008fc:	4499      	add	r9, r3
  4008fe:	fa5f f989 	uxtb.w	r9, r9
  400902:	e7ee      	b.n	4008e2 <gfx_mono_draw_string+0x1e>
}
  400904:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400908:	00400819 	.word	0x00400819

0040090c <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  40090c:	b570      	push	{r4, r5, r6, lr}
  40090e:	4604      	mov	r4, r0
  400910:	460d      	mov	r5, r1
  400912:	4616      	mov	r6, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  400914:	b91b      	cbnz	r3, 40091e <gfx_mono_ssd1306_put_byte+0x12>
  400916:	4b0d      	ldr	r3, [pc, #52]	; (40094c <gfx_mono_ssd1306_put_byte+0x40>)
  400918:	4798      	blx	r3
  40091a:	42b0      	cmp	r0, r6
  40091c:	d015      	beq.n	40094a <gfx_mono_ssd1306_put_byte+0x3e>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  40091e:	4632      	mov	r2, r6
  400920:	4629      	mov	r1, r5
  400922:	4620      	mov	r0, r4
  400924:	4b0a      	ldr	r3, [pc, #40]	; (400950 <gfx_mono_ssd1306_put_byte+0x44>)
  400926:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  400928:	f004 000f 	and.w	r0, r4, #15
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  40092c:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  400930:	4c08      	ldr	r4, [pc, #32]	; (400954 <gfx_mono_ssd1306_put_byte+0x48>)
  400932:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  400934:	f3c5 1002 	ubfx	r0, r5, #4, #3
  400938:	f040 0010 	orr.w	r0, r0, #16
  40093c:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  40093e:	f005 000f 	and.w	r0, r5, #15
  400942:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
  400944:	4630      	mov	r0, r6
  400946:	4b04      	ldr	r3, [pc, #16]	; (400958 <gfx_mono_ssd1306_put_byte+0x4c>)
  400948:	4798      	blx	r3
  40094a:	bd70      	pop	{r4, r5, r6, pc}
  40094c:	00400701 	.word	0x00400701
  400950:	004006f1 	.word	0x004006f1
  400954:	00400a1d 	.word	0x00400a1d
  400958:	00400c3d 	.word	0x00400c3d

0040095c <gfx_mono_ssd1306_init>:
{
  40095c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gfx_mono_set_framebuffer(framebuffer);
  400960:	480d      	ldr	r0, [pc, #52]	; (400998 <gfx_mono_ssd1306_init+0x3c>)
  400962:	4b0e      	ldr	r3, [pc, #56]	; (40099c <gfx_mono_ssd1306_init+0x40>)
  400964:	4798      	blx	r3
	ssd1306_init();
  400966:	4b0e      	ldr	r3, [pc, #56]	; (4009a0 <gfx_mono_ssd1306_init+0x44>)
  400968:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  40096a:	2040      	movs	r0, #64	; 0x40
  40096c:	4b0d      	ldr	r3, [pc, #52]	; (4009a4 <gfx_mono_ssd1306_init+0x48>)
  40096e:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400970:	2500      	movs	r5, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400972:	f04f 0801 	mov.w	r8, #1
  400976:	462f      	mov	r7, r5
  400978:	4e0b      	ldr	r6, [pc, #44]	; (4009a8 <gfx_mono_ssd1306_init+0x4c>)
{
  40097a:	2400      	movs	r4, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  40097c:	4643      	mov	r3, r8
  40097e:	463a      	mov	r2, r7
  400980:	b2e1      	uxtb	r1, r4
  400982:	4628      	mov	r0, r5
  400984:	47b0      	blx	r6
  400986:	3401      	adds	r4, #1
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  400988:	2c80      	cmp	r4, #128	; 0x80
  40098a:	d1f7      	bne.n	40097c <gfx_mono_ssd1306_init+0x20>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  40098c:	3501      	adds	r5, #1
  40098e:	b2ed      	uxtb	r5, r5
  400990:	2d04      	cmp	r5, #4
  400992:	d1f2      	bne.n	40097a <gfx_mono_ssd1306_init+0x1e>
  400994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400998:	20400ef8 	.word	0x20400ef8
  40099c:	004006e5 	.word	0x004006e5
  4009a0:	00400a5d 	.word	0x00400a5d
  4009a4:	00400a1d 	.word	0x00400a1d
  4009a8:	0040090d 	.word	0x0040090d

004009ac <gfx_mono_ssd1306_draw_pixel>:
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  4009ac:	09c3      	lsrs	r3, r0, #7
  4009ae:	d12a      	bne.n	400a06 <gfx_mono_ssd1306_draw_pixel+0x5a>
  4009b0:	291f      	cmp	r1, #31
  4009b2:	d828      	bhi.n	400a06 <gfx_mono_ssd1306_draw_pixel+0x5a>
{
  4009b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4009b8:	4614      	mov	r4, r2
  4009ba:	4605      	mov	r5, r0
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  4009bc:	08ce      	lsrs	r6, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
  4009be:	eba1 01c6 	sub.w	r1, r1, r6, lsl #3
  4009c2:	2201      	movs	r2, #1
  4009c4:	fa02 f701 	lsl.w	r7, r2, r1
  4009c8:	fa5f f887 	uxtb.w	r8, r7
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  4009cc:	4601      	mov	r1, r0
  4009ce:	4630      	mov	r0, r6
  4009d0:	4b0d      	ldr	r3, [pc, #52]	; (400a08 <gfx_mono_ssd1306_draw_pixel+0x5c>)
  4009d2:	4798      	blx	r3
  4009d4:	4602      	mov	r2, r0
	switch (color) {
  4009d6:	2c01      	cmp	r4, #1
  4009d8:	d009      	beq.n	4009ee <gfx_mono_ssd1306_draw_pixel+0x42>
  4009da:	b164      	cbz	r4, 4009f6 <gfx_mono_ssd1306_draw_pixel+0x4a>
  4009dc:	2c02      	cmp	r4, #2
  4009de:	d00e      	beq.n	4009fe <gfx_mono_ssd1306_draw_pixel+0x52>
	gfx_mono_put_byte(page, x, pixel_value);
  4009e0:	2300      	movs	r3, #0
  4009e2:	4629      	mov	r1, r5
  4009e4:	4630      	mov	r0, r6
  4009e6:	4c09      	ldr	r4, [pc, #36]	; (400a0c <gfx_mono_ssd1306_draw_pixel+0x60>)
  4009e8:	47a0      	blx	r4
  4009ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pixel_value |= pixel_mask;
  4009ee:	ea48 0200 	orr.w	r2, r8, r0
  4009f2:	b2d2      	uxtb	r2, r2
		break;
  4009f4:	e7f4      	b.n	4009e0 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value &= ~pixel_mask;
  4009f6:	ea20 0207 	bic.w	r2, r0, r7
  4009fa:	b2d2      	uxtb	r2, r2
		break;
  4009fc:	e7f0      	b.n	4009e0 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value ^= pixel_mask;
  4009fe:	ea88 0200 	eor.w	r2, r8, r0
  400a02:	b2d2      	uxtb	r2, r2
		break;
  400a04:	e7ec      	b.n	4009e0 <gfx_mono_ssd1306_draw_pixel+0x34>
  400a06:	4770      	bx	lr
  400a08:	00400701 	.word	0x00400701
  400a0c:	0040090d 	.word	0x0040090d

00400a10 <gfx_mono_ssd1306_get_byte>:
{
  400a10:	b508      	push	{r3, lr}
	return gfx_mono_framebuffer_get_byte(page, column);
  400a12:	4b01      	ldr	r3, [pc, #4]	; (400a18 <gfx_mono_ssd1306_get_byte+0x8>)
  400a14:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
  400a16:	bd08      	pop	{r3, pc}
  400a18:	00400701 	.word	0x00400701

00400a1c <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  400a1c:	b538      	push	{r3, r4, r5, lr}
  400a1e:	4605      	mov	r5, r0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400a20:	2208      	movs	r2, #8
  400a22:	4b09      	ldr	r3, [pc, #36]	; (400a48 <ssd1306_write_command+0x2c>)
  400a24:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(SSD1306_DC_PIN, false);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400a26:	4c09      	ldr	r4, [pc, #36]	; (400a4c <ssd1306_write_command+0x30>)
  400a28:	2101      	movs	r1, #1
  400a2a:	4620      	mov	r0, r4
  400a2c:	4b08      	ldr	r3, [pc, #32]	; (400a50 <ssd1306_write_command+0x34>)
  400a2e:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  400a30:	2301      	movs	r3, #1
  400a32:	461a      	mov	r2, r3
  400a34:	4629      	mov	r1, r5
  400a36:	4620      	mov	r0, r4
  400a38:	4c06      	ldr	r4, [pc, #24]	; (400a54 <ssd1306_write_command+0x38>)
  400a3a:	47a0      	blx	r4
	delay_us(10);
  400a3c:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400a40:	4b05      	ldr	r3, [pc, #20]	; (400a58 <ssd1306_write_command+0x3c>)
  400a42:	4798      	blx	r3
  400a44:	bd38      	pop	{r3, r4, r5, pc}
  400a46:	bf00      	nop
  400a48:	400e1000 	.word	0x400e1000
  400a4c:	40008000 	.word	0x40008000
  400a50:	004005c5 	.word	0x004005c5
  400a54:	004005db 	.word	0x004005db
  400a58:	20400001 	.word	0x20400001

00400a5c <ssd1306_init>:
{
  400a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400a60:	4d66      	ldr	r5, [pc, #408]	; (400bfc <ssd1306_init+0x1a0>)
  400a62:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  400a66:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400a68:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400a6c:	4b64      	ldr	r3, [pc, #400]	; (400c00 <ssd1306_init+0x1a4>)
  400a6e:	2708      	movs	r7, #8
  400a70:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400a72:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400a76:	666e      	str	r6, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400a78:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  400a7c:	656e      	str	r6, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  400a7e:	626e      	str	r6, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400a80:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400a84:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  400a86:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400a8a:	672a      	str	r2, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400a8c:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  400a8e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400a92:	676a      	str	r2, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  400a94:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400a96:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400a9a:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400a9c:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400a9e:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400aa2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400aa4:	f022 0208 	bic.w	r2, r2, #8
  400aa8:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400aaa:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400aac:	f022 0208 	bic.w	r2, r2, #8
  400ab0:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  400ab2:	601f      	str	r7, [r3, #0]
  400ab4:	602e      	str	r6, [r5, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400ab6:	631f      	str	r7, [r3, #48]	; 0x30
  400ab8:	632e      	str	r6, [r5, #48]	; 0x30
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400aba:	f8df 817c 	ldr.w	r8, [pc, #380]	; 400c38 <ssd1306_init+0x1dc>
  400abe:	2300      	movs	r3, #0
  400ac0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400ac4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400ac8:	4640      	mov	r0, r8
  400aca:	4c4e      	ldr	r4, [pc, #312]	; (400c04 <ssd1306_init+0x1a8>)
  400acc:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400ace:	2300      	movs	r3, #0
  400ad0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400ad4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400ad8:	4640      	mov	r0, r8
  400ada:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400adc:	2300      	movs	r3, #0
  400ade:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400ae2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400ae6:	4640      	mov	r0, r8
  400ae8:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400aea:	2300      	movs	r3, #0
  400aec:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400af0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400af4:	4640      	mov	r0, r8
  400af6:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400af8:	2300      	movs	r3, #0
  400afa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400afe:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400b02:	4640      	mov	r0, r8
  400b04:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400b06:	2300      	movs	r3, #0
  400b08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400b0c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400b10:	4640      	mov	r0, r8
  400b12:	47a0      	blx	r4
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400b14:	4c3c      	ldr	r4, [pc, #240]	; (400c08 <ssd1306_init+0x1ac>)
  400b16:	f04f 0902 	mov.w	r9, #2
  400b1a:	f8c4 9000 	str.w	r9, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  400b1e:	f04f 0880 	mov.w	r8, #128	; 0x80
  400b22:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  400b26:	6863      	ldr	r3, [r4, #4]
  400b28:	f043 0301 	orr.w	r3, r3, #1
  400b2c:	6063      	str	r3, [r4, #4]
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  400b2e:	463a      	mov	r2, r7
  400b30:	2101      	movs	r1, #1
  400b32:	4620      	mov	r0, r4
  400b34:	4b35      	ldr	r3, [pc, #212]	; (400c0c <ssd1306_init+0x1b0>)
  400b36:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  400b38:	2200      	movs	r2, #0
  400b3a:	2101      	movs	r1, #1
  400b3c:	4620      	mov	r0, r4
  400b3e:	4b34      	ldr	r3, [pc, #208]	; (400c10 <ssd1306_init+0x1b4>)
  400b40:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  400b42:	2200      	movs	r2, #0
  400b44:	2101      	movs	r1, #1
  400b46:	4620      	mov	r0, r4
  400b48:	4b32      	ldr	r3, [pc, #200]	; (400c14 <ssd1306_init+0x1b8>)
  400b4a:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400b4c:	6863      	ldr	r3, [r4, #4]
  400b4e:	f023 0302 	bic.w	r3, r3, #2
  400b52:	6063      	str	r3, [r4, #4]
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  400b54:	2200      	movs	r2, #0
  400b56:	2101      	movs	r1, #1
  400b58:	4620      	mov	r0, r4
  400b5a:	4b2f      	ldr	r3, [pc, #188]	; (400c18 <ssd1306_init+0x1bc>)
  400b5c:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  400b5e:	6863      	ldr	r3, [r4, #4]
  400b60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  400b64:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400b66:	6863      	ldr	r3, [r4, #4]
  400b68:	f043 0310 	orr.w	r3, r3, #16
  400b6c:	6063      	str	r3, [r4, #4]
		int div = spi_calc_baudrate_div(1000000, sysclk_get_peripheral_hz());
  400b6e:	492b      	ldr	r1, [pc, #172]	; (400c1c <ssd1306_init+0x1c0>)
  400b70:	482b      	ldr	r0, [pc, #172]	; (400c20 <ssd1306_init+0x1c4>)
  400b72:	4b2c      	ldr	r3, [pc, #176]	; (400c24 <ssd1306_init+0x1c8>)
  400b74:	4798      	blx	r3
		spi_set_baudrate_div(SPI0,1, div);
  400b76:	b2c2      	uxtb	r2, r0
  400b78:	2101      	movs	r1, #1
  400b7a:	4620      	mov	r0, r4
  400b7c:	4b2a      	ldr	r3, [pc, #168]	; (400c28 <ssd1306_init+0x1cc>)
  400b7e:	4798      	blx	r3
		spi_enable_clock(SPI0);
  400b80:	4620      	mov	r0, r4
  400b82:	4b2a      	ldr	r3, [pc, #168]	; (400c2c <ssd1306_init+0x1d0>)
  400b84:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400b86:	2301      	movs	r3, #1
  400b88:	6023      	str	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400b8a:	636e      	str	r6, [r5, #52]	; 0x34
	delay_cycles(delay_10us); // At lest 10us
  400b8c:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400b90:	4c27      	ldr	r4, [pc, #156]	; (400c30 <ssd1306_init+0x1d4>)
  400b92:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400b94:	632e      	str	r6, [r5, #48]	; 0x30
	delay_cycles(delay_10us); // At lest 10us
  400b96:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400b9a:	47a0      	blx	r4
  400b9c:	632e      	str	r6, [r5, #48]	; 0x30
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  400b9e:	20a8      	movs	r0, #168	; 0xa8
  400ba0:	4c24      	ldr	r4, [pc, #144]	; (400c34 <ssd1306_init+0x1d8>)
  400ba2:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  400ba4:	201f      	movs	r0, #31
  400ba6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  400ba8:	20d3      	movs	r0, #211	; 0xd3
  400baa:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  400bac:	2000      	movs	r0, #0
  400bae:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  400bb0:	2040      	movs	r0, #64	; 0x40
  400bb2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  400bb4:	20a1      	movs	r0, #161	; 0xa1
  400bb6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  400bb8:	20c8      	movs	r0, #200	; 0xc8
  400bba:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  400bbc:	20da      	movs	r0, #218	; 0xda
  400bbe:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  400bc0:	4648      	mov	r0, r9
  400bc2:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  400bc4:	2081      	movs	r0, #129	; 0x81
  400bc6:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  400bc8:	208f      	movs	r0, #143	; 0x8f
  400bca:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  400bcc:	20a4      	movs	r0, #164	; 0xa4
  400bce:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  400bd0:	20a6      	movs	r0, #166	; 0xa6
  400bd2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  400bd4:	20d5      	movs	r0, #213	; 0xd5
  400bd6:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  400bd8:	4640      	mov	r0, r8
  400bda:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  400bdc:	208d      	movs	r0, #141	; 0x8d
  400bde:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  400be0:	2014      	movs	r0, #20
  400be2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  400be4:	20db      	movs	r0, #219	; 0xdb
  400be6:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  400be8:	2040      	movs	r0, #64	; 0x40
  400bea:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  400bec:	20d9      	movs	r0, #217	; 0xd9
  400bee:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  400bf0:	20f1      	movs	r0, #241	; 0xf1
  400bf2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  400bf4:	20af      	movs	r0, #175	; 0xaf
  400bf6:	47a0      	blx	r4
  400bf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400bfc:	400e1200 	.word	0x400e1200
  400c00:	400e1000 	.word	0x400e1000
  400c04:	00400de5 	.word	0x00400de5
  400c08:	40008000 	.word	0x40008000
  400c0c:	0040064b 	.word	0x0040064b
  400c10:	0040060f 	.word	0x0040060f
  400c14:	0040062d 	.word	0x0040062d
  400c18:	00400691 	.word	0x00400691
  400c1c:	08f0d180 	.word	0x08f0d180
  400c20:	000f4240 	.word	0x000f4240
  400c24:	004006a5 	.word	0x004006a5
  400c28:	004006bb 	.word	0x004006bb
  400c2c:	00400599 	.word	0x00400599
  400c30:	20400001 	.word	0x20400001
  400c34:	00400a1d 	.word	0x00400a1d
  400c38:	400e1400 	.word	0x400e1400

00400c3c <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  400c3c:	b538      	push	{r3, r4, r5, lr}
  400c3e:	4605      	mov	r5, r0
  400c40:	2208      	movs	r2, #8
  400c42:	4b09      	ldr	r3, [pc, #36]	; (400c68 <ssd1306_write_data+0x2c>)
  400c44:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(SSD1306_DC_PIN, true);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400c46:	4c09      	ldr	r4, [pc, #36]	; (400c6c <ssd1306_write_data+0x30>)
  400c48:	2101      	movs	r1, #1
  400c4a:	4620      	mov	r0, r4
  400c4c:	4b08      	ldr	r3, [pc, #32]	; (400c70 <ssd1306_write_data+0x34>)
  400c4e:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  400c50:	2301      	movs	r3, #1
  400c52:	461a      	mov	r2, r3
  400c54:	4629      	mov	r1, r5
  400c56:	4620      	mov	r0, r4
  400c58:	4c06      	ldr	r4, [pc, #24]	; (400c74 <ssd1306_write_data+0x38>)
  400c5a:	47a0      	blx	r4
	delay_us(10);
  400c5c:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400c60:	4b05      	ldr	r3, [pc, #20]	; (400c78 <ssd1306_write_data+0x3c>)
  400c62:	4798      	blx	r3
  400c64:	bd38      	pop	{r3, r4, r5, pc}
  400c66:	bf00      	nop
  400c68:	400e1000 	.word	0x400e1000
  400c6c:	40008000 	.word	0x40008000
  400c70:	004005c5 	.word	0x004005c5
  400c74:	004005db 	.word	0x004005db
  400c78:	20400001 	.word	0x20400001

00400c7c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400c7c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400c7e:	4810      	ldr	r0, [pc, #64]	; (400cc0 <sysclk_init+0x44>)
  400c80:	4b10      	ldr	r3, [pc, #64]	; (400cc4 <sysclk_init+0x48>)
  400c82:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400c84:	213e      	movs	r1, #62	; 0x3e
  400c86:	2000      	movs	r0, #0
  400c88:	4b0f      	ldr	r3, [pc, #60]	; (400cc8 <sysclk_init+0x4c>)
  400c8a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400c8c:	4c0f      	ldr	r4, [pc, #60]	; (400ccc <sysclk_init+0x50>)
  400c8e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400c90:	2800      	cmp	r0, #0
  400c92:	d0fc      	beq.n	400c8e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400c94:	4b0e      	ldr	r3, [pc, #56]	; (400cd0 <sysclk_init+0x54>)
  400c96:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400c98:	4a0e      	ldr	r2, [pc, #56]	; (400cd4 <sysclk_init+0x58>)
  400c9a:	4b0f      	ldr	r3, [pc, #60]	; (400cd8 <sysclk_init+0x5c>)
  400c9c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400c9e:	4c0f      	ldr	r4, [pc, #60]	; (400cdc <sysclk_init+0x60>)
  400ca0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400ca2:	2800      	cmp	r0, #0
  400ca4:	d0fc      	beq.n	400ca0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400ca6:	2002      	movs	r0, #2
  400ca8:	4b0d      	ldr	r3, [pc, #52]	; (400ce0 <sysclk_init+0x64>)
  400caa:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400cac:	2000      	movs	r0, #0
  400cae:	4b0d      	ldr	r3, [pc, #52]	; (400ce4 <sysclk_init+0x68>)
  400cb0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400cb2:	4b0d      	ldr	r3, [pc, #52]	; (400ce8 <sysclk_init+0x6c>)
  400cb4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400cb6:	4802      	ldr	r0, [pc, #8]	; (400cc0 <sysclk_init+0x44>)
  400cb8:	4b02      	ldr	r3, [pc, #8]	; (400cc4 <sysclk_init+0x48>)
  400cba:	4798      	blx	r3
  400cbc:	bd10      	pop	{r4, pc}
  400cbe:	bf00      	nop
  400cc0:	11e1a300 	.word	0x11e1a300
  400cc4:	00401471 	.word	0x00401471
  400cc8:	004011c1 	.word	0x004011c1
  400ccc:	00401215 	.word	0x00401215
  400cd0:	00401225 	.word	0x00401225
  400cd4:	20183f01 	.word	0x20183f01
  400cd8:	400e0600 	.word	0x400e0600
  400cdc:	00401235 	.word	0x00401235
  400ce0:	00401125 	.word	0x00401125
  400ce4:	0040115d 	.word	0x0040115d
  400ce8:	00401365 	.word	0x00401365

00400cec <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400cec:	6301      	str	r1, [r0, #48]	; 0x30
  400cee:	4770      	bx	lr

00400cf0 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400cf0:	6341      	str	r1, [r0, #52]	; 0x34
  400cf2:	4770      	bx	lr

00400cf4 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400cf4:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400cf6:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400cfa:	d03a      	beq.n	400d72 <pio_set_peripheral+0x7e>
  400cfc:	d813      	bhi.n	400d26 <pio_set_peripheral+0x32>
  400cfe:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400d02:	d025      	beq.n	400d50 <pio_set_peripheral+0x5c>
  400d04:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400d08:	d10a      	bne.n	400d20 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400d0a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400d0c:	4313      	orrs	r3, r2
  400d0e:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400d10:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400d12:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400d14:	400b      	ands	r3, r1
  400d16:	ea23 0302 	bic.w	r3, r3, r2
  400d1a:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400d1c:	6042      	str	r2, [r0, #4]
  400d1e:	4770      	bx	lr
	switch (ul_type) {
  400d20:	2900      	cmp	r1, #0
  400d22:	d1fb      	bne.n	400d1c <pio_set_peripheral+0x28>
  400d24:	4770      	bx	lr
  400d26:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400d2a:	d021      	beq.n	400d70 <pio_set_peripheral+0x7c>
  400d2c:	d809      	bhi.n	400d42 <pio_set_peripheral+0x4e>
  400d2e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400d32:	d1f3      	bne.n	400d1c <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400d34:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400d36:	4313      	orrs	r3, r2
  400d38:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400d3a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400d3c:	4313      	orrs	r3, r2
  400d3e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400d40:	e7ec      	b.n	400d1c <pio_set_peripheral+0x28>
	switch (ul_type) {
  400d42:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400d46:	d013      	beq.n	400d70 <pio_set_peripheral+0x7c>
  400d48:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400d4c:	d010      	beq.n	400d70 <pio_set_peripheral+0x7c>
  400d4e:	e7e5      	b.n	400d1c <pio_set_peripheral+0x28>
{
  400d50:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400d52:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400d54:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400d56:	43d3      	mvns	r3, r2
  400d58:	4021      	ands	r1, r4
  400d5a:	461c      	mov	r4, r3
  400d5c:	4019      	ands	r1, r3
  400d5e:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400d60:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400d62:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400d64:	400b      	ands	r3, r1
  400d66:	4023      	ands	r3, r4
  400d68:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400d6a:	6042      	str	r2, [r0, #4]
}
  400d6c:	f85d 4b04 	ldr.w	r4, [sp], #4
  400d70:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400d72:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400d74:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400d76:	400b      	ands	r3, r1
  400d78:	ea23 0302 	bic.w	r3, r3, r2
  400d7c:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400d7e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400d80:	4313      	orrs	r3, r2
  400d82:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400d84:	e7ca      	b.n	400d1c <pio_set_peripheral+0x28>

00400d86 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400d86:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400d88:	f012 0f01 	tst.w	r2, #1
  400d8c:	d10d      	bne.n	400daa <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400d8e:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400d90:	f012 0f0a 	tst.w	r2, #10
  400d94:	d00b      	beq.n	400dae <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400d96:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400d98:	f012 0f02 	tst.w	r2, #2
  400d9c:	d109      	bne.n	400db2 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400d9e:	f012 0f08 	tst.w	r2, #8
  400da2:	d008      	beq.n	400db6 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400da4:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400da8:	e005      	b.n	400db6 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400daa:	6641      	str	r1, [r0, #100]	; 0x64
  400dac:	e7f0      	b.n	400d90 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400dae:	6241      	str	r1, [r0, #36]	; 0x24
  400db0:	e7f2      	b.n	400d98 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400db2:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400db6:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400db8:	6001      	str	r1, [r0, #0]
  400dba:	4770      	bx	lr

00400dbc <pio_set_output>:
{
  400dbc:	b410      	push	{r4}
  400dbe:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400dc0:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400dc2:	b94c      	cbnz	r4, 400dd8 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400dc4:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400dc6:	b14b      	cbz	r3, 400ddc <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400dc8:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400dca:	b94a      	cbnz	r2, 400de0 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400dcc:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400dce:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400dd0:	6001      	str	r1, [r0, #0]
}
  400dd2:	f85d 4b04 	ldr.w	r4, [sp], #4
  400dd6:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400dd8:	6641      	str	r1, [r0, #100]	; 0x64
  400dda:	e7f4      	b.n	400dc6 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400ddc:	6541      	str	r1, [r0, #84]	; 0x54
  400dde:	e7f4      	b.n	400dca <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400de0:	6301      	str	r1, [r0, #48]	; 0x30
  400de2:	e7f4      	b.n	400dce <pio_set_output+0x12>

00400de4 <pio_configure>:
{
  400de4:	b570      	push	{r4, r5, r6, lr}
  400de6:	b082      	sub	sp, #8
  400de8:	4605      	mov	r5, r0
  400dea:	4616      	mov	r6, r2
  400dec:	461c      	mov	r4, r3
	switch (ul_type) {
  400dee:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400df2:	d014      	beq.n	400e1e <pio_configure+0x3a>
  400df4:	d90a      	bls.n	400e0c <pio_configure+0x28>
  400df6:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400dfa:	d024      	beq.n	400e46 <pio_configure+0x62>
  400dfc:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400e00:	d021      	beq.n	400e46 <pio_configure+0x62>
  400e02:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400e06:	d017      	beq.n	400e38 <pio_configure+0x54>
		return 0;
  400e08:	2000      	movs	r0, #0
  400e0a:	e01a      	b.n	400e42 <pio_configure+0x5e>
	switch (ul_type) {
  400e0c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400e10:	d005      	beq.n	400e1e <pio_configure+0x3a>
  400e12:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400e16:	d002      	beq.n	400e1e <pio_configure+0x3a>
  400e18:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400e1c:	d1f4      	bne.n	400e08 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  400e1e:	4632      	mov	r2, r6
  400e20:	4628      	mov	r0, r5
  400e22:	4b11      	ldr	r3, [pc, #68]	; (400e68 <pio_configure+0x84>)
  400e24:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400e26:	f014 0f01 	tst.w	r4, #1
  400e2a:	d102      	bne.n	400e32 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  400e2c:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  400e2e:	2001      	movs	r0, #1
  400e30:	e007      	b.n	400e42 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  400e32:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  400e34:	2001      	movs	r0, #1
  400e36:	e004      	b.n	400e42 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  400e38:	461a      	mov	r2, r3
  400e3a:	4631      	mov	r1, r6
  400e3c:	4b0b      	ldr	r3, [pc, #44]	; (400e6c <pio_configure+0x88>)
  400e3e:	4798      	blx	r3
	return 1;
  400e40:	2001      	movs	r0, #1
}
  400e42:	b002      	add	sp, #8
  400e44:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400e46:	f004 0301 	and.w	r3, r4, #1
  400e4a:	9300      	str	r3, [sp, #0]
  400e4c:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400e50:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400e54:	bf14      	ite	ne
  400e56:	2200      	movne	r2, #0
  400e58:	2201      	moveq	r2, #1
  400e5a:	4631      	mov	r1, r6
  400e5c:	4628      	mov	r0, r5
  400e5e:	4c04      	ldr	r4, [pc, #16]	; (400e70 <pio_configure+0x8c>)
  400e60:	47a0      	blx	r4
	return 1;
  400e62:	2001      	movs	r0, #1
		break;
  400e64:	e7ed      	b.n	400e42 <pio_configure+0x5e>
  400e66:	bf00      	nop
  400e68:	00400cf5 	.word	0x00400cf5
  400e6c:	00400d87 	.word	0x00400d87
  400e70:	00400dbd 	.word	0x00400dbd

00400e74 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  400e74:	f012 0f10 	tst.w	r2, #16
  400e78:	d012      	beq.n	400ea0 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  400e7a:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400e7e:	f012 0f20 	tst.w	r2, #32
  400e82:	d007      	beq.n	400e94 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  400e84:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  400e88:	f012 0f40 	tst.w	r2, #64	; 0x40
  400e8c:	d005      	beq.n	400e9a <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  400e8e:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  400e92:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  400e94:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  400e98:	e7f6      	b.n	400e88 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  400e9a:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  400e9e:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  400ea0:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  400ea4:	4770      	bx	lr

00400ea6 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  400ea6:	6401      	str	r1, [r0, #64]	; 0x40
  400ea8:	4770      	bx	lr

00400eaa <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400eaa:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400eac:	4770      	bx	lr

00400eae <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400eae:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400eb0:	4770      	bx	lr
	...

00400eb4 <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400eb4:	4b05      	ldr	r3, [pc, #20]	; (400ecc <pio_set_pin_high+0x18>)
  400eb6:	eb03 1350 	add.w	r3, r3, r0, lsr #5
  400eba:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  400ebc:	f000 001f 	and.w	r0, r0, #31
  400ec0:	2201      	movs	r2, #1
  400ec2:	fa02 f000 	lsl.w	r0, r2, r0
  400ec6:	6318      	str	r0, [r3, #48]	; 0x30
  400ec8:	4770      	bx	lr
  400eca:	bf00      	nop
  400ecc:	00200707 	.word	0x00200707

00400ed0 <pio_configure_pin>:
{
  400ed0:	b570      	push	{r4, r5, r6, lr}
  400ed2:	b082      	sub	sp, #8
  400ed4:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400ed6:	4c46      	ldr	r4, [pc, #280]	; (400ff0 <pio_configure_pin+0x120>)
  400ed8:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  400edc:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  400ede:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  400ee2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400ee6:	d059      	beq.n	400f9c <pio_configure_pin+0xcc>
  400ee8:	d80a      	bhi.n	400f00 <pio_configure_pin+0x30>
  400eea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400eee:	d02f      	beq.n	400f50 <pio_configure_pin+0x80>
  400ef0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400ef4:	d03f      	beq.n	400f76 <pio_configure_pin+0xa6>
  400ef6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400efa:	d016      	beq.n	400f2a <pio_configure_pin+0x5a>
		return 0;
  400efc:	2000      	movs	r0, #0
  400efe:	e012      	b.n	400f26 <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  400f00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400f04:	d05d      	beq.n	400fc2 <pio_configure_pin+0xf2>
  400f06:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400f0a:	d05a      	beq.n	400fc2 <pio_configure_pin+0xf2>
  400f0c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400f10:	d1f4      	bne.n	400efc <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  400f12:	f000 011f 	and.w	r1, r0, #31
  400f16:	2601      	movs	r6, #1
  400f18:	462a      	mov	r2, r5
  400f1a:	fa06 f101 	lsl.w	r1, r6, r1
  400f1e:	4620      	mov	r0, r4
  400f20:	4b34      	ldr	r3, [pc, #208]	; (400ff4 <pio_configure_pin+0x124>)
  400f22:	4798      	blx	r3
	return 1;
  400f24:	4630      	mov	r0, r6
}
  400f26:	b002      	add	sp, #8
  400f28:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  400f2a:	f000 001f 	and.w	r0, r0, #31
  400f2e:	2601      	movs	r6, #1
  400f30:	4086      	lsls	r6, r0
  400f32:	4632      	mov	r2, r6
  400f34:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400f38:	4620      	mov	r0, r4
  400f3a:	4b2f      	ldr	r3, [pc, #188]	; (400ff8 <pio_configure_pin+0x128>)
  400f3c:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400f3e:	f015 0f01 	tst.w	r5, #1
  400f42:	d102      	bne.n	400f4a <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  400f44:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  400f46:	2001      	movs	r0, #1
  400f48:	e7ed      	b.n	400f26 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  400f4a:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  400f4c:	2001      	movs	r0, #1
  400f4e:	e7ea      	b.n	400f26 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400f50:	f000 001f 	and.w	r0, r0, #31
  400f54:	2601      	movs	r6, #1
  400f56:	4086      	lsls	r6, r0
  400f58:	4632      	mov	r2, r6
  400f5a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400f5e:	4620      	mov	r0, r4
  400f60:	4b25      	ldr	r3, [pc, #148]	; (400ff8 <pio_configure_pin+0x128>)
  400f62:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400f64:	f015 0f01 	tst.w	r5, #1
  400f68:	d102      	bne.n	400f70 <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  400f6a:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  400f6c:	2001      	movs	r0, #1
  400f6e:	e7da      	b.n	400f26 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  400f70:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  400f72:	2001      	movs	r0, #1
  400f74:	e7d7      	b.n	400f26 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  400f76:	f000 001f 	and.w	r0, r0, #31
  400f7a:	2601      	movs	r6, #1
  400f7c:	4086      	lsls	r6, r0
  400f7e:	4632      	mov	r2, r6
  400f80:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400f84:	4620      	mov	r0, r4
  400f86:	4b1c      	ldr	r3, [pc, #112]	; (400ff8 <pio_configure_pin+0x128>)
  400f88:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400f8a:	f015 0f01 	tst.w	r5, #1
  400f8e:	d102      	bne.n	400f96 <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  400f90:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  400f92:	2001      	movs	r0, #1
  400f94:	e7c7      	b.n	400f26 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  400f96:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  400f98:	2001      	movs	r0, #1
  400f9a:	e7c4      	b.n	400f26 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  400f9c:	f000 001f 	and.w	r0, r0, #31
  400fa0:	2601      	movs	r6, #1
  400fa2:	4086      	lsls	r6, r0
  400fa4:	4632      	mov	r2, r6
  400fa6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400faa:	4620      	mov	r0, r4
  400fac:	4b12      	ldr	r3, [pc, #72]	; (400ff8 <pio_configure_pin+0x128>)
  400fae:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400fb0:	f015 0f01 	tst.w	r5, #1
  400fb4:	d102      	bne.n	400fbc <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  400fb6:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  400fb8:	2001      	movs	r0, #1
  400fba:	e7b4      	b.n	400f26 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  400fbc:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  400fbe:	2001      	movs	r0, #1
  400fc0:	e7b1      	b.n	400f26 <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  400fc2:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400fc6:	f000 011f 	and.w	r1, r0, #31
  400fca:	2601      	movs	r6, #1
  400fcc:	ea05 0306 	and.w	r3, r5, r6
  400fd0:	9300      	str	r3, [sp, #0]
  400fd2:	f3c5 0380 	ubfx	r3, r5, #2, #1
  400fd6:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400fda:	bf14      	ite	ne
  400fdc:	2200      	movne	r2, #0
  400fde:	2201      	moveq	r2, #1
  400fe0:	fa06 f101 	lsl.w	r1, r6, r1
  400fe4:	4620      	mov	r0, r4
  400fe6:	4c05      	ldr	r4, [pc, #20]	; (400ffc <pio_configure_pin+0x12c>)
  400fe8:	47a0      	blx	r4
	return 1;
  400fea:	4630      	mov	r0, r6
		break;
  400fec:	e79b      	b.n	400f26 <pio_configure_pin+0x56>
  400fee:	bf00      	nop
  400ff0:	00200707 	.word	0x00200707
  400ff4:	00400d87 	.word	0x00400d87
  400ff8:	00400cf5 	.word	0x00400cf5
  400ffc:	00400dbd 	.word	0x00400dbd

00401000 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401004:	4604      	mov	r4, r0
  401006:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401008:	4b0e      	ldr	r3, [pc, #56]	; (401044 <pio_handler_process+0x44>)
  40100a:	4798      	blx	r3
  40100c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40100e:	4620      	mov	r0, r4
  401010:	4b0d      	ldr	r3, [pc, #52]	; (401048 <pio_handler_process+0x48>)
  401012:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  401014:	4005      	ands	r5, r0
  401016:	d013      	beq.n	401040 <pio_handler_process+0x40>
  401018:	4c0c      	ldr	r4, [pc, #48]	; (40104c <pio_handler_process+0x4c>)
  40101a:	f104 0660 	add.w	r6, r4, #96	; 0x60
  40101e:	e003      	b.n	401028 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401020:	42b4      	cmp	r4, r6
  401022:	d00d      	beq.n	401040 <pio_handler_process+0x40>
  401024:	3410      	adds	r4, #16
		while (status != 0) {
  401026:	b15d      	cbz	r5, 401040 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401028:	6820      	ldr	r0, [r4, #0]
  40102a:	4540      	cmp	r0, r8
  40102c:	d1f8      	bne.n	401020 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40102e:	6861      	ldr	r1, [r4, #4]
  401030:	4229      	tst	r1, r5
  401032:	d0f5      	beq.n	401020 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401034:	68e3      	ldr	r3, [r4, #12]
  401036:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401038:	6863      	ldr	r3, [r4, #4]
  40103a:	ea25 0503 	bic.w	r5, r5, r3
  40103e:	e7ef      	b.n	401020 <pio_handler_process+0x20>
  401040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401044:	00400eab 	.word	0x00400eab
  401048:	00400eaf 	.word	0x00400eaf
  40104c:	204010f8 	.word	0x204010f8

00401050 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  401050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  401052:	4c18      	ldr	r4, [pc, #96]	; (4010b4 <pio_handler_set+0x64>)
  401054:	6826      	ldr	r6, [r4, #0]
  401056:	2e06      	cmp	r6, #6
  401058:	d82a      	bhi.n	4010b0 <pio_handler_set+0x60>
  40105a:	f04f 0c00 	mov.w	ip, #0
  40105e:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  401060:	4f15      	ldr	r7, [pc, #84]	; (4010b8 <pio_handler_set+0x68>)
  401062:	e004      	b.n	40106e <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  401064:	3401      	adds	r4, #1
  401066:	b2e4      	uxtb	r4, r4
  401068:	46a4      	mov	ip, r4
  40106a:	42a6      	cmp	r6, r4
  40106c:	d309      	bcc.n	401082 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  40106e:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  401070:	0125      	lsls	r5, r4, #4
  401072:	597d      	ldr	r5, [r7, r5]
  401074:	428d      	cmp	r5, r1
  401076:	d1f5      	bne.n	401064 <pio_handler_set+0x14>
  401078:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  40107c:	686d      	ldr	r5, [r5, #4]
  40107e:	4295      	cmp	r5, r2
  401080:	d1f0      	bne.n	401064 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  401082:	4d0d      	ldr	r5, [pc, #52]	; (4010b8 <pio_handler_set+0x68>)
  401084:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  401088:	eb05 040e 	add.w	r4, r5, lr
  40108c:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  401090:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  401092:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  401094:	9906      	ldr	r1, [sp, #24]
  401096:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  401098:	3601      	adds	r6, #1
  40109a:	4566      	cmp	r6, ip
  40109c:	d005      	beq.n	4010aa <pio_handler_set+0x5a>
  40109e:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4010a0:	461a      	mov	r2, r3
  4010a2:	4b06      	ldr	r3, [pc, #24]	; (4010bc <pio_handler_set+0x6c>)
  4010a4:	4798      	blx	r3

	return 0;
  4010a6:	2000      	movs	r0, #0
  4010a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  4010aa:	4902      	ldr	r1, [pc, #8]	; (4010b4 <pio_handler_set+0x64>)
  4010ac:	600e      	str	r6, [r1, #0]
  4010ae:	e7f6      	b.n	40109e <pio_handler_set+0x4e>
		return 1;
  4010b0:	2001      	movs	r0, #1
}
  4010b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4010b4:	20401168 	.word	0x20401168
  4010b8:	204010f8 	.word	0x204010f8
  4010bc:	00400e75 	.word	0x00400e75

004010c0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4010c0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4010c2:	210a      	movs	r1, #10
  4010c4:	4801      	ldr	r0, [pc, #4]	; (4010cc <PIOA_Handler+0xc>)
  4010c6:	4b02      	ldr	r3, [pc, #8]	; (4010d0 <PIOA_Handler+0x10>)
  4010c8:	4798      	blx	r3
  4010ca:	bd08      	pop	{r3, pc}
  4010cc:	400e0e00 	.word	0x400e0e00
  4010d0:	00401001 	.word	0x00401001

004010d4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4010d4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4010d6:	210b      	movs	r1, #11
  4010d8:	4801      	ldr	r0, [pc, #4]	; (4010e0 <PIOB_Handler+0xc>)
  4010da:	4b02      	ldr	r3, [pc, #8]	; (4010e4 <PIOB_Handler+0x10>)
  4010dc:	4798      	blx	r3
  4010de:	bd08      	pop	{r3, pc}
  4010e0:	400e1000 	.word	0x400e1000
  4010e4:	00401001 	.word	0x00401001

004010e8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4010e8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4010ea:	210c      	movs	r1, #12
  4010ec:	4801      	ldr	r0, [pc, #4]	; (4010f4 <PIOC_Handler+0xc>)
  4010ee:	4b02      	ldr	r3, [pc, #8]	; (4010f8 <PIOC_Handler+0x10>)
  4010f0:	4798      	blx	r3
  4010f2:	bd08      	pop	{r3, pc}
  4010f4:	400e1200 	.word	0x400e1200
  4010f8:	00401001 	.word	0x00401001

004010fc <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4010fc:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4010fe:	2110      	movs	r1, #16
  401100:	4801      	ldr	r0, [pc, #4]	; (401108 <PIOD_Handler+0xc>)
  401102:	4b02      	ldr	r3, [pc, #8]	; (40110c <PIOD_Handler+0x10>)
  401104:	4798      	blx	r3
  401106:	bd08      	pop	{r3, pc}
  401108:	400e1400 	.word	0x400e1400
  40110c:	00401001 	.word	0x00401001

00401110 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  401110:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  401112:	2111      	movs	r1, #17
  401114:	4801      	ldr	r0, [pc, #4]	; (40111c <PIOE_Handler+0xc>)
  401116:	4b02      	ldr	r3, [pc, #8]	; (401120 <PIOE_Handler+0x10>)
  401118:	4798      	blx	r3
  40111a:	bd08      	pop	{r3, pc}
  40111c:	400e1600 	.word	0x400e1600
  401120:	00401001 	.word	0x00401001

00401124 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  401124:	2803      	cmp	r0, #3
  401126:	d011      	beq.n	40114c <pmc_mck_set_division+0x28>
  401128:	2804      	cmp	r0, #4
  40112a:	d012      	beq.n	401152 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40112c:	2802      	cmp	r0, #2
  40112e:	bf0c      	ite	eq
  401130:	f44f 7180 	moveq.w	r1, #256	; 0x100
  401134:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  401136:	4a08      	ldr	r2, [pc, #32]	; (401158 <pmc_mck_set_division+0x34>)
  401138:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40113a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40113e:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  401140:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401142:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401144:	f013 0f08 	tst.w	r3, #8
  401148:	d0fb      	beq.n	401142 <pmc_mck_set_division+0x1e>
}
  40114a:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  40114c:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  401150:	e7f1      	b.n	401136 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401152:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  401156:	e7ee      	b.n	401136 <pmc_mck_set_division+0x12>
  401158:	400e0600 	.word	0x400e0600

0040115c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40115c:	4a17      	ldr	r2, [pc, #92]	; (4011bc <pmc_switch_mck_to_pllack+0x60>)
  40115e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401164:	4318      	orrs	r0, r3
  401166:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401168:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40116a:	f013 0f08 	tst.w	r3, #8
  40116e:	d10a      	bne.n	401186 <pmc_switch_mck_to_pllack+0x2a>
  401170:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401174:	4911      	ldr	r1, [pc, #68]	; (4011bc <pmc_switch_mck_to_pllack+0x60>)
  401176:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401178:	f012 0f08 	tst.w	r2, #8
  40117c:	d103      	bne.n	401186 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40117e:	3b01      	subs	r3, #1
  401180:	d1f9      	bne.n	401176 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  401182:	2001      	movs	r0, #1
  401184:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401186:	4a0d      	ldr	r2, [pc, #52]	; (4011bc <pmc_switch_mck_to_pllack+0x60>)
  401188:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40118a:	f023 0303 	bic.w	r3, r3, #3
  40118e:	f043 0302 	orr.w	r3, r3, #2
  401192:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401194:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401196:	f013 0f08 	tst.w	r3, #8
  40119a:	d10a      	bne.n	4011b2 <pmc_switch_mck_to_pllack+0x56>
  40119c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4011a0:	4906      	ldr	r1, [pc, #24]	; (4011bc <pmc_switch_mck_to_pllack+0x60>)
  4011a2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4011a4:	f012 0f08 	tst.w	r2, #8
  4011a8:	d105      	bne.n	4011b6 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4011aa:	3b01      	subs	r3, #1
  4011ac:	d1f9      	bne.n	4011a2 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4011ae:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4011b0:	4770      	bx	lr
	return 0;
  4011b2:	2000      	movs	r0, #0
  4011b4:	4770      	bx	lr
  4011b6:	2000      	movs	r0, #0
  4011b8:	4770      	bx	lr
  4011ba:	bf00      	nop
  4011bc:	400e0600 	.word	0x400e0600

004011c0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4011c0:	b9a0      	cbnz	r0, 4011ec <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4011c2:	480e      	ldr	r0, [pc, #56]	; (4011fc <pmc_switch_mainck_to_xtal+0x3c>)
  4011c4:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4011c6:	0209      	lsls	r1, r1, #8
  4011c8:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4011ca:	4a0d      	ldr	r2, [pc, #52]	; (401200 <pmc_switch_mainck_to_xtal+0x40>)
  4011cc:	401a      	ands	r2, r3
  4011ce:	4b0d      	ldr	r3, [pc, #52]	; (401204 <pmc_switch_mainck_to_xtal+0x44>)
  4011d0:	4313      	orrs	r3, r2
  4011d2:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4011d4:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4011d6:	4602      	mov	r2, r0
  4011d8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4011da:	f013 0f01 	tst.w	r3, #1
  4011de:	d0fb      	beq.n	4011d8 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4011e0:	4a06      	ldr	r2, [pc, #24]	; (4011fc <pmc_switch_mainck_to_xtal+0x3c>)
  4011e2:	6a11      	ldr	r1, [r2, #32]
  4011e4:	4b08      	ldr	r3, [pc, #32]	; (401208 <pmc_switch_mainck_to_xtal+0x48>)
  4011e6:	430b      	orrs	r3, r1
  4011e8:	6213      	str	r3, [r2, #32]
  4011ea:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4011ec:	4903      	ldr	r1, [pc, #12]	; (4011fc <pmc_switch_mainck_to_xtal+0x3c>)
  4011ee:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4011f0:	4a06      	ldr	r2, [pc, #24]	; (40120c <pmc_switch_mainck_to_xtal+0x4c>)
  4011f2:	401a      	ands	r2, r3
  4011f4:	4b06      	ldr	r3, [pc, #24]	; (401210 <pmc_switch_mainck_to_xtal+0x50>)
  4011f6:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4011f8:	620b      	str	r3, [r1, #32]
  4011fa:	4770      	bx	lr
  4011fc:	400e0600 	.word	0x400e0600
  401200:	ffc8fffc 	.word	0xffc8fffc
  401204:	00370001 	.word	0x00370001
  401208:	01370000 	.word	0x01370000
  40120c:	fec8fffc 	.word	0xfec8fffc
  401210:	01370002 	.word	0x01370002

00401214 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401214:	4b02      	ldr	r3, [pc, #8]	; (401220 <pmc_osc_is_ready_mainck+0xc>)
  401216:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401218:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  40121c:	4770      	bx	lr
  40121e:	bf00      	nop
  401220:	400e0600 	.word	0x400e0600

00401224 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401224:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401228:	4b01      	ldr	r3, [pc, #4]	; (401230 <pmc_disable_pllack+0xc>)
  40122a:	629a      	str	r2, [r3, #40]	; 0x28
  40122c:	4770      	bx	lr
  40122e:	bf00      	nop
  401230:	400e0600 	.word	0x400e0600

00401234 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401234:	4b02      	ldr	r3, [pc, #8]	; (401240 <pmc_is_locked_pllack+0xc>)
  401236:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401238:	f000 0002 	and.w	r0, r0, #2
  40123c:	4770      	bx	lr
  40123e:	bf00      	nop
  401240:	400e0600 	.word	0x400e0600

00401244 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  401244:	283f      	cmp	r0, #63	; 0x3f
  401246:	d81e      	bhi.n	401286 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  401248:	281f      	cmp	r0, #31
  40124a:	d80c      	bhi.n	401266 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40124c:	4b11      	ldr	r3, [pc, #68]	; (401294 <pmc_enable_periph_clk+0x50>)
  40124e:	699a      	ldr	r2, [r3, #24]
  401250:	2301      	movs	r3, #1
  401252:	4083      	lsls	r3, r0
  401254:	4393      	bics	r3, r2
  401256:	d018      	beq.n	40128a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  401258:	2301      	movs	r3, #1
  40125a:	fa03 f000 	lsl.w	r0, r3, r0
  40125e:	4b0d      	ldr	r3, [pc, #52]	; (401294 <pmc_enable_periph_clk+0x50>)
  401260:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401262:	2000      	movs	r0, #0
  401264:	4770      	bx	lr
		ul_id -= 32;
  401266:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401268:	4b0a      	ldr	r3, [pc, #40]	; (401294 <pmc_enable_periph_clk+0x50>)
  40126a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40126e:	2301      	movs	r3, #1
  401270:	4083      	lsls	r3, r0
  401272:	4393      	bics	r3, r2
  401274:	d00b      	beq.n	40128e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  401276:	2301      	movs	r3, #1
  401278:	fa03 f000 	lsl.w	r0, r3, r0
  40127c:	4b05      	ldr	r3, [pc, #20]	; (401294 <pmc_enable_periph_clk+0x50>)
  40127e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  401282:	2000      	movs	r0, #0
  401284:	4770      	bx	lr
		return 1;
  401286:	2001      	movs	r0, #1
  401288:	4770      	bx	lr
	return 0;
  40128a:	2000      	movs	r0, #0
  40128c:	4770      	bx	lr
  40128e:	2000      	movs	r0, #0
}
  401290:	4770      	bx	lr
  401292:	bf00      	nop
  401294:	400e0600 	.word	0x400e0600

00401298 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401298:	e7fe      	b.n	401298 <Dummy_Handler>
	...

0040129c <Reset_Handler>:
{
  40129c:	b500      	push	{lr}
  40129e:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4012a0:	4b25      	ldr	r3, [pc, #148]	; (401338 <Reset_Handler+0x9c>)
  4012a2:	4a26      	ldr	r2, [pc, #152]	; (40133c <Reset_Handler+0xa0>)
  4012a4:	429a      	cmp	r2, r3
  4012a6:	d010      	beq.n	4012ca <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4012a8:	4b25      	ldr	r3, [pc, #148]	; (401340 <Reset_Handler+0xa4>)
  4012aa:	4a23      	ldr	r2, [pc, #140]	; (401338 <Reset_Handler+0x9c>)
  4012ac:	429a      	cmp	r2, r3
  4012ae:	d20c      	bcs.n	4012ca <Reset_Handler+0x2e>
  4012b0:	3b01      	subs	r3, #1
  4012b2:	1a9b      	subs	r3, r3, r2
  4012b4:	f023 0303 	bic.w	r3, r3, #3
  4012b8:	3304      	adds	r3, #4
  4012ba:	4413      	add	r3, r2
  4012bc:	491f      	ldr	r1, [pc, #124]	; (40133c <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4012be:	f851 0b04 	ldr.w	r0, [r1], #4
  4012c2:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4012c6:	429a      	cmp	r2, r3
  4012c8:	d1f9      	bne.n	4012be <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4012ca:	4b1e      	ldr	r3, [pc, #120]	; (401344 <Reset_Handler+0xa8>)
  4012cc:	4a1e      	ldr	r2, [pc, #120]	; (401348 <Reset_Handler+0xac>)
  4012ce:	429a      	cmp	r2, r3
  4012d0:	d20a      	bcs.n	4012e8 <Reset_Handler+0x4c>
  4012d2:	3b01      	subs	r3, #1
  4012d4:	1a9b      	subs	r3, r3, r2
  4012d6:	f023 0303 	bic.w	r3, r3, #3
  4012da:	3304      	adds	r3, #4
  4012dc:	4413      	add	r3, r2
                *pDest++ = 0;
  4012de:	2100      	movs	r1, #0
  4012e0:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4012e4:	4293      	cmp	r3, r2
  4012e6:	d1fb      	bne.n	4012e0 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4012e8:	4a18      	ldr	r2, [pc, #96]	; (40134c <Reset_Handler+0xb0>)
  4012ea:	4b19      	ldr	r3, [pc, #100]	; (401350 <Reset_Handler+0xb4>)
  4012ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4012f0:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4012f2:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4012f6:	fab3 f383 	clz	r3, r3
  4012fa:	095b      	lsrs	r3, r3, #5
  4012fc:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4012fe:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401300:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401304:	2200      	movs	r2, #0
  401306:	4b13      	ldr	r3, [pc, #76]	; (401354 <Reset_Handler+0xb8>)
  401308:	701a      	strb	r2, [r3, #0]
	return flags;
  40130a:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  40130c:	4a12      	ldr	r2, [pc, #72]	; (401358 <Reset_Handler+0xbc>)
  40130e:	6813      	ldr	r3, [r2, #0]
  401310:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401314:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  401316:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40131a:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40131e:	b129      	cbz	r1, 40132c <Reset_Handler+0x90>
		cpu_irq_enable();
  401320:	2201      	movs	r2, #1
  401322:	4b0c      	ldr	r3, [pc, #48]	; (401354 <Reset_Handler+0xb8>)
  401324:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  401326:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40132a:	b662      	cpsie	i
        __libc_init_array();
  40132c:	4b0b      	ldr	r3, [pc, #44]	; (40135c <Reset_Handler+0xc0>)
  40132e:	4798      	blx	r3
        main();
  401330:	4b0b      	ldr	r3, [pc, #44]	; (401360 <Reset_Handler+0xc4>)
  401332:	4798      	blx	r3
  401334:	e7fe      	b.n	401334 <Reset_Handler+0x98>
  401336:	bf00      	nop
  401338:	20400000 	.word	0x20400000
  40133c:	004037c4 	.word	0x004037c4
  401340:	20400ed4 	.word	0x20400ed4
  401344:	20404a18 	.word	0x20404a18
  401348:	20400ed8 	.word	0x20400ed8
  40134c:	e000ed00 	.word	0xe000ed00
  401350:	00400000 	.word	0x00400000
  401354:	20400018 	.word	0x20400018
  401358:	e000ed88 	.word	0xe000ed88
  40135c:	00402a3d 	.word	0x00402a3d
  401360:	00401c05 	.word	0x00401c05

00401364 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401364:	4b3b      	ldr	r3, [pc, #236]	; (401454 <SystemCoreClockUpdate+0xf0>)
  401366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401368:	f003 0303 	and.w	r3, r3, #3
  40136c:	2b01      	cmp	r3, #1
  40136e:	d01d      	beq.n	4013ac <SystemCoreClockUpdate+0x48>
  401370:	b183      	cbz	r3, 401394 <SystemCoreClockUpdate+0x30>
  401372:	2b02      	cmp	r3, #2
  401374:	d036      	beq.n	4013e4 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401376:	4b37      	ldr	r3, [pc, #220]	; (401454 <SystemCoreClockUpdate+0xf0>)
  401378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40137a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40137e:	2b70      	cmp	r3, #112	; 0x70
  401380:	d05f      	beq.n	401442 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401382:	4b34      	ldr	r3, [pc, #208]	; (401454 <SystemCoreClockUpdate+0xf0>)
  401384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401386:	4934      	ldr	r1, [pc, #208]	; (401458 <SystemCoreClockUpdate+0xf4>)
  401388:	f3c2 1202 	ubfx	r2, r2, #4, #3
  40138c:	680b      	ldr	r3, [r1, #0]
  40138e:	40d3      	lsrs	r3, r2
  401390:	600b      	str	r3, [r1, #0]
  401392:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401394:	4b31      	ldr	r3, [pc, #196]	; (40145c <SystemCoreClockUpdate+0xf8>)
  401396:	695b      	ldr	r3, [r3, #20]
  401398:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40139c:	bf14      	ite	ne
  40139e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4013a2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4013a6:	4b2c      	ldr	r3, [pc, #176]	; (401458 <SystemCoreClockUpdate+0xf4>)
  4013a8:	601a      	str	r2, [r3, #0]
  4013aa:	e7e4      	b.n	401376 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4013ac:	4b29      	ldr	r3, [pc, #164]	; (401454 <SystemCoreClockUpdate+0xf0>)
  4013ae:	6a1b      	ldr	r3, [r3, #32]
  4013b0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4013b4:	d003      	beq.n	4013be <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4013b6:	4a2a      	ldr	r2, [pc, #168]	; (401460 <SystemCoreClockUpdate+0xfc>)
  4013b8:	4b27      	ldr	r3, [pc, #156]	; (401458 <SystemCoreClockUpdate+0xf4>)
  4013ba:	601a      	str	r2, [r3, #0]
  4013bc:	e7db      	b.n	401376 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4013be:	4a29      	ldr	r2, [pc, #164]	; (401464 <SystemCoreClockUpdate+0x100>)
  4013c0:	4b25      	ldr	r3, [pc, #148]	; (401458 <SystemCoreClockUpdate+0xf4>)
  4013c2:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4013c4:	4b23      	ldr	r3, [pc, #140]	; (401454 <SystemCoreClockUpdate+0xf0>)
  4013c6:	6a1b      	ldr	r3, [r3, #32]
  4013c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4013cc:	2b10      	cmp	r3, #16
  4013ce:	d005      	beq.n	4013dc <SystemCoreClockUpdate+0x78>
  4013d0:	2b20      	cmp	r3, #32
  4013d2:	d1d0      	bne.n	401376 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4013d4:	4a22      	ldr	r2, [pc, #136]	; (401460 <SystemCoreClockUpdate+0xfc>)
  4013d6:	4b20      	ldr	r3, [pc, #128]	; (401458 <SystemCoreClockUpdate+0xf4>)
  4013d8:	601a      	str	r2, [r3, #0]
          break;
  4013da:	e7cc      	b.n	401376 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  4013dc:	4a22      	ldr	r2, [pc, #136]	; (401468 <SystemCoreClockUpdate+0x104>)
  4013de:	4b1e      	ldr	r3, [pc, #120]	; (401458 <SystemCoreClockUpdate+0xf4>)
  4013e0:	601a      	str	r2, [r3, #0]
          break;
  4013e2:	e7c8      	b.n	401376 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4013e4:	4b1b      	ldr	r3, [pc, #108]	; (401454 <SystemCoreClockUpdate+0xf0>)
  4013e6:	6a1b      	ldr	r3, [r3, #32]
  4013e8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4013ec:	d016      	beq.n	40141c <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4013ee:	4a1c      	ldr	r2, [pc, #112]	; (401460 <SystemCoreClockUpdate+0xfc>)
  4013f0:	4b19      	ldr	r3, [pc, #100]	; (401458 <SystemCoreClockUpdate+0xf4>)
  4013f2:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4013f4:	4b17      	ldr	r3, [pc, #92]	; (401454 <SystemCoreClockUpdate+0xf0>)
  4013f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4013f8:	f003 0303 	and.w	r3, r3, #3
  4013fc:	2b02      	cmp	r3, #2
  4013fe:	d1ba      	bne.n	401376 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401400:	4a14      	ldr	r2, [pc, #80]	; (401454 <SystemCoreClockUpdate+0xf0>)
  401402:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401404:	6a92      	ldr	r2, [r2, #40]	; 0x28
  401406:	4814      	ldr	r0, [pc, #80]	; (401458 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401408:	f3c1 410a 	ubfx	r1, r1, #16, #11
  40140c:	6803      	ldr	r3, [r0, #0]
  40140e:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401412:	b2d2      	uxtb	r2, r2
  401414:	fbb3 f3f2 	udiv	r3, r3, r2
  401418:	6003      	str	r3, [r0, #0]
  40141a:	e7ac      	b.n	401376 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40141c:	4a11      	ldr	r2, [pc, #68]	; (401464 <SystemCoreClockUpdate+0x100>)
  40141e:	4b0e      	ldr	r3, [pc, #56]	; (401458 <SystemCoreClockUpdate+0xf4>)
  401420:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401422:	4b0c      	ldr	r3, [pc, #48]	; (401454 <SystemCoreClockUpdate+0xf0>)
  401424:	6a1b      	ldr	r3, [r3, #32]
  401426:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40142a:	2b10      	cmp	r3, #16
  40142c:	d005      	beq.n	40143a <SystemCoreClockUpdate+0xd6>
  40142e:	2b20      	cmp	r3, #32
  401430:	d1e0      	bne.n	4013f4 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  401432:	4a0b      	ldr	r2, [pc, #44]	; (401460 <SystemCoreClockUpdate+0xfc>)
  401434:	4b08      	ldr	r3, [pc, #32]	; (401458 <SystemCoreClockUpdate+0xf4>)
  401436:	601a      	str	r2, [r3, #0]
          break;
  401438:	e7dc      	b.n	4013f4 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  40143a:	4a0b      	ldr	r2, [pc, #44]	; (401468 <SystemCoreClockUpdate+0x104>)
  40143c:	4b06      	ldr	r3, [pc, #24]	; (401458 <SystemCoreClockUpdate+0xf4>)
  40143e:	601a      	str	r2, [r3, #0]
          break;
  401440:	e7d8      	b.n	4013f4 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  401442:	4a05      	ldr	r2, [pc, #20]	; (401458 <SystemCoreClockUpdate+0xf4>)
  401444:	6813      	ldr	r3, [r2, #0]
  401446:	4909      	ldr	r1, [pc, #36]	; (40146c <SystemCoreClockUpdate+0x108>)
  401448:	fba1 1303 	umull	r1, r3, r1, r3
  40144c:	085b      	lsrs	r3, r3, #1
  40144e:	6013      	str	r3, [r2, #0]
  401450:	4770      	bx	lr
  401452:	bf00      	nop
  401454:	400e0600 	.word	0x400e0600
  401458:	2040001c 	.word	0x2040001c
  40145c:	400e1810 	.word	0x400e1810
  401460:	00b71b00 	.word	0x00b71b00
  401464:	003d0900 	.word	0x003d0900
  401468:	007a1200 	.word	0x007a1200
  40146c:	aaaaaaab 	.word	0xaaaaaaab

00401470 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401470:	4b12      	ldr	r3, [pc, #72]	; (4014bc <system_init_flash+0x4c>)
  401472:	4298      	cmp	r0, r3
  401474:	d911      	bls.n	40149a <system_init_flash+0x2a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  401476:	4b12      	ldr	r3, [pc, #72]	; (4014c0 <system_init_flash+0x50>)
  401478:	4298      	cmp	r0, r3
  40147a:	d913      	bls.n	4014a4 <system_init_flash+0x34>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  40147c:	4b11      	ldr	r3, [pc, #68]	; (4014c4 <system_init_flash+0x54>)
  40147e:	4298      	cmp	r0, r3
  401480:	d914      	bls.n	4014ac <system_init_flash+0x3c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401482:	4b11      	ldr	r3, [pc, #68]	; (4014c8 <system_init_flash+0x58>)
  401484:	4298      	cmp	r0, r3
  401486:	d915      	bls.n	4014b4 <system_init_flash+0x44>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401488:	4b10      	ldr	r3, [pc, #64]	; (4014cc <system_init_flash+0x5c>)
  40148a:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40148c:	bf94      	ite	ls
  40148e:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401492:	4a0f      	ldrhi	r2, [pc, #60]	; (4014d0 <system_init_flash+0x60>)
  401494:	4b0f      	ldr	r3, [pc, #60]	; (4014d4 <system_init_flash+0x64>)
  401496:	601a      	str	r2, [r3, #0]
  401498:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40149a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40149e:	4b0d      	ldr	r3, [pc, #52]	; (4014d4 <system_init_flash+0x64>)
  4014a0:	601a      	str	r2, [r3, #0]
  4014a2:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4014a4:	4a0c      	ldr	r2, [pc, #48]	; (4014d8 <system_init_flash+0x68>)
  4014a6:	4b0b      	ldr	r3, [pc, #44]	; (4014d4 <system_init_flash+0x64>)
  4014a8:	601a      	str	r2, [r3, #0]
  4014aa:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4014ac:	4a0b      	ldr	r2, [pc, #44]	; (4014dc <system_init_flash+0x6c>)
  4014ae:	4b09      	ldr	r3, [pc, #36]	; (4014d4 <system_init_flash+0x64>)
  4014b0:	601a      	str	r2, [r3, #0]
  4014b2:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4014b4:	4a0a      	ldr	r2, [pc, #40]	; (4014e0 <system_init_flash+0x70>)
  4014b6:	4b07      	ldr	r3, [pc, #28]	; (4014d4 <system_init_flash+0x64>)
  4014b8:	601a      	str	r2, [r3, #0]
  4014ba:	4770      	bx	lr
  4014bc:	01312cff 	.word	0x01312cff
  4014c0:	026259ff 	.word	0x026259ff
  4014c4:	039386ff 	.word	0x039386ff
  4014c8:	04c4b3ff 	.word	0x04c4b3ff
  4014cc:	05f5e0ff 	.word	0x05f5e0ff
  4014d0:	04000500 	.word	0x04000500
  4014d4:	400e0c00 	.word	0x400e0c00
  4014d8:	04000100 	.word	0x04000100
  4014dc:	04000200 	.word	0x04000200
  4014e0:	04000300 	.word	0x04000300

004014e4 <but_next_callback>:

volatile char but_next_flag;
volatile char but_prev_flag;
volatile char but_play_flag;

void but_next_callback(void) { but_next_flag = 1; }
  4014e4:	2201      	movs	r2, #1
  4014e6:	4b01      	ldr	r3, [pc, #4]	; (4014ec <but_next_callback+0x8>)
  4014e8:	701a      	strb	r2, [r3, #0]
  4014ea:	4770      	bx	lr
  4014ec:	204049f0 	.word	0x204049f0

004014f0 <but_prev_callback>:
void but_prev_callback(void) { but_prev_flag = 1; }
  4014f0:	2201      	movs	r2, #1
  4014f2:	4b01      	ldr	r3, [pc, #4]	; (4014f8 <but_prev_callback+0x8>)
  4014f4:	701a      	strb	r2, [r3, #0]
  4014f6:	4770      	bx	lr
  4014f8:	20401170 	.word	0x20401170

004014fc <but_play_callback>:
void but_play_callback(void) { but_play_flag = 1; }
  4014fc:	2201      	movs	r2, #1
  4014fe:	4b01      	ldr	r3, [pc, #4]	; (401504 <but_play_callback+0x8>)
  401500:	701a      	strb	r2, [r3, #0]
  401502:	4770      	bx	lr
  401504:	20403718 	.word	0x20403718

00401508 <init>:

void init(void){
  401508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40150c:	b082      	sub	sp, #8
	board_init();
  40150e:	4b3f      	ldr	r3, [pc, #252]	; (40160c <init+0x104>)
  401510:	4798      	blx	r3
	sysclk_init();
  401512:	4b3f      	ldr	r3, [pc, #252]	; (401610 <init+0x108>)
  401514:	4798      	blx	r3

	WDT->WDT_MR = WDT_MR_WDDIS;
  401516:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40151a:	4b3e      	ldr	r3, [pc, #248]	; (401614 <init+0x10c>)
  40151c:	605a      	str	r2, [r3, #4]
	
	delay_init();
	gfx_mono_ssd1306_init();
  40151e:	4b3e      	ldr	r3, [pc, #248]	; (401618 <init+0x110>)
  401520:	4798      	blx	r3

	pmc_enable_periph_clk(BUT1_PIO_ID);
  401522:	2010      	movs	r0, #16
  401524:	4c3d      	ldr	r4, [pc, #244]	; (40161c <init+0x114>)
  401526:	47a0      	blx	r4
	pmc_enable_periph_clk(BUT2_PIO_ID);
  401528:	200c      	movs	r0, #12
  40152a:	47a0      	blx	r4
	pmc_enable_periph_clk(BUT3_PIO_ID);
  40152c:	200a      	movs	r0, #10
  40152e:	47a0      	blx	r4
	pmc_enable_periph_clk(BUZZ_PIO_ID);
  401530:	200a      	movs	r0, #10
  401532:	47a0      	blx	r4
	pmc_enable_periph_clk(LED1_PIO_ID);
  401534:	200a      	movs	r0, #10
  401536:	47a0      	blx	r4
	pmc_enable_periph_clk(LED2_PIO_ID);
  401538:	200c      	movs	r0, #12
  40153a:	47a0      	blx	r4
	pmc_enable_periph_clk(LED3_PIO_ID);
  40153c:	200b      	movs	r0, #11
  40153e:	47a0      	blx	r4
	
	pio_set_output(BUZZ_PIO, BUZZ_PIO_IDX_MASK, 0, 0, 0);
  401540:	4e37      	ldr	r6, [pc, #220]	; (401620 <init+0x118>)
  401542:	2400      	movs	r4, #0
  401544:	9400      	str	r4, [sp, #0]
  401546:	4623      	mov	r3, r4
  401548:	4622      	mov	r2, r4
  40154a:	2108      	movs	r1, #8
  40154c:	4630      	mov	r0, r6
  40154e:	4d35      	ldr	r5, [pc, #212]	; (401624 <init+0x11c>)
  401550:	47a8      	blx	r5
	pio_set_output(LED1_PIO, LED1_PIO_IDX_MASK, 0, 0, 0);
  401552:	9400      	str	r4, [sp, #0]
  401554:	4623      	mov	r3, r4
  401556:	4622      	mov	r2, r4
  401558:	2101      	movs	r1, #1
  40155a:	4630      	mov	r0, r6
  40155c:	47a8      	blx	r5
	pio_set_output(LED2_PIO, LED2_PIO_IDX_MASK, 0, 0, 0);
  40155e:	4f32      	ldr	r7, [pc, #200]	; (401628 <init+0x120>)
  401560:	9400      	str	r4, [sp, #0]
  401562:	4623      	mov	r3, r4
  401564:	4622      	mov	r2, r4
  401566:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40156a:	4638      	mov	r0, r7
  40156c:	47a8      	blx	r5
	pio_set_output(LED3_PIO, LED3_PIO_IDX_MASK, 0, 0, 0);
  40156e:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 401644 <init+0x13c>
  401572:	9400      	str	r4, [sp, #0]
  401574:	4623      	mov	r3, r4
  401576:	4622      	mov	r2, r4
  401578:	2104      	movs	r1, #4
  40157a:	4648      	mov	r0, r9
  40157c:	47a8      	blx	r5
	
	pio_handler_set(BUT1_PIO, BUT1_PIO_ID, BUT1_PIO_IDX_MASK, PIO_IT_FALL_EDGE, but_prev_callback);
  40157e:	4d2b      	ldr	r5, [pc, #172]	; (40162c <init+0x124>)
  401580:	4b2b      	ldr	r3, [pc, #172]	; (401630 <init+0x128>)
  401582:	9300      	str	r3, [sp, #0]
  401584:	2350      	movs	r3, #80	; 0x50
  401586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40158a:	2110      	movs	r1, #16
  40158c:	4628      	mov	r0, r5
  40158e:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 401648 <init+0x140>
  401592:	47d0      	blx	sl
	pio_enable_interrupt(BUT1_PIO, BUT1_PIO_IDX_MASK);
  401594:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401598:	4628      	mov	r0, r5
  40159a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 40164c <init+0x144>
  40159e:	47c0      	blx	r8
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4015a0:	4d24      	ldr	r5, [pc, #144]	; (401634 <init+0x12c>)
  4015a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  4015a6:	602b      	str	r3, [r5, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4015a8:	f885 4310 	strb.w	r4, [r5, #784]	; 0x310
	
	NVIC_EnableIRQ(BUT1_PIO_ID);
	NVIC_SetPriority(BUT1_PIO_ID, 0);
	
	pio_handler_set(BUT2_PIO, BUT2_PIO_ID, BUT2_PIO_IDX_MASK, PIO_IT_FALL_EDGE, but_play_callback);
  4015ac:	4b22      	ldr	r3, [pc, #136]	; (401638 <init+0x130>)
  4015ae:	9300      	str	r3, [sp, #0]
  4015b0:	2350      	movs	r3, #80	; 0x50
  4015b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4015b6:	210c      	movs	r1, #12
  4015b8:	4638      	mov	r0, r7
  4015ba:	47d0      	blx	sl
	pio_enable_interrupt(BUT2_PIO, BUT2_PIO_IDX_MASK);
  4015bc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4015c0:	4638      	mov	r0, r7
  4015c2:	47c0      	blx	r8
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4015c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4015c8:	602b      	str	r3, [r5, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4015ca:	f885 430c 	strb.w	r4, [r5, #780]	; 0x30c
	
	NVIC_EnableIRQ(BUT2_PIO_ID);
	NVIC_SetPriority(BUT2_PIO_ID, 0);
	
	pio_handler_set(BUT3_PIO, BUT3_PIO_ID, BUT3_PIO_IDX_MASK, PIO_IT_FALL_EDGE, but_next_callback);
  4015ce:	4b1b      	ldr	r3, [pc, #108]	; (40163c <init+0x134>)
  4015d0:	9300      	str	r3, [sp, #0]
  4015d2:	2350      	movs	r3, #80	; 0x50
  4015d4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4015d8:	210a      	movs	r1, #10
  4015da:	4630      	mov	r0, r6
  4015dc:	47d0      	blx	sl
	pio_enable_interrupt(BUT3_PIO, BUT3_PIO_IDX_MASK);
  4015de:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4015e2:	4630      	mov	r0, r6
  4015e4:	47c0      	blx	r8
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4015e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4015ea:	602b      	str	r3, [r5, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4015ec:	f885 430a 	strb.w	r4, [r5, #778]	; 0x30a
	
	NVIC_EnableIRQ(BUT3_PIO_ID);
	NVIC_SetPriority(BUT3_PIO_ID, 0);
	
	pio_set(LED1_PIO, LED1_PIO_IDX_MASK);
  4015f0:	2101      	movs	r1, #1
  4015f2:	4630      	mov	r0, r6
  4015f4:	4c12      	ldr	r4, [pc, #72]	; (401640 <init+0x138>)
  4015f6:	47a0      	blx	r4
	pio_set(LED2_PIO, LED2_PIO_IDX_MASK);
  4015f8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4015fc:	4638      	mov	r0, r7
  4015fe:	47a0      	blx	r4
	pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
  401600:	2104      	movs	r1, #4
  401602:	4648      	mov	r0, r9
  401604:	47a0      	blx	r4
}
  401606:	b002      	add	sp, #8
  401608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40160c:	004001ad 	.word	0x004001ad
  401610:	00400c7d 	.word	0x00400c7d
  401614:	400e1850 	.word	0x400e1850
  401618:	0040095d 	.word	0x0040095d
  40161c:	00401245 	.word	0x00401245
  401620:	400e0e00 	.word	0x400e0e00
  401624:	00400dbd 	.word	0x00400dbd
  401628:	400e1200 	.word	0x400e1200
  40162c:	400e1400 	.word	0x400e1400
  401630:	004014f1 	.word	0x004014f1
  401634:	e000e100 	.word	0xe000e100
  401638:	004014fd 	.word	0x004014fd
  40163c:	004014e5 	.word	0x004014e5
  401640:	00400ced 	.word	0x00400ced
  401644:	400e1000 	.word	0x400e1000
  401648:	00401051 	.word	0x00401051
  40164c:	00400ea7 	.word	0x00400ea7

00401650 <create_songs>:

void create_songs() {
  401650:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	mario_main_song.max_value = mario_main[0];
  401654:	4b6a      	ldr	r3, [pc, #424]	; (401800 <create_songs+0x1b0>)
  401656:	461a      	mov	r2, r3
  401658:	f852 1904 	ldr.w	r1, [r2], #-4
  40165c:	4869      	ldr	r0, [pc, #420]	; (401804 <create_songs+0x1b4>)
  40165e:	f241 24c8 	movw	r4, #4808	; 0x12c8
  401662:	5101      	str	r1, [r0, r4]
	mario_main_song.min_value = mario_main[0];
  401664:	f241 24cc 	movw	r4, #4812	; 0x12cc
  401668:	5101      	str	r1, [r0, r4]
  40166a:	1f05      	subs	r5, r0, #4
  40166c:	4c66      	ldr	r4, [pc, #408]	; (401808 <create_songs+0x1b8>)
  40166e:	f600 105c 	addw	r0, r0, #2396	; 0x95c
  401672:	f503 7e9a 	add.w	lr, r3, #308	; 0x134
  401676:	460f      	mov	r7, r1
  401678:	f04f 0c00 	mov.w	ip, #0
  40167c:	46e0      	mov	r8, ip
	for (int i = 0; i < sizeof(mario_main) / sizeof(int); i++) {
		
		mario_main_song.music[i] = mario_main[i];
		mario_main_song.tempo[i] = mario_main_tempo[i];
		
		if (mario_main_song.max_value < mario_main[i]) mario_main_song.max_value = mario_main[i];
  40167e:	f04f 0901 	mov.w	r9, #1
  401682:	e001      	b.n	401688 <create_songs+0x38>
	for (int i = 0; i < sizeof(mario_main) / sizeof(int); i++) {
  401684:	4572      	cmp	r2, lr
  401686:	d015      	beq.n	4016b4 <create_songs+0x64>
		mario_main_song.music[i] = mario_main[i];
  401688:	f852 3f04 	ldr.w	r3, [r2, #4]!
  40168c:	f845 3f04 	str.w	r3, [r5, #4]!
		mario_main_song.tempo[i] = mario_main_tempo[i];
  401690:	f854 6f04 	ldr.w	r6, [r4, #4]!
  401694:	f840 6f04 	str.w	r6, [r0, #4]!
		if (mario_main_song.max_value < mario_main[i]) mario_main_song.max_value = mario_main[i];
  401698:	42bb      	cmp	r3, r7
  40169a:	dd01      	ble.n	4016a0 <create_songs+0x50>
  40169c:	461f      	mov	r7, r3
  40169e:	46cc      	mov	ip, r9
		if (mario_main_song.min_value > mario_main[i] && mario_main[i] != 0) mario_main_song.min_value = mario_main[i];
  4016a0:	2b00      	cmp	r3, #0
  4016a2:	bf18      	it	ne
  4016a4:	428b      	cmpne	r3, r1
  4016a6:	bfb4      	ite	lt
  4016a8:	2601      	movlt	r6, #1
  4016aa:	2600      	movge	r6, #0
  4016ac:	daea      	bge.n	401684 <create_songs+0x34>
  4016ae:	46b0      	mov	r8, r6
  4016b0:	4619      	mov	r1, r3
  4016b2:	e7e7      	b.n	401684 <create_songs+0x34>
  4016b4:	f1b8 0f00 	cmp.w	r8, #0
  4016b8:	d124      	bne.n	401704 <create_songs+0xb4>
  4016ba:	f1bc 0f00 	cmp.w	ip, #0
  4016be:	d003      	beq.n	4016c8 <create_songs+0x78>
  4016c0:	f241 23c8 	movw	r3, #4808	; 0x12c8
  4016c4:	4a4f      	ldr	r2, [pc, #316]	; (401804 <create_songs+0x1b4>)
  4016c6:	50d7      	str	r7, [r2, r3]
	}
	mario_main_song.velocity = 0.15;
  4016c8:	a14b      	add	r1, pc, #300	; (adr r1, 4017f8 <create_songs+0x1a8>)
  4016ca:	e9d1 0100 	ldrd	r0, r1, [r1]
  4016ce:	4b4f      	ldr	r3, [pc, #316]	; (40180c <create_songs+0x1bc>)
  4016d0:	e9c3 0100 	strd	r0, r1, [r3]
	
	pirates_of_the_caribean_song.max_value = pirates_of_the_caribean[0];
  4016d4:	4b4e      	ldr	r3, [pc, #312]	; (401810 <create_songs+0x1c0>)
  4016d6:	461a      	mov	r2, r3
  4016d8:	f852 7904 	ldr.w	r7, [r2], #-4
  4016dc:	484d      	ldr	r0, [pc, #308]	; (401814 <create_songs+0x1c4>)
  4016de:	f241 21c8 	movw	r1, #4808	; 0x12c8
  4016e2:	5047      	str	r7, [r0, r1]
	pirates_of_the_caribean_song.min_value = pirates_of_the_caribean[0];
  4016e4:	f241 21cc 	movw	r1, #4812	; 0x12cc
  4016e8:	5047      	str	r7, [r0, r1]
  4016ea:	1f05      	subs	r5, r0, #4
  4016ec:	4c4a      	ldr	r4, [pc, #296]	; (401818 <create_songs+0x1c8>)
  4016ee:	f600 105c 	addw	r0, r0, #2396	; 0x95c
  4016f2:	f503 7e4a 	add.w	lr, r3, #808	; 0x328
  4016f6:	4639      	mov	r1, r7
  4016f8:	f04f 0c00 	mov.w	ip, #0
  4016fc:	46e0      	mov	r8, ip
	for (int i = 0; i < sizeof(pirates_of_the_caribean) / sizeof(int); i++) {
		
		pirates_of_the_caribean_song.music[i] = pirates_of_the_caribean[i];
		pirates_of_the_caribean_song.tempo[i] = pirates_of_the_caribean_tempo[i];
		
		if (pirates_of_the_caribean_song.max_value < pirates_of_the_caribean[i]) pirates_of_the_caribean_song.max_value = pirates_of_the_caribean[i];
  4016fe:	f04f 0901 	mov.w	r9, #1
  401702:	e006      	b.n	401712 <create_songs+0xc2>
  401704:	f241 23cc 	movw	r3, #4812	; 0x12cc
  401708:	4a3e      	ldr	r2, [pc, #248]	; (401804 <create_songs+0x1b4>)
  40170a:	50d1      	str	r1, [r2, r3]
  40170c:	e7d5      	b.n	4016ba <create_songs+0x6a>
	for (int i = 0; i < sizeof(pirates_of_the_caribean) / sizeof(int); i++) {
  40170e:	4572      	cmp	r2, lr
  401710:	d015      	beq.n	40173e <create_songs+0xee>
		pirates_of_the_caribean_song.music[i] = pirates_of_the_caribean[i];
  401712:	f852 3f04 	ldr.w	r3, [r2, #4]!
  401716:	f845 3f04 	str.w	r3, [r5, #4]!
		pirates_of_the_caribean_song.tempo[i] = pirates_of_the_caribean_tempo[i];
  40171a:	f854 6f04 	ldr.w	r6, [r4, #4]!
  40171e:	f840 6f04 	str.w	r6, [r0, #4]!
		if (pirates_of_the_caribean_song.max_value < pirates_of_the_caribean[i]) pirates_of_the_caribean_song.max_value = pirates_of_the_caribean[i];
  401722:	429f      	cmp	r7, r3
  401724:	da01      	bge.n	40172a <create_songs+0xda>
  401726:	461f      	mov	r7, r3
  401728:	46c8      	mov	r8, r9
		if (pirates_of_the_caribean_song.min_value > pirates_of_the_caribean[i] && pirates_of_the_caribean[i] != 0) pirates_of_the_caribean_song.min_value = pirates_of_the_caribean[i];
  40172a:	2b00      	cmp	r3, #0
  40172c:	bf18      	it	ne
  40172e:	428b      	cmpne	r3, r1
  401730:	bfb4      	ite	lt
  401732:	2601      	movlt	r6, #1
  401734:	2600      	movge	r6, #0
  401736:	daea      	bge.n	40170e <create_songs+0xbe>
  401738:	46b4      	mov	ip, r6
  40173a:	4619      	mov	r1, r3
  40173c:	e7e7      	b.n	40170e <create_songs+0xbe>
  40173e:	f1b8 0f00 	cmp.w	r8, #0
  401742:	d123      	bne.n	40178c <create_songs+0x13c>
  401744:	f1bc 0f00 	cmp.w	ip, #0
  401748:	d003      	beq.n	401752 <create_songs+0x102>
  40174a:	f241 23cc 	movw	r3, #4812	; 0x12cc
  40174e:	4a31      	ldr	r2, [pc, #196]	; (401814 <create_songs+0x1c4>)
  401750:	50d1      	str	r1, [r2, r3]
	}
	pirates_of_the_caribean_song.velocity = 1.5;
  401752:	2000      	movs	r0, #0
  401754:	4931      	ldr	r1, [pc, #196]	; (40181c <create_songs+0x1cc>)
  401756:	4b32      	ldr	r3, [pc, #200]	; (401820 <create_songs+0x1d0>)
  401758:	e9c3 0100 	strd	r0, r1, [r3]
	
	underworld_mario_song.max_value = underworld_mario[0];
  40175c:	4b31      	ldr	r3, [pc, #196]	; (401824 <create_songs+0x1d4>)
  40175e:	461a      	mov	r2, r3
  401760:	f852 1904 	ldr.w	r1, [r2], #-4
  401764:	4830      	ldr	r0, [pc, #192]	; (401828 <create_songs+0x1d8>)
  401766:	f241 24c8 	movw	r4, #4808	; 0x12c8
  40176a:	5101      	str	r1, [r0, r4]
	underworld_mario_song.min_value = underworld_mario[0];
  40176c:	f241 24cc 	movw	r4, #4812	; 0x12cc
  401770:	5101      	str	r1, [r0, r4]
  401772:	1f05      	subs	r5, r0, #4
  401774:	4c2d      	ldr	r4, [pc, #180]	; (40182c <create_songs+0x1dc>)
  401776:	f600 105c 	addw	r0, r0, #2396	; 0x95c
  40177a:	f103 0edc 	add.w	lr, r3, #220	; 0xdc
  40177e:	460f      	mov	r7, r1
  401780:	f04f 0c00 	mov.w	ip, #0
  401784:	46e0      	mov	r8, ip
	for (int i = 0; i < sizeof(underworld_mario) / sizeof(int); i++) {
		
		underworld_mario_song.music[i] = underworld_mario[i];
		underworld_mario_song.tempo[i] = underworld_mario_tempo[i];
		
		if (underworld_mario_song.max_value < underworld_mario[i]) underworld_mario_song.max_value = underworld_mario[i];
  401786:	f04f 0901 	mov.w	r9, #1
  40178a:	e006      	b.n	40179a <create_songs+0x14a>
  40178c:	f241 23c8 	movw	r3, #4808	; 0x12c8
  401790:	4a20      	ldr	r2, [pc, #128]	; (401814 <create_songs+0x1c4>)
  401792:	50d7      	str	r7, [r2, r3]
  401794:	e7d6      	b.n	401744 <create_songs+0xf4>
	for (int i = 0; i < sizeof(underworld_mario) / sizeof(int); i++) {
  401796:	4596      	cmp	lr, r2
  401798:	d015      	beq.n	4017c6 <create_songs+0x176>
		underworld_mario_song.music[i] = underworld_mario[i];
  40179a:	f852 3f04 	ldr.w	r3, [r2, #4]!
  40179e:	f845 3f04 	str.w	r3, [r5, #4]!
		underworld_mario_song.tempo[i] = underworld_mario_tempo[i];
  4017a2:	f854 6f04 	ldr.w	r6, [r4, #4]!
  4017a6:	f840 6f04 	str.w	r6, [r0, #4]!
		if (underworld_mario_song.max_value < underworld_mario[i]) underworld_mario_song.max_value = underworld_mario[i];
  4017aa:	429f      	cmp	r7, r3
  4017ac:	da01      	bge.n	4017b2 <create_songs+0x162>
  4017ae:	461f      	mov	r7, r3
  4017b0:	46cc      	mov	ip, r9
		if (underworld_mario_song.min_value > underworld_mario[i] && underworld_mario[i] != 0) underworld_mario_song.min_value = underworld_mario[i];
  4017b2:	2b00      	cmp	r3, #0
  4017b4:	bf18      	it	ne
  4017b6:	4299      	cmpne	r1, r3
  4017b8:	bfcc      	ite	gt
  4017ba:	2601      	movgt	r6, #1
  4017bc:	2600      	movle	r6, #0
  4017be:	ddea      	ble.n	401796 <create_songs+0x146>
  4017c0:	46b0      	mov	r8, r6
  4017c2:	4619      	mov	r1, r3
  4017c4:	e7e7      	b.n	401796 <create_songs+0x146>
  4017c6:	f1b8 0f00 	cmp.w	r8, #0
  4017ca:	d10d      	bne.n	4017e8 <create_songs+0x198>
  4017cc:	f1bc 0f00 	cmp.w	ip, #0
  4017d0:	d003      	beq.n	4017da <create_songs+0x18a>
  4017d2:	f241 23c8 	movw	r3, #4808	; 0x12c8
  4017d6:	4a14      	ldr	r2, [pc, #80]	; (401828 <create_songs+0x1d8>)
  4017d8:	50d7      	str	r7, [r2, r3]
	}
	underworld_mario_song.velocity = 1;
  4017da:	2000      	movs	r0, #0
  4017dc:	4914      	ldr	r1, [pc, #80]	; (401830 <create_songs+0x1e0>)
  4017de:	4b15      	ldr	r3, [pc, #84]	; (401834 <create_songs+0x1e4>)
  4017e0:	e9c3 0100 	strd	r0, r1, [r3]
  4017e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4017e8:	f241 23cc 	movw	r3, #4812	; 0x12cc
  4017ec:	4a0e      	ldr	r2, [pc, #56]	; (401828 <create_songs+0x1d8>)
  4017ee:	50d1      	str	r1, [r2, r3]
  4017f0:	e7ec      	b.n	4017cc <create_songs+0x17c>
  4017f2:	bf00      	nop
  4017f4:	f3af 8000 	nop.w
  4017f8:	33333333 	.word	0x33333333
  4017fc:	3fc33333 	.word	0x3fc33333
  401800:	20400020 	.word	0x20400020
  401804:	20402448 	.word	0x20402448
  401808:	20400154 	.word	0x20400154
  40180c:	20403708 	.word	0x20403708
  401810:	20400290 	.word	0x20400290
  401814:	20401178 	.word	0x20401178
  401818:	204005b8 	.word	0x204005b8
  40181c:	3ff80000 	.word	0x3ff80000
  401820:	20402438 	.word	0x20402438
  401824:	204008e8 	.word	0x204008e8
  401828:	20403720 	.word	0x20403720
  40182c:	204009c4 	.word	0x204009c4
  401830:	3ff00000 	.word	0x3ff00000
  401834:	204049e0 	.word	0x204049e0

00401838 <oled_draw>:
void pause();
void oled_draw(char* string, int size);
void buzz(int frequency, int length, int min, int range);
void play(Song_to_play song);

void oled_draw(char* string, int size) {
  401838:	b5f0      	push	{r4, r5, r6, r7, lr}
  40183a:	b089      	sub	sp, #36	; 0x24
	
	int space_loc;
	char up_part[14];
	char below_part[14];
	
	if (size > 26) { gfx_mono_draw_string("Error", 50, 10, &sysfont); return; }
  40183c:	291a      	cmp	r1, #26
  40183e:	dc56      	bgt.n	4018ee <oled_draw+0xb6>
		
	if ( size > 13) {
  401840:	290d      	cmp	r1, #13
  401842:	dd5b      	ble.n	4018fc <oled_draw+0xc4>
  401844:	1e44      	subs	r4, r0, #1
  401846:	4625      	mov	r5, r4
  401848:	2300      	movs	r3, #0
		
		for (int i = 0; i <= 12; i++) if (*(string + i) == ' ') space_loc = i;
  40184a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
  40184e:	2e20      	cmp	r6, #32
  401850:	bf08      	it	eq
  401852:	461a      	moveq	r2, r3
  401854:	3301      	adds	r3, #1
  401856:	2b0d      	cmp	r3, #13
  401858:	d1f7      	bne.n	40184a <oled_draw+0x12>
  40185a:	ab04      	add	r3, sp, #16
  40185c:	466e      	mov	r6, sp
  40185e:	f10d 071d 	add.w	r7, sp, #29
		
		for (int i = 0; i < 13; i++) { up_part[i] = ' '; below_part[i] = ' '; }
  401862:	2520      	movs	r5, #32
  401864:	f803 5b01 	strb.w	r5, [r3], #1
  401868:	f806 5b01 	strb.w	r5, [r6], #1
  40186c:	42bb      	cmp	r3, r7
  40186e:	d1f9      	bne.n	401864 <oled_draw+0x2c>
		up_part[13] = '\0';
  401870:	2300      	movs	r3, #0
  401872:	f88d 301d 	strb.w	r3, [sp, #29]
		below_part[13] = '\0';
  401876:	f88d 300d 	strb.w	r3, [sp, #13]
				
		int a = (14 - (size - 1 - space_loc))/2;
  40187a:	1a53      	subs	r3, r2, r1
  40187c:	330f      	adds	r3, #15
  40187e:	bf48      	it	mi
  401880:	3301      	addmi	r3, #1
  401882:	105f      	asrs	r7, r3, #1
		int b = (14 - space_loc)/2;
  401884:	f1d2 030e 	rsbs	r3, r2, #14
  401888:	bf48      	it	mi
  40188a:	3301      	addmi	r3, #1
  40188c:	105b      	asrs	r3, r3, #1
		
		for (int i = 0; i < space_loc; i++) up_part[i + b] = string[i];
  40188e:	2a00      	cmp	r2, #0
  401890:	dd09      	ble.n	4018a6 <oled_draw+0x6e>
  401892:	ad04      	add	r5, sp, #16
  401894:	442b      	add	r3, r5
  401896:	1e56      	subs	r6, r2, #1
  401898:	4406      	add	r6, r0
  40189a:	f814 5f01 	ldrb.w	r5, [r4, #1]!
  40189e:	f803 5b01 	strb.w	r5, [r3], #1
  4018a2:	42b4      	cmp	r4, r6
  4018a4:	d1f9      	bne.n	40189a <oled_draw+0x62>
		
		for (int i = 0; i < size - space_loc - 2; i++) below_part[i + a] = string[space_loc + i + 1];
  4018a6:	1a89      	subs	r1, r1, r2
  4018a8:	1e8b      	subs	r3, r1, #2
  4018aa:	2b00      	cmp	r3, #0
  4018ac:	dd0b      	ble.n	4018c6 <oled_draw+0x8e>
  4018ae:	1883      	adds	r3, r0, r2
  4018b0:	eb0d 0407 	add.w	r4, sp, r7
  4018b4:	3a02      	subs	r2, #2
  4018b6:	440a      	add	r2, r1
  4018b8:	4410      	add	r0, r2
  4018ba:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  4018be:	f804 2b01 	strb.w	r2, [r4], #1
  4018c2:	4283      	cmp	r3, r0
  4018c4:	d1f9      	bne.n	4018ba <oled_draw+0x82>
		
		gfx_mono_draw_string(up_part, 0, -2, &sysfont);
  4018c6:	4d10      	ldr	r5, [pc, #64]	; (401908 <oled_draw+0xd0>)
  4018c8:	462b      	mov	r3, r5
  4018ca:	22fe      	movs	r2, #254	; 0xfe
  4018cc:	2100      	movs	r1, #0
  4018ce:	a804      	add	r0, sp, #16
  4018d0:	4c0e      	ldr	r4, [pc, #56]	; (40190c <oled_draw+0xd4>)
  4018d2:	47a0      	blx	r4
		gfx_mono_draw_string(below_part, 0, 9, &sysfont);
  4018d4:	462b      	mov	r3, r5
  4018d6:	2209      	movs	r2, #9
  4018d8:	2100      	movs	r1, #0
  4018da:	4668      	mov	r0, sp
  4018dc:	47a0      	blx	r4
		
	} else { gfx_mono_draw_string(string, 0, 10, &sysfont); }
	
	gfx_mono_draw_string("PLAY ", 50, 20, &sysfont);
  4018de:	4b0a      	ldr	r3, [pc, #40]	; (401908 <oled_draw+0xd0>)
  4018e0:	2214      	movs	r2, #20
  4018e2:	2132      	movs	r1, #50	; 0x32
  4018e4:	480a      	ldr	r0, [pc, #40]	; (401910 <oled_draw+0xd8>)
  4018e6:	4c09      	ldr	r4, [pc, #36]	; (40190c <oled_draw+0xd4>)
  4018e8:	47a0      	blx	r4
}
  4018ea:	b009      	add	sp, #36	; 0x24
  4018ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (size > 26) { gfx_mono_draw_string("Error", 50, 10, &sysfont); return; }
  4018ee:	4b06      	ldr	r3, [pc, #24]	; (401908 <oled_draw+0xd0>)
  4018f0:	220a      	movs	r2, #10
  4018f2:	2132      	movs	r1, #50	; 0x32
  4018f4:	4807      	ldr	r0, [pc, #28]	; (401914 <oled_draw+0xdc>)
  4018f6:	4c05      	ldr	r4, [pc, #20]	; (40190c <oled_draw+0xd4>)
  4018f8:	47a0      	blx	r4
  4018fa:	e7f6      	b.n	4018ea <oled_draw+0xb2>
	} else { gfx_mono_draw_string(string, 0, 10, &sysfont); }
  4018fc:	4b02      	ldr	r3, [pc, #8]	; (401908 <oled_draw+0xd0>)
  4018fe:	220a      	movs	r2, #10
  401900:	2100      	movs	r1, #0
  401902:	4c02      	ldr	r4, [pc, #8]	; (40190c <oled_draw+0xd4>)
  401904:	47a0      	blx	r4
  401906:	e7ea      	b.n	4018de <oled_draw+0xa6>
  401908:	2040000c 	.word	0x2040000c
  40190c:	004008c5 	.word	0x004008c5
  401910:	00403784 	.word	0x00403784
  401914:	0040377c 	.word	0x0040377c

00401918 <pause>:
	pio_set(LED1_PIO, LED1_PIO_IDX_MASK);
	pio_set(LED2_PIO, LED2_PIO_IDX_MASK);
	pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
}

void pause() {
  401918:	b510      	push	{r4, lr}
	
	delay_ms(300);
  40191a:	4811      	ldr	r0, [pc, #68]	; (401960 <pause+0x48>)
  40191c:	4b11      	ldr	r3, [pc, #68]	; (401964 <pause+0x4c>)
  40191e:	4798      	blx	r3
	but_play_flag = 0;
  401920:	2200      	movs	r2, #0
  401922:	4b11      	ldr	r3, [pc, #68]	; (401968 <pause+0x50>)
  401924:	701a      	strb	r2, [r3, #0]
	gfx_mono_draw_string("PAUSE", 50, 20, &sysfont);
  401926:	4b11      	ldr	r3, [pc, #68]	; (40196c <pause+0x54>)
  401928:	2214      	movs	r2, #20
  40192a:	2132      	movs	r1, #50	; 0x32
  40192c:	4810      	ldr	r0, [pc, #64]	; (401970 <pause+0x58>)
  40192e:	4c11      	ldr	r4, [pc, #68]	; (401974 <pause+0x5c>)
  401930:	47a0      	blx	r4

	while (1) if (but_play_flag || but_prev_flag || but_next_flag) break; 
  401932:	4a0d      	ldr	r2, [pc, #52]	; (401968 <pause+0x50>)
  401934:	4910      	ldr	r1, [pc, #64]	; (401978 <pause+0x60>)
  401936:	4811      	ldr	r0, [pc, #68]	; (40197c <pause+0x64>)
  401938:	7813      	ldrb	r3, [r2, #0]
  40193a:	b923      	cbnz	r3, 401946 <pause+0x2e>
  40193c:	780b      	ldrb	r3, [r1, #0]
  40193e:	b913      	cbnz	r3, 401946 <pause+0x2e>
  401940:	7803      	ldrb	r3, [r0, #0]
  401942:	2b00      	cmp	r3, #0
  401944:	d0f8      	beq.n	401938 <pause+0x20>
	
	gfx_mono_draw_string("PLAY ", 50, 20, &sysfont);
  401946:	4b09      	ldr	r3, [pc, #36]	; (40196c <pause+0x54>)
  401948:	2214      	movs	r2, #20
  40194a:	2132      	movs	r1, #50	; 0x32
  40194c:	480c      	ldr	r0, [pc, #48]	; (401980 <pause+0x68>)
  40194e:	4c09      	ldr	r4, [pc, #36]	; (401974 <pause+0x5c>)
  401950:	47a0      	blx	r4
	delay_ms(300);
  401952:	4803      	ldr	r0, [pc, #12]	; (401960 <pause+0x48>)
  401954:	4b03      	ldr	r3, [pc, #12]	; (401964 <pause+0x4c>)
  401956:	4798      	blx	r3
	but_play_flag = 0;
  401958:	2200      	movs	r2, #0
  40195a:	4b03      	ldr	r3, [pc, #12]	; (401968 <pause+0x50>)
  40195c:	701a      	strb	r2, [r3, #0]
  40195e:	bd10      	pop	{r4, pc}
  401960:	00e7816d 	.word	0x00e7816d
  401964:	20400001 	.word	0x20400001
  401968:	20403718 	.word	0x20403718
  40196c:	2040000c 	.word	0x2040000c
  401970:	0040378c 	.word	0x0040378c
  401974:	004008c5 	.word	0x004008c5
  401978:	20401170 	.word	0x20401170
  40197c:	204049f0 	.word	0x204049f0
  401980:	00403784 	.word	0x00403784

00401984 <buzz>:
void buzz(int frequency, int length, int min, int range) {
  401984:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401988:	4605      	mov	r5, r0
  40198a:	4689      	mov	r9, r1
  40198c:	461c      	mov	r4, r3
	int delay = 1000000 / frequency;
  40198e:	4e3b      	ldr	r6, [pc, #236]	; (401a7c <buzz+0xf8>)
  401990:	fb96 f6f0 	sdiv	r6, r6, r0
	if (frequency <= min + range) pio_clear(LED1_PIO, LED1_PIO_IDX_MASK);
  401994:	eb02 0803 	add.w	r8, r2, r3
  401998:	4540      	cmp	r0, r8
  40199a:	dd07      	ble.n	4019ac <buzz+0x28>
	if (frequency > min + range && frequency <= min + 2*range) pio_clear(LED2_PIO, LED2_PIO_IDX_MASK);
  40199c:	4444      	add	r4, r8
  40199e:	42a0      	cmp	r0, r4
  4019a0:	dd2e      	ble.n	401a00 <buzz+0x7c>
	if (frequency > min + 2*range) pio_clear(LED3_PIO, LED3_PIO_IDX_MASK);
  4019a2:	2104      	movs	r1, #4
  4019a4:	4836      	ldr	r0, [pc, #216]	; (401a80 <buzz+0xfc>)
  4019a6:	4b37      	ldr	r3, [pc, #220]	; (401a84 <buzz+0x100>)
  4019a8:	4798      	blx	r3
  4019aa:	e006      	b.n	4019ba <buzz+0x36>
	if (frequency <= min + range) pio_clear(LED1_PIO, LED1_PIO_IDX_MASK);
  4019ac:	2101      	movs	r1, #1
  4019ae:	4836      	ldr	r0, [pc, #216]	; (401a88 <buzz+0x104>)
  4019b0:	4b34      	ldr	r3, [pc, #208]	; (401a84 <buzz+0x100>)
  4019b2:	4798      	blx	r3
	if (frequency > min + 2*range) pio_clear(LED3_PIO, LED3_PIO_IDX_MASK);
  4019b4:	4444      	add	r4, r8
  4019b6:	42a5      	cmp	r5, r4
  4019b8:	dcf3      	bgt.n	4019a2 <buzz+0x1e>
	for (int i = 0; i < (length * 1000)/delay; i++) {
  4019ba:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
  4019be:	fb07 f709 	mul.w	r7, r7, r9
  4019c2:	fb97 f7f6 	sdiv	r7, r7, r6
  4019c6:	2f00      	cmp	r7, #0
  4019c8:	dd4b      	ble.n	401a62 <buzz+0xde>
		delay_us(delay/2);
  4019ca:	4630      	mov	r0, r6
  4019cc:	2e00      	cmp	r6, #0
  4019ce:	bfb8      	it	lt
  4019d0:	1c70      	addlt	r0, r6, #1
  4019d2:	1040      	asrs	r0, r0, #1
  4019d4:	17c5      	asrs	r5, r0, #31
  4019d6:	4b2d      	ldr	r3, [pc, #180]	; (401a8c <buzz+0x108>)
  4019d8:	fba0 0103 	umull	r0, r1, r0, r3
  4019dc:	fb03 1105 	mla	r1, r3, r5, r1
  4019e0:	4a2b      	ldr	r2, [pc, #172]	; (401a90 <buzz+0x10c>)
  4019e2:	2300      	movs	r3, #0
  4019e4:	4c2b      	ldr	r4, [pc, #172]	; (401a94 <buzz+0x110>)
  4019e6:	2500      	movs	r5, #0
  4019e8:	1900      	adds	r0, r0, r4
  4019ea:	4169      	adcs	r1, r5
  4019ec:	4c2a      	ldr	r4, [pc, #168]	; (401a98 <buzz+0x114>)
  4019ee:	47a0      	blx	r4
  4019f0:	4681      	mov	r9, r0
  4019f2:	2400      	movs	r4, #0
		if (but_play_flag) pause();
  4019f4:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 401aac <buzz+0x128>
  4019f8:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 401ab0 <buzz+0x12c>
		pio_set(BUZZ_PIO, BUZZ_PIO_IDX_MASK);
  4019fc:	4d22      	ldr	r5, [pc, #136]	; (401a88 <buzz+0x104>)
  4019fe:	e014      	b.n	401a2a <buzz+0xa6>
	if (frequency > min + range && frequency <= min + 2*range) pio_clear(LED2_PIO, LED2_PIO_IDX_MASK);
  401a00:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401a04:	4825      	ldr	r0, [pc, #148]	; (401a9c <buzz+0x118>)
  401a06:	4b1f      	ldr	r3, [pc, #124]	; (401a84 <buzz+0x100>)
  401a08:	4798      	blx	r3
  401a0a:	e7d6      	b.n	4019ba <buzz+0x36>
		if (but_play_flag) pause();
  401a0c:	47d0      	blx	sl
  401a0e:	e010      	b.n	401a32 <buzz+0xae>
		delay_us(delay/2);
  401a10:	2033      	movs	r0, #51	; 0x33
  401a12:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 401ab4 <buzz+0x130>
  401a16:	47d8      	blx	fp
		pio_clear(BUZZ_PIO, BUZZ_PIO_IDX_MASK);
  401a18:	2108      	movs	r1, #8
  401a1a:	4628      	mov	r0, r5
  401a1c:	4b19      	ldr	r3, [pc, #100]	; (401a84 <buzz+0x100>)
  401a1e:	4798      	blx	r3
		delay_us(delay/2);
  401a20:	2033      	movs	r0, #51	; 0x33
  401a22:	47d8      	blx	fp
	for (int i = 0; i < (length * 1000)/delay; i++) {
  401a24:	3401      	adds	r4, #1
  401a26:	42bc      	cmp	r4, r7
  401a28:	d01b      	beq.n	401a62 <buzz+0xde>
		if (but_play_flag) pause();
  401a2a:	f898 3000 	ldrb.w	r3, [r8]
  401a2e:	2b00      	cmp	r3, #0
  401a30:	d1ec      	bne.n	401a0c <buzz+0x88>
		if (but_next_flag || but_prev_flag) break;
  401a32:	4b1b      	ldr	r3, [pc, #108]	; (401aa0 <buzz+0x11c>)
  401a34:	781b      	ldrb	r3, [r3, #0]
  401a36:	b9a3      	cbnz	r3, 401a62 <buzz+0xde>
  401a38:	4b1a      	ldr	r3, [pc, #104]	; (401aa4 <buzz+0x120>)
  401a3a:	781b      	ldrb	r3, [r3, #0]
  401a3c:	b98b      	cbnz	r3, 401a62 <buzz+0xde>
		pio_set(BUZZ_PIO, BUZZ_PIO_IDX_MASK);
  401a3e:	2108      	movs	r1, #8
  401a40:	4628      	mov	r0, r5
  401a42:	4b19      	ldr	r3, [pc, #100]	; (401aa8 <buzz+0x124>)
  401a44:	4798      	blx	r3
		delay_us(delay/2);
  401a46:	1c73      	adds	r3, r6, #1
  401a48:	2b02      	cmp	r3, #2
  401a4a:	d9e1      	bls.n	401a10 <buzz+0x8c>
  401a4c:	4648      	mov	r0, r9
  401a4e:	f8df b064 	ldr.w	fp, [pc, #100]	; 401ab4 <buzz+0x130>
  401a52:	47d8      	blx	fp
		pio_clear(BUZZ_PIO, BUZZ_PIO_IDX_MASK);
  401a54:	2108      	movs	r1, #8
  401a56:	4628      	mov	r0, r5
  401a58:	4b0a      	ldr	r3, [pc, #40]	; (401a84 <buzz+0x100>)
  401a5a:	4798      	blx	r3
		delay_us(delay/2);
  401a5c:	4648      	mov	r0, r9
  401a5e:	47d8      	blx	fp
  401a60:	e7e0      	b.n	401a24 <buzz+0xa0>
	pio_set(LED1_PIO, LED1_PIO_IDX_MASK);
  401a62:	2101      	movs	r1, #1
  401a64:	4808      	ldr	r0, [pc, #32]	; (401a88 <buzz+0x104>)
  401a66:	4c10      	ldr	r4, [pc, #64]	; (401aa8 <buzz+0x124>)
  401a68:	47a0      	blx	r4
	pio_set(LED2_PIO, LED2_PIO_IDX_MASK);
  401a6a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401a6e:	480b      	ldr	r0, [pc, #44]	; (401a9c <buzz+0x118>)
  401a70:	47a0      	blx	r4
	pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
  401a72:	2104      	movs	r1, #4
  401a74:	4802      	ldr	r0, [pc, #8]	; (401a80 <buzz+0xfc>)
  401a76:	47a0      	blx	r4
}
  401a78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401a7c:	000f4240 	.word	0x000f4240
  401a80:	400e1000 	.word	0x400e1000
  401a84:	00400cf1 	.word	0x00400cf1
  401a88:	400e0e00 	.word	0x400e0e00
  401a8c:	11e1a300 	.word	0x11e1a300
  401a90:	005a83e0 	.word	0x005a83e0
  401a94:	005a83df 	.word	0x005a83df
  401a98:	004026a5 	.word	0x004026a5
  401a9c:	400e1200 	.word	0x400e1200
  401aa0:	204049f0 	.word	0x204049f0
  401aa4:	20401170 	.word	0x20401170
  401aa8:	00400ced 	.word	0x00400ced
  401aac:	20403718 	.word	0x20403718
  401ab0:	00401919 	.word	0x00401919
  401ab4:	20400001 	.word	0x20400001

00401ab8 <play>:
}

void play(Song_to_play song) {
  401ab8:	b084      	sub	sp, #16
  401aba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401abe:	b083      	sub	sp, #12
  401ac0:	ac0c      	add	r4, sp, #48	; 0x30
  401ac2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  401ac6:	f241 23cc 	movw	r3, #4812	; 0x12cc
  401aca:	f854 a003 	ldr.w	sl, [r4, r3]
	
	int size_of_song = sizeof(song.music) / sizeof(int);
	int note_duration, range = (song.max_value - song.min_value)/3;;
  401ace:	f241 23c8 	movw	r3, #4808	; 0x12c8
  401ad2:	58e3      	ldr	r3, [r4, r3]
  401ad4:	eba3 030a 	sub.w	r3, r3, sl
  401ad8:	4a37      	ldr	r2, [pc, #220]	; (401bb8 <play+0x100>)
  401ada:	fb82 1203 	smull	r1, r2, r2, r3
  401ade:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
  401ae2:	469b      	mov	fp, r3
  401ae4:	ac0b      	add	r4, sp, #44	; 0x2c
  401ae6:	f60d 188c 	addw	r8, sp, #2444	; 0x98c
  401aea:	4645      	mov	r5, r8
			
		buzz(song.music[note], note_duration, song.min_value, range);
		
		if (but_next_flag || but_prev_flag) { delay_ms(300); break; }
		
		delay_ms(note_duration * 1.30);
  401aec:	f8df 9110 	ldr.w	r9, [pc, #272]	; 401c00 <play+0x148>
  401af0:	e015      	b.n	401b1e <play+0x66>
		if (but_play_flag) pause();
  401af2:	4b32      	ldr	r3, [pc, #200]	; (401bbc <play+0x104>)
  401af4:	4798      	blx	r3
  401af6:	e024      	b.n	401b42 <play+0x8a>
		if (but_next_flag || but_prev_flag) { delay_ms(300); break; }
  401af8:	4831      	ldr	r0, [pc, #196]	; (401bc0 <play+0x108>)
  401afa:	4b32      	ldr	r3, [pc, #200]	; (401bc4 <play+0x10c>)
  401afc:	4798      	blx	r3
	}
		
	gfx_mono_draw_string("PAUSE", 50, 20, &sysfont);
  401afe:	4b32      	ldr	r3, [pc, #200]	; (401bc8 <play+0x110>)
  401b00:	2214      	movs	r2, #20
  401b02:	2132      	movs	r1, #50	; 0x32
  401b04:	4831      	ldr	r0, [pc, #196]	; (401bcc <play+0x114>)
  401b06:	4c32      	ldr	r4, [pc, #200]	; (401bd0 <play+0x118>)
  401b08:	47a0      	blx	r4
}
  401b0a:	b003      	add	sp, #12
  401b0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401b10:	b004      	add	sp, #16
  401b12:	4770      	bx	lr
		delay_ms(note_duration * 1.30);
  401b14:	2033      	movs	r0, #51	; 0x33
  401b16:	4b2b      	ldr	r3, [pc, #172]	; (401bc4 <play+0x10c>)
  401b18:	4798      	blx	r3
	for (int note = 0; note < size_of_song; note++) {
  401b1a:	4544      	cmp	r4, r8
  401b1c:	d0ef      	beq.n	401afe <play+0x46>
		note_duration = song.tempo[note] / song.velocity;
  401b1e:	f855 0f04 	ldr.w	r0, [r5, #4]!
  401b22:	4b2c      	ldr	r3, [pc, #176]	; (401bd4 <play+0x11c>)
  401b24:	4798      	blx	r3
  401b26:	f241 23f0 	movw	r3, #4848	; 0x12f0
  401b2a:	446b      	add	r3, sp
  401b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
  401b30:	4e29      	ldr	r6, [pc, #164]	; (401bd8 <play+0x120>)
  401b32:	47b0      	blx	r6
  401b34:	4b29      	ldr	r3, [pc, #164]	; (401bdc <play+0x124>)
  401b36:	4798      	blx	r3
  401b38:	4606      	mov	r6, r0
		if (but_play_flag) pause();
  401b3a:	4b29      	ldr	r3, [pc, #164]	; (401be0 <play+0x128>)
  401b3c:	781b      	ldrb	r3, [r3, #0]
  401b3e:	2b00      	cmp	r3, #0
  401b40:	d1d7      	bne.n	401af2 <play+0x3a>
		buzz(song.music[note], note_duration, song.min_value, range);
  401b42:	465b      	mov	r3, fp
  401b44:	4652      	mov	r2, sl
  401b46:	4631      	mov	r1, r6
  401b48:	f854 0f04 	ldr.w	r0, [r4, #4]!
  401b4c:	4f25      	ldr	r7, [pc, #148]	; (401be4 <play+0x12c>)
  401b4e:	47b8      	blx	r7
		if (but_next_flag || but_prev_flag) { delay_ms(300); break; }
  401b50:	4b25      	ldr	r3, [pc, #148]	; (401be8 <play+0x130>)
  401b52:	781b      	ldrb	r3, [r3, #0]
  401b54:	2b00      	cmp	r3, #0
  401b56:	d1cf      	bne.n	401af8 <play+0x40>
  401b58:	4b24      	ldr	r3, [pc, #144]	; (401bec <play+0x134>)
  401b5a:	781b      	ldrb	r3, [r3, #0]
  401b5c:	2b00      	cmp	r3, #0
  401b5e:	d1cb      	bne.n	401af8 <play+0x40>
		delay_ms(note_duration * 1.30);
  401b60:	4630      	mov	r0, r6
  401b62:	4b1c      	ldr	r3, [pc, #112]	; (401bd4 <play+0x11c>)
  401b64:	4798      	blx	r3
  401b66:	a312      	add	r3, pc, #72	; (adr r3, 401bb0 <play+0xf8>)
  401b68:	e9d3 2300 	ldrd	r2, r3, [r3]
  401b6c:	4e20      	ldr	r6, [pc, #128]	; (401bf0 <play+0x138>)
  401b6e:	47b0      	blx	r6
  401b70:	e9cd 0100 	strd	r0, r1, [sp]
  401b74:	2200      	movs	r2, #0
  401b76:	2300      	movs	r3, #0
  401b78:	4e1e      	ldr	r6, [pc, #120]	; (401bf4 <play+0x13c>)
  401b7a:	47b0      	blx	r6
  401b7c:	2800      	cmp	r0, #0
  401b7e:	d1c9      	bne.n	401b14 <play+0x5c>
  401b80:	e9dd 0100 	ldrd	r0, r1, [sp]
  401b84:	4b1c      	ldr	r3, [pc, #112]	; (401bf8 <play+0x140>)
  401b86:	4798      	blx	r3
  401b88:	fba0 6709 	umull	r6, r7, r0, r9
  401b8c:	fb09 7701 	mla	r7, r9, r1, r7
  401b90:	f241 722c 	movw	r2, #5932	; 0x172c
  401b94:	2300      	movs	r3, #0
  401b96:	f241 702b 	movw	r0, #5931	; 0x172b
  401b9a:	2100      	movs	r1, #0
  401b9c:	1980      	adds	r0, r0, r6
  401b9e:	4179      	adcs	r1, r7
  401ba0:	4e16      	ldr	r6, [pc, #88]	; (401bfc <play+0x144>)
  401ba2:	47b0      	blx	r6
  401ba4:	4b07      	ldr	r3, [pc, #28]	; (401bc4 <play+0x10c>)
  401ba6:	4798      	blx	r3
  401ba8:	e7b7      	b.n	401b1a <play+0x62>
  401baa:	bf00      	nop
  401bac:	f3af 8000 	nop.w
  401bb0:	cccccccd 	.word	0xcccccccd
  401bb4:	3ff4cccc 	.word	0x3ff4cccc
  401bb8:	55555556 	.word	0x55555556
  401bbc:	00401919 	.word	0x00401919
  401bc0:	00e7816d 	.word	0x00e7816d
  401bc4:	20400001 	.word	0x20400001
  401bc8:	2040000c 	.word	0x2040000c
  401bcc:	0040378c 	.word	0x0040378c
  401bd0:	004008c5 	.word	0x004008c5
  401bd4:	00402055 	.word	0x00402055
  401bd8:	00402375 	.word	0x00402375
  401bdc:	00402655 	.word	0x00402655
  401be0:	20403718 	.word	0x20403718
  401be4:	00401985 	.word	0x00401985
  401be8:	204049f0 	.word	0x204049f0
  401bec:	20401170 	.word	0x20401170
  401bf0:	00402121 	.word	0x00402121
  401bf4:	004025f1 	.word	0x004025f1
  401bf8:	004026d5 	.word	0x004026d5
  401bfc:	004026a5 	.word	0x004026a5
  401c00:	11e1a300 	.word	0x11e1a300

00401c04 <main>:

#include "asf.h"
#include "aps.h"

int main(void)
{
  401c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401c08:	f5ad 5d98 	sub.w	sp, sp, #4864	; 0x1300
  401c0c:	b083      	sub	sp, #12
	init();
  401c0e:	4b55      	ldr	r3, [pc, #340]	; (401d64 <main+0x160>)
  401c10:	4798      	blx	r3
	create_songs();
  401c12:	4b55      	ldr	r3, [pc, #340]	; (401d68 <main+0x164>)
  401c14:	4798      	blx	r3
	
	int rand_song = 1;
	int start_playing = 0;
	
	but_next_flag = 0;
  401c16:	2400      	movs	r4, #0
  401c18:	4b54      	ldr	r3, [pc, #336]	; (401d6c <main+0x168>)
  401c1a:	701c      	strb	r4, [r3, #0]
	but_prev_flag = 0;
  401c1c:	4b54      	ldr	r3, [pc, #336]	; (401d70 <main+0x16c>)
  401c1e:	701c      	strb	r4, [r3, #0]
	but_play_flag = 0;
  401c20:	4b54      	ldr	r3, [pc, #336]	; (401d74 <main+0x170>)
  401c22:	701c      	strb	r4, [r3, #0]
	
	char mario_string[] = "Mario Main Theme";
  401c24:	f241 25f4 	movw	r5, #4852	; 0x12f4
  401c28:	446d      	add	r5, sp
  401c2a:	4e53      	ldr	r6, [pc, #332]	; (401d78 <main+0x174>)
  401c2c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  401c2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  401c30:	6833      	ldr	r3, [r6, #0]
  401c32:	702b      	strb	r3, [r5, #0]
	char pirates_string[] = "Pirates of the Caribbean";
  401c34:	f241 25d8 	movw	r5, #4824	; 0x12d8
  401c38:	446d      	add	r5, sp
  401c3a:	4e50      	ldr	r6, [pc, #320]	; (401d7c <main+0x178>)
  401c3c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  401c3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  401c40:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
  401c44:	c503      	stmia	r5!, {r0, r1}
  401c46:	702a      	strb	r2, [r5, #0]
	char underworld_string[] = "Underworld Mario Theme";
  401c48:	f50d 5596 	add.w	r5, sp, #4800	; 0x12c0
  401c4c:	4e4c      	ldr	r6, [pc, #304]	; (401d80 <main+0x17c>)
  401c4e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  401c50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  401c52:	e896 0003 	ldmia.w	r6, {r0, r1}
  401c56:	f845 0b04 	str.w	r0, [r5], #4
  401c5a:	f825 1b02 	strh.w	r1, [r5], #2
  401c5e:	0c09      	lsrs	r1, r1, #16
  401c60:	7029      	strb	r1, [r5, #0]
	
	gfx_mono_draw_string("CLICK BUT 2", 10, 8, &sysfont);
  401c62:	4b48      	ldr	r3, [pc, #288]	; (401d84 <main+0x180>)
  401c64:	2208      	movs	r2, #8
  401c66:	210a      	movs	r1, #10
  401c68:	4847      	ldr	r0, [pc, #284]	; (401d88 <main+0x184>)
  401c6a:	4d48      	ldr	r5, [pc, #288]	; (401d8c <main+0x188>)
  401c6c:	47a8      	blx	r5
	int start_playing = 0;
  401c6e:	4623      	mov	r3, r4
	int rand_song = 1;
  401c70:	2401      	movs	r4, #1
		
		if (but_prev_flag) {
			if (rand_song == 1) rand_song = 4;
			rand_song --;
			start_playing = 1;
			but_prev_flag = 0;
  401c72:	4d3f      	ldr	r5, [pc, #252]	; (401d70 <main+0x16c>)
			if (rand_song == 3) { oled_draw(underworld_string, sizeof(underworld_string)/sizeof(char)); play(underworld_mario_song); }
  401c74:	f8df 812c 	ldr.w	r8, [pc, #300]	; 401da4 <main+0x1a0>
  401c78:	f108 0a10 	add.w	sl, r8, #16
			if (rand_song == 2) { oled_draw(pirates_string, sizeof(pirates_string)/sizeof(char)); play(pirates_of_the_caribean_song); }
  401c7c:	4f44      	ldr	r7, [pc, #272]	; (401d90 <main+0x18c>)
  401c7e:	f107 0910 	add.w	r9, r7, #16
		}

		if (but_play_flag) {
			start_playing = 1;
			delay_ms(300);
  401c82:	4e44      	ldr	r6, [pc, #272]	; (401d94 <main+0x190>)
  401c84:	e05e      	b.n	401d44 <main+0x140>
			if (rand_song == 1) { oled_draw(mario_string, sizeof(mario_string)/sizeof(char)); play(mario_main_song); }
  401c86:	2111      	movs	r1, #17
  401c88:	f241 20f4 	movw	r0, #4852	; 0x12f4
  401c8c:	4468      	add	r0, sp
  401c8e:	4b42      	ldr	r3, [pc, #264]	; (401d98 <main+0x194>)
  401c90:	4798      	blx	r3
  401c92:	f8df b114 	ldr.w	fp, [pc, #276]	; 401da8 <main+0x1a4>
  401c96:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
  401c9a:	f10b 0110 	add.w	r1, fp, #16
  401c9e:	4668      	mov	r0, sp
  401ca0:	4b3e      	ldr	r3, [pc, #248]	; (401d9c <main+0x198>)
  401ca2:	4798      	blx	r3
  401ca4:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
  401ca8:	f8df b100 	ldr.w	fp, [pc, #256]	; 401dac <main+0x1a8>
  401cac:	47d8      	blx	fp
  401cae:	e051      	b.n	401d54 <main+0x150>
			if (rand_song == 2) { oled_draw(pirates_string, sizeof(pirates_string)/sizeof(char)); play(pirates_of_the_caribean_song); }
  401cb0:	2119      	movs	r1, #25
  401cb2:	f241 20d8 	movw	r0, #4824	; 0x12d8
  401cb6:	4468      	add	r0, sp
  401cb8:	4b37      	ldr	r3, [pc, #220]	; (401d98 <main+0x194>)
  401cba:	4798      	blx	r3
  401cbc:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
  401cc0:	4649      	mov	r1, r9
  401cc2:	4668      	mov	r0, sp
  401cc4:	4b35      	ldr	r3, [pc, #212]	; (401d9c <main+0x198>)
  401cc6:	4798      	blx	r3
  401cc8:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
  401ccc:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 401dac <main+0x1a8>
  401cd0:	47d8      	blx	fp
		if (but_next_flag) {
  401cd2:	4b26      	ldr	r3, [pc, #152]	; (401d6c <main+0x168>)
  401cd4:	781b      	ldrb	r3, [r3, #0]
  401cd6:	b9eb      	cbnz	r3, 401d14 <main+0x110>
  401cd8:	e021      	b.n	401d1e <main+0x11a>
			if (rand_song == 3) { oled_draw(underworld_string, sizeof(underworld_string)/sizeof(char)); play(underworld_mario_song); }
  401cda:	2117      	movs	r1, #23
  401cdc:	f50d 5096 	add.w	r0, sp, #4800	; 0x12c0
  401ce0:	4b2d      	ldr	r3, [pc, #180]	; (401d98 <main+0x194>)
  401ce2:	4798      	blx	r3
  401ce4:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
  401ce8:	4651      	mov	r1, sl
  401cea:	4668      	mov	r0, sp
  401cec:	4b2b      	ldr	r3, [pc, #172]	; (401d9c <main+0x198>)
  401cee:	4798      	blx	r3
  401cf0:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
  401cf4:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 401dac <main+0x1a8>
  401cf8:	47d8      	blx	fp
		if (but_next_flag) {
  401cfa:	4b1c      	ldr	r3, [pc, #112]	; (401d6c <main+0x168>)
  401cfc:	781b      	ldrb	r3, [r3, #0]
  401cfe:	2b00      	cmp	r3, #0
  401d00:	d12d      	bne.n	401d5e <main+0x15a>
		if (but_prev_flag) {
  401d02:	782b      	ldrb	r3, [r5, #0]
  401d04:	b983      	cbnz	r3, 401d28 <main+0x124>
  401d06:	e013      	b.n	401d30 <main+0x12c>
		if (but_next_flag) {
  401d08:	4a18      	ldr	r2, [pc, #96]	; (401d6c <main+0x168>)
  401d0a:	7812      	ldrb	r2, [r2, #0]
  401d0c:	b13a      	cbz	r2, 401d1e <main+0x11a>
			if (rand_song == 3) rand_song = 0;
  401d0e:	2c03      	cmp	r4, #3
  401d10:	bf08      	it	eq
  401d12:	461c      	moveq	r4, r3
			rand_song ++;
  401d14:	3401      	adds	r4, #1
			but_next_flag = 0;
  401d16:	2200      	movs	r2, #0
  401d18:	4b14      	ldr	r3, [pc, #80]	; (401d6c <main+0x168>)
  401d1a:	701a      	strb	r2, [r3, #0]
			start_playing = 1;
  401d1c:	2301      	movs	r3, #1
		if (but_prev_flag) {
  401d1e:	782a      	ldrb	r2, [r5, #0]
  401d20:	b132      	cbz	r2, 401d30 <main+0x12c>
			if (rand_song == 1) rand_song = 4;
  401d22:	2c01      	cmp	r4, #1
  401d24:	bf08      	it	eq
  401d26:	2404      	moveq	r4, #4
			rand_song --;
  401d28:	3c01      	subs	r4, #1
			but_prev_flag = 0;
  401d2a:	2300      	movs	r3, #0
  401d2c:	702b      	strb	r3, [r5, #0]
			start_playing = 1;
  401d2e:	2301      	movs	r3, #1
		if (but_play_flag) {
  401d30:	4a10      	ldr	r2, [pc, #64]	; (401d74 <main+0x170>)
  401d32:	7812      	ldrb	r2, [r2, #0]
  401d34:	b132      	cbz	r2, 401d44 <main+0x140>
			delay_ms(300);
  401d36:	4630      	mov	r0, r6
  401d38:	4b19      	ldr	r3, [pc, #100]	; (401da0 <main+0x19c>)
  401d3a:	4798      	blx	r3
			but_play_flag = 0;
  401d3c:	2200      	movs	r2, #0
  401d3e:	4b0d      	ldr	r3, [pc, #52]	; (401d74 <main+0x170>)
  401d40:	701a      	strb	r2, [r3, #0]
			start_playing = 1;
  401d42:	2301      	movs	r3, #1
		if (start_playing) {
  401d44:	2b00      	cmp	r3, #0
  401d46:	d0df      	beq.n	401d08 <main+0x104>
			if (rand_song == 1) { oled_draw(mario_string, sizeof(mario_string)/sizeof(char)); play(mario_main_song); }
  401d48:	2c01      	cmp	r4, #1
  401d4a:	d09c      	beq.n	401c86 <main+0x82>
			if (rand_song == 2) { oled_draw(pirates_string, sizeof(pirates_string)/sizeof(char)); play(pirates_of_the_caribean_song); }
  401d4c:	2c02      	cmp	r4, #2
  401d4e:	d0af      	beq.n	401cb0 <main+0xac>
			if (rand_song == 3) { oled_draw(underworld_string, sizeof(underworld_string)/sizeof(char)); play(underworld_mario_song); }
  401d50:	2c03      	cmp	r4, #3
  401d52:	d0c2      	beq.n	401cda <main+0xd6>
		if (but_next_flag) {
  401d54:	4b05      	ldr	r3, [pc, #20]	; (401d6c <main+0x168>)
  401d56:	781b      	ldrb	r3, [r3, #0]
  401d58:	2b00      	cmp	r3, #0
  401d5a:	d1db      	bne.n	401d14 <main+0x110>
  401d5c:	e7df      	b.n	401d1e <main+0x11a>
			if (rand_song == 3) rand_song = 0;
  401d5e:	2400      	movs	r4, #0
  401d60:	e7d8      	b.n	401d14 <main+0x110>
  401d62:	bf00      	nop
  401d64:	00401509 	.word	0x00401509
  401d68:	00401651 	.word	0x00401651
  401d6c:	204049f0 	.word	0x204049f0
  401d70:	20401170 	.word	0x20401170
  401d74:	20403718 	.word	0x20403718
  401d78:	00403734 	.word	0x00403734
  401d7c:	00403748 	.word	0x00403748
  401d80:	00403764 	.word	0x00403764
  401d84:	2040000c 	.word	0x2040000c
  401d88:	00403728 	.word	0x00403728
  401d8c:	004008c5 	.word	0x004008c5
  401d90:	20401178 	.word	0x20401178
  401d94:	00e7816d 	.word	0x00e7816d
  401d98:	00401839 	.word	0x00401839
  401d9c:	00402a8d 	.word	0x00402a8d
  401da0:	20400001 	.word	0x20400001
  401da4:	20403720 	.word	0x20403720
  401da8:	20402448 	.word	0x20402448
  401dac:	00401ab9 	.word	0x00401ab9

00401db0 <__aeabi_drsub>:
  401db0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  401db4:	e002      	b.n	401dbc <__adddf3>
  401db6:	bf00      	nop

00401db8 <__aeabi_dsub>:
  401db8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00401dbc <__adddf3>:
  401dbc:	b530      	push	{r4, r5, lr}
  401dbe:	ea4f 0441 	mov.w	r4, r1, lsl #1
  401dc2:	ea4f 0543 	mov.w	r5, r3, lsl #1
  401dc6:	ea94 0f05 	teq	r4, r5
  401dca:	bf08      	it	eq
  401dcc:	ea90 0f02 	teqeq	r0, r2
  401dd0:	bf1f      	itttt	ne
  401dd2:	ea54 0c00 	orrsne.w	ip, r4, r0
  401dd6:	ea55 0c02 	orrsne.w	ip, r5, r2
  401dda:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  401dde:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  401de2:	f000 80e2 	beq.w	401faa <__adddf3+0x1ee>
  401de6:	ea4f 5454 	mov.w	r4, r4, lsr #21
  401dea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  401dee:	bfb8      	it	lt
  401df0:	426d      	neglt	r5, r5
  401df2:	dd0c      	ble.n	401e0e <__adddf3+0x52>
  401df4:	442c      	add	r4, r5
  401df6:	ea80 0202 	eor.w	r2, r0, r2
  401dfa:	ea81 0303 	eor.w	r3, r1, r3
  401dfe:	ea82 0000 	eor.w	r0, r2, r0
  401e02:	ea83 0101 	eor.w	r1, r3, r1
  401e06:	ea80 0202 	eor.w	r2, r0, r2
  401e0a:	ea81 0303 	eor.w	r3, r1, r3
  401e0e:	2d36      	cmp	r5, #54	; 0x36
  401e10:	bf88      	it	hi
  401e12:	bd30      	pophi	{r4, r5, pc}
  401e14:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  401e18:	ea4f 3101 	mov.w	r1, r1, lsl #12
  401e1c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  401e20:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  401e24:	d002      	beq.n	401e2c <__adddf3+0x70>
  401e26:	4240      	negs	r0, r0
  401e28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  401e2c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  401e30:	ea4f 3303 	mov.w	r3, r3, lsl #12
  401e34:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  401e38:	d002      	beq.n	401e40 <__adddf3+0x84>
  401e3a:	4252      	negs	r2, r2
  401e3c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  401e40:	ea94 0f05 	teq	r4, r5
  401e44:	f000 80a7 	beq.w	401f96 <__adddf3+0x1da>
  401e48:	f1a4 0401 	sub.w	r4, r4, #1
  401e4c:	f1d5 0e20 	rsbs	lr, r5, #32
  401e50:	db0d      	blt.n	401e6e <__adddf3+0xb2>
  401e52:	fa02 fc0e 	lsl.w	ip, r2, lr
  401e56:	fa22 f205 	lsr.w	r2, r2, r5
  401e5a:	1880      	adds	r0, r0, r2
  401e5c:	f141 0100 	adc.w	r1, r1, #0
  401e60:	fa03 f20e 	lsl.w	r2, r3, lr
  401e64:	1880      	adds	r0, r0, r2
  401e66:	fa43 f305 	asr.w	r3, r3, r5
  401e6a:	4159      	adcs	r1, r3
  401e6c:	e00e      	b.n	401e8c <__adddf3+0xd0>
  401e6e:	f1a5 0520 	sub.w	r5, r5, #32
  401e72:	f10e 0e20 	add.w	lr, lr, #32
  401e76:	2a01      	cmp	r2, #1
  401e78:	fa03 fc0e 	lsl.w	ip, r3, lr
  401e7c:	bf28      	it	cs
  401e7e:	f04c 0c02 	orrcs.w	ip, ip, #2
  401e82:	fa43 f305 	asr.w	r3, r3, r5
  401e86:	18c0      	adds	r0, r0, r3
  401e88:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  401e8c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401e90:	d507      	bpl.n	401ea2 <__adddf3+0xe6>
  401e92:	f04f 0e00 	mov.w	lr, #0
  401e96:	f1dc 0c00 	rsbs	ip, ip, #0
  401e9a:	eb7e 0000 	sbcs.w	r0, lr, r0
  401e9e:	eb6e 0101 	sbc.w	r1, lr, r1
  401ea2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  401ea6:	d31b      	bcc.n	401ee0 <__adddf3+0x124>
  401ea8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  401eac:	d30c      	bcc.n	401ec8 <__adddf3+0x10c>
  401eae:	0849      	lsrs	r1, r1, #1
  401eb0:	ea5f 0030 	movs.w	r0, r0, rrx
  401eb4:	ea4f 0c3c 	mov.w	ip, ip, rrx
  401eb8:	f104 0401 	add.w	r4, r4, #1
  401ebc:	ea4f 5244 	mov.w	r2, r4, lsl #21
  401ec0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  401ec4:	f080 809a 	bcs.w	401ffc <__adddf3+0x240>
  401ec8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  401ecc:	bf08      	it	eq
  401ece:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  401ed2:	f150 0000 	adcs.w	r0, r0, #0
  401ed6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  401eda:	ea41 0105 	orr.w	r1, r1, r5
  401ede:	bd30      	pop	{r4, r5, pc}
  401ee0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  401ee4:	4140      	adcs	r0, r0
  401ee6:	eb41 0101 	adc.w	r1, r1, r1
  401eea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401eee:	f1a4 0401 	sub.w	r4, r4, #1
  401ef2:	d1e9      	bne.n	401ec8 <__adddf3+0x10c>
  401ef4:	f091 0f00 	teq	r1, #0
  401ef8:	bf04      	itt	eq
  401efa:	4601      	moveq	r1, r0
  401efc:	2000      	moveq	r0, #0
  401efe:	fab1 f381 	clz	r3, r1
  401f02:	bf08      	it	eq
  401f04:	3320      	addeq	r3, #32
  401f06:	f1a3 030b 	sub.w	r3, r3, #11
  401f0a:	f1b3 0220 	subs.w	r2, r3, #32
  401f0e:	da0c      	bge.n	401f2a <__adddf3+0x16e>
  401f10:	320c      	adds	r2, #12
  401f12:	dd08      	ble.n	401f26 <__adddf3+0x16a>
  401f14:	f102 0c14 	add.w	ip, r2, #20
  401f18:	f1c2 020c 	rsb	r2, r2, #12
  401f1c:	fa01 f00c 	lsl.w	r0, r1, ip
  401f20:	fa21 f102 	lsr.w	r1, r1, r2
  401f24:	e00c      	b.n	401f40 <__adddf3+0x184>
  401f26:	f102 0214 	add.w	r2, r2, #20
  401f2a:	bfd8      	it	le
  401f2c:	f1c2 0c20 	rsble	ip, r2, #32
  401f30:	fa01 f102 	lsl.w	r1, r1, r2
  401f34:	fa20 fc0c 	lsr.w	ip, r0, ip
  401f38:	bfdc      	itt	le
  401f3a:	ea41 010c 	orrle.w	r1, r1, ip
  401f3e:	4090      	lslle	r0, r2
  401f40:	1ae4      	subs	r4, r4, r3
  401f42:	bfa2      	ittt	ge
  401f44:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  401f48:	4329      	orrge	r1, r5
  401f4a:	bd30      	popge	{r4, r5, pc}
  401f4c:	ea6f 0404 	mvn.w	r4, r4
  401f50:	3c1f      	subs	r4, #31
  401f52:	da1c      	bge.n	401f8e <__adddf3+0x1d2>
  401f54:	340c      	adds	r4, #12
  401f56:	dc0e      	bgt.n	401f76 <__adddf3+0x1ba>
  401f58:	f104 0414 	add.w	r4, r4, #20
  401f5c:	f1c4 0220 	rsb	r2, r4, #32
  401f60:	fa20 f004 	lsr.w	r0, r0, r4
  401f64:	fa01 f302 	lsl.w	r3, r1, r2
  401f68:	ea40 0003 	orr.w	r0, r0, r3
  401f6c:	fa21 f304 	lsr.w	r3, r1, r4
  401f70:	ea45 0103 	orr.w	r1, r5, r3
  401f74:	bd30      	pop	{r4, r5, pc}
  401f76:	f1c4 040c 	rsb	r4, r4, #12
  401f7a:	f1c4 0220 	rsb	r2, r4, #32
  401f7e:	fa20 f002 	lsr.w	r0, r0, r2
  401f82:	fa01 f304 	lsl.w	r3, r1, r4
  401f86:	ea40 0003 	orr.w	r0, r0, r3
  401f8a:	4629      	mov	r1, r5
  401f8c:	bd30      	pop	{r4, r5, pc}
  401f8e:	fa21 f004 	lsr.w	r0, r1, r4
  401f92:	4629      	mov	r1, r5
  401f94:	bd30      	pop	{r4, r5, pc}
  401f96:	f094 0f00 	teq	r4, #0
  401f9a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  401f9e:	bf06      	itte	eq
  401fa0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  401fa4:	3401      	addeq	r4, #1
  401fa6:	3d01      	subne	r5, #1
  401fa8:	e74e      	b.n	401e48 <__adddf3+0x8c>
  401faa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  401fae:	bf18      	it	ne
  401fb0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  401fb4:	d029      	beq.n	40200a <__adddf3+0x24e>
  401fb6:	ea94 0f05 	teq	r4, r5
  401fba:	bf08      	it	eq
  401fbc:	ea90 0f02 	teqeq	r0, r2
  401fc0:	d005      	beq.n	401fce <__adddf3+0x212>
  401fc2:	ea54 0c00 	orrs.w	ip, r4, r0
  401fc6:	bf04      	itt	eq
  401fc8:	4619      	moveq	r1, r3
  401fca:	4610      	moveq	r0, r2
  401fcc:	bd30      	pop	{r4, r5, pc}
  401fce:	ea91 0f03 	teq	r1, r3
  401fd2:	bf1e      	ittt	ne
  401fd4:	2100      	movne	r1, #0
  401fd6:	2000      	movne	r0, #0
  401fd8:	bd30      	popne	{r4, r5, pc}
  401fda:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  401fde:	d105      	bne.n	401fec <__adddf3+0x230>
  401fe0:	0040      	lsls	r0, r0, #1
  401fe2:	4149      	adcs	r1, r1
  401fe4:	bf28      	it	cs
  401fe6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  401fea:	bd30      	pop	{r4, r5, pc}
  401fec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  401ff0:	bf3c      	itt	cc
  401ff2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  401ff6:	bd30      	popcc	{r4, r5, pc}
  401ff8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401ffc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  402000:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402004:	f04f 0000 	mov.w	r0, #0
  402008:	bd30      	pop	{r4, r5, pc}
  40200a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40200e:	bf1a      	itte	ne
  402010:	4619      	movne	r1, r3
  402012:	4610      	movne	r0, r2
  402014:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  402018:	bf1c      	itt	ne
  40201a:	460b      	movne	r3, r1
  40201c:	4602      	movne	r2, r0
  40201e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  402022:	bf06      	itte	eq
  402024:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  402028:	ea91 0f03 	teqeq	r1, r3
  40202c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  402030:	bd30      	pop	{r4, r5, pc}
  402032:	bf00      	nop

00402034 <__aeabi_ui2d>:
  402034:	f090 0f00 	teq	r0, #0
  402038:	bf04      	itt	eq
  40203a:	2100      	moveq	r1, #0
  40203c:	4770      	bxeq	lr
  40203e:	b530      	push	{r4, r5, lr}
  402040:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402044:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402048:	f04f 0500 	mov.w	r5, #0
  40204c:	f04f 0100 	mov.w	r1, #0
  402050:	e750      	b.n	401ef4 <__adddf3+0x138>
  402052:	bf00      	nop

00402054 <__aeabi_i2d>:
  402054:	f090 0f00 	teq	r0, #0
  402058:	bf04      	itt	eq
  40205a:	2100      	moveq	r1, #0
  40205c:	4770      	bxeq	lr
  40205e:	b530      	push	{r4, r5, lr}
  402060:	f44f 6480 	mov.w	r4, #1024	; 0x400
  402064:	f104 0432 	add.w	r4, r4, #50	; 0x32
  402068:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40206c:	bf48      	it	mi
  40206e:	4240      	negmi	r0, r0
  402070:	f04f 0100 	mov.w	r1, #0
  402074:	e73e      	b.n	401ef4 <__adddf3+0x138>
  402076:	bf00      	nop

00402078 <__aeabi_f2d>:
  402078:	0042      	lsls	r2, r0, #1
  40207a:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40207e:	ea4f 0131 	mov.w	r1, r1, rrx
  402082:	ea4f 7002 	mov.w	r0, r2, lsl #28
  402086:	bf1f      	itttt	ne
  402088:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40208c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  402090:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  402094:	4770      	bxne	lr
  402096:	f092 0f00 	teq	r2, #0
  40209a:	bf14      	ite	ne
  40209c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4020a0:	4770      	bxeq	lr
  4020a2:	b530      	push	{r4, r5, lr}
  4020a4:	f44f 7460 	mov.w	r4, #896	; 0x380
  4020a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4020ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4020b0:	e720      	b.n	401ef4 <__adddf3+0x138>
  4020b2:	bf00      	nop

004020b4 <__aeabi_ul2d>:
  4020b4:	ea50 0201 	orrs.w	r2, r0, r1
  4020b8:	bf08      	it	eq
  4020ba:	4770      	bxeq	lr
  4020bc:	b530      	push	{r4, r5, lr}
  4020be:	f04f 0500 	mov.w	r5, #0
  4020c2:	e00a      	b.n	4020da <__aeabi_l2d+0x16>

004020c4 <__aeabi_l2d>:
  4020c4:	ea50 0201 	orrs.w	r2, r0, r1
  4020c8:	bf08      	it	eq
  4020ca:	4770      	bxeq	lr
  4020cc:	b530      	push	{r4, r5, lr}
  4020ce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4020d2:	d502      	bpl.n	4020da <__aeabi_l2d+0x16>
  4020d4:	4240      	negs	r0, r0
  4020d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4020da:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4020de:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4020e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4020e6:	f43f aedc 	beq.w	401ea2 <__adddf3+0xe6>
  4020ea:	f04f 0203 	mov.w	r2, #3
  4020ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4020f2:	bf18      	it	ne
  4020f4:	3203      	addne	r2, #3
  4020f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4020fa:	bf18      	it	ne
  4020fc:	3203      	addne	r2, #3
  4020fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  402102:	f1c2 0320 	rsb	r3, r2, #32
  402106:	fa00 fc03 	lsl.w	ip, r0, r3
  40210a:	fa20 f002 	lsr.w	r0, r0, r2
  40210e:	fa01 fe03 	lsl.w	lr, r1, r3
  402112:	ea40 000e 	orr.w	r0, r0, lr
  402116:	fa21 f102 	lsr.w	r1, r1, r2
  40211a:	4414      	add	r4, r2
  40211c:	e6c1      	b.n	401ea2 <__adddf3+0xe6>
  40211e:	bf00      	nop

00402120 <__aeabi_dmul>:
  402120:	b570      	push	{r4, r5, r6, lr}
  402122:	f04f 0cff 	mov.w	ip, #255	; 0xff
  402126:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40212a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40212e:	bf1d      	ittte	ne
  402130:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  402134:	ea94 0f0c 	teqne	r4, ip
  402138:	ea95 0f0c 	teqne	r5, ip
  40213c:	f000 f8de 	bleq	4022fc <__aeabi_dmul+0x1dc>
  402140:	442c      	add	r4, r5
  402142:	ea81 0603 	eor.w	r6, r1, r3
  402146:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40214a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40214e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  402152:	bf18      	it	ne
  402154:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  402158:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40215c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  402160:	d038      	beq.n	4021d4 <__aeabi_dmul+0xb4>
  402162:	fba0 ce02 	umull	ip, lr, r0, r2
  402166:	f04f 0500 	mov.w	r5, #0
  40216a:	fbe1 e502 	umlal	lr, r5, r1, r2
  40216e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  402172:	fbe0 e503 	umlal	lr, r5, r0, r3
  402176:	f04f 0600 	mov.w	r6, #0
  40217a:	fbe1 5603 	umlal	r5, r6, r1, r3
  40217e:	f09c 0f00 	teq	ip, #0
  402182:	bf18      	it	ne
  402184:	f04e 0e01 	orrne.w	lr, lr, #1
  402188:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40218c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  402190:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  402194:	d204      	bcs.n	4021a0 <__aeabi_dmul+0x80>
  402196:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40219a:	416d      	adcs	r5, r5
  40219c:	eb46 0606 	adc.w	r6, r6, r6
  4021a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4021a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4021a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4021ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4021b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4021b4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4021b8:	bf88      	it	hi
  4021ba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4021be:	d81e      	bhi.n	4021fe <__aeabi_dmul+0xde>
  4021c0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4021c4:	bf08      	it	eq
  4021c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4021ca:	f150 0000 	adcs.w	r0, r0, #0
  4021ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4021d2:	bd70      	pop	{r4, r5, r6, pc}
  4021d4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4021d8:	ea46 0101 	orr.w	r1, r6, r1
  4021dc:	ea40 0002 	orr.w	r0, r0, r2
  4021e0:	ea81 0103 	eor.w	r1, r1, r3
  4021e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4021e8:	bfc2      	ittt	gt
  4021ea:	ebd4 050c 	rsbsgt	r5, r4, ip
  4021ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4021f2:	bd70      	popgt	{r4, r5, r6, pc}
  4021f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4021f8:	f04f 0e00 	mov.w	lr, #0
  4021fc:	3c01      	subs	r4, #1
  4021fe:	f300 80ab 	bgt.w	402358 <__aeabi_dmul+0x238>
  402202:	f114 0f36 	cmn.w	r4, #54	; 0x36
  402206:	bfde      	ittt	le
  402208:	2000      	movle	r0, #0
  40220a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40220e:	bd70      	pople	{r4, r5, r6, pc}
  402210:	f1c4 0400 	rsb	r4, r4, #0
  402214:	3c20      	subs	r4, #32
  402216:	da35      	bge.n	402284 <__aeabi_dmul+0x164>
  402218:	340c      	adds	r4, #12
  40221a:	dc1b      	bgt.n	402254 <__aeabi_dmul+0x134>
  40221c:	f104 0414 	add.w	r4, r4, #20
  402220:	f1c4 0520 	rsb	r5, r4, #32
  402224:	fa00 f305 	lsl.w	r3, r0, r5
  402228:	fa20 f004 	lsr.w	r0, r0, r4
  40222c:	fa01 f205 	lsl.w	r2, r1, r5
  402230:	ea40 0002 	orr.w	r0, r0, r2
  402234:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  402238:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40223c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  402240:	fa21 f604 	lsr.w	r6, r1, r4
  402244:	eb42 0106 	adc.w	r1, r2, r6
  402248:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40224c:	bf08      	it	eq
  40224e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402252:	bd70      	pop	{r4, r5, r6, pc}
  402254:	f1c4 040c 	rsb	r4, r4, #12
  402258:	f1c4 0520 	rsb	r5, r4, #32
  40225c:	fa00 f304 	lsl.w	r3, r0, r4
  402260:	fa20 f005 	lsr.w	r0, r0, r5
  402264:	fa01 f204 	lsl.w	r2, r1, r4
  402268:	ea40 0002 	orr.w	r0, r0, r2
  40226c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402270:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  402274:	f141 0100 	adc.w	r1, r1, #0
  402278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40227c:	bf08      	it	eq
  40227e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402282:	bd70      	pop	{r4, r5, r6, pc}
  402284:	f1c4 0520 	rsb	r5, r4, #32
  402288:	fa00 f205 	lsl.w	r2, r0, r5
  40228c:	ea4e 0e02 	orr.w	lr, lr, r2
  402290:	fa20 f304 	lsr.w	r3, r0, r4
  402294:	fa01 f205 	lsl.w	r2, r1, r5
  402298:	ea43 0302 	orr.w	r3, r3, r2
  40229c:	fa21 f004 	lsr.w	r0, r1, r4
  4022a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4022a4:	fa21 f204 	lsr.w	r2, r1, r4
  4022a8:	ea20 0002 	bic.w	r0, r0, r2
  4022ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4022b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4022b4:	bf08      	it	eq
  4022b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4022ba:	bd70      	pop	{r4, r5, r6, pc}
  4022bc:	f094 0f00 	teq	r4, #0
  4022c0:	d10f      	bne.n	4022e2 <__aeabi_dmul+0x1c2>
  4022c2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4022c6:	0040      	lsls	r0, r0, #1
  4022c8:	eb41 0101 	adc.w	r1, r1, r1
  4022cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4022d0:	bf08      	it	eq
  4022d2:	3c01      	subeq	r4, #1
  4022d4:	d0f7      	beq.n	4022c6 <__aeabi_dmul+0x1a6>
  4022d6:	ea41 0106 	orr.w	r1, r1, r6
  4022da:	f095 0f00 	teq	r5, #0
  4022de:	bf18      	it	ne
  4022e0:	4770      	bxne	lr
  4022e2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4022e6:	0052      	lsls	r2, r2, #1
  4022e8:	eb43 0303 	adc.w	r3, r3, r3
  4022ec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4022f0:	bf08      	it	eq
  4022f2:	3d01      	subeq	r5, #1
  4022f4:	d0f7      	beq.n	4022e6 <__aeabi_dmul+0x1c6>
  4022f6:	ea43 0306 	orr.w	r3, r3, r6
  4022fa:	4770      	bx	lr
  4022fc:	ea94 0f0c 	teq	r4, ip
  402300:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  402304:	bf18      	it	ne
  402306:	ea95 0f0c 	teqne	r5, ip
  40230a:	d00c      	beq.n	402326 <__aeabi_dmul+0x206>
  40230c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402310:	bf18      	it	ne
  402312:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402316:	d1d1      	bne.n	4022bc <__aeabi_dmul+0x19c>
  402318:	ea81 0103 	eor.w	r1, r1, r3
  40231c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  402320:	f04f 0000 	mov.w	r0, #0
  402324:	bd70      	pop	{r4, r5, r6, pc}
  402326:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40232a:	bf06      	itte	eq
  40232c:	4610      	moveq	r0, r2
  40232e:	4619      	moveq	r1, r3
  402330:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402334:	d019      	beq.n	40236a <__aeabi_dmul+0x24a>
  402336:	ea94 0f0c 	teq	r4, ip
  40233a:	d102      	bne.n	402342 <__aeabi_dmul+0x222>
  40233c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  402340:	d113      	bne.n	40236a <__aeabi_dmul+0x24a>
  402342:	ea95 0f0c 	teq	r5, ip
  402346:	d105      	bne.n	402354 <__aeabi_dmul+0x234>
  402348:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40234c:	bf1c      	itt	ne
  40234e:	4610      	movne	r0, r2
  402350:	4619      	movne	r1, r3
  402352:	d10a      	bne.n	40236a <__aeabi_dmul+0x24a>
  402354:	ea81 0103 	eor.w	r1, r1, r3
  402358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40235c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  402360:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402364:	f04f 0000 	mov.w	r0, #0
  402368:	bd70      	pop	{r4, r5, r6, pc}
  40236a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40236e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  402372:	bd70      	pop	{r4, r5, r6, pc}

00402374 <__aeabi_ddiv>:
  402374:	b570      	push	{r4, r5, r6, lr}
  402376:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40237a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40237e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  402382:	bf1d      	ittte	ne
  402384:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  402388:	ea94 0f0c 	teqne	r4, ip
  40238c:	ea95 0f0c 	teqne	r5, ip
  402390:	f000 f8a7 	bleq	4024e2 <__aeabi_ddiv+0x16e>
  402394:	eba4 0405 	sub.w	r4, r4, r5
  402398:	ea81 0e03 	eor.w	lr, r1, r3
  40239c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4023a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4023a4:	f000 8088 	beq.w	4024b8 <__aeabi_ddiv+0x144>
  4023a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4023ac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4023b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4023b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4023b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4023bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4023c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4023c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4023c8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4023cc:	429d      	cmp	r5, r3
  4023ce:	bf08      	it	eq
  4023d0:	4296      	cmpeq	r6, r2
  4023d2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4023d6:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4023da:	d202      	bcs.n	4023e2 <__aeabi_ddiv+0x6e>
  4023dc:	085b      	lsrs	r3, r3, #1
  4023de:	ea4f 0232 	mov.w	r2, r2, rrx
  4023e2:	1ab6      	subs	r6, r6, r2
  4023e4:	eb65 0503 	sbc.w	r5, r5, r3
  4023e8:	085b      	lsrs	r3, r3, #1
  4023ea:	ea4f 0232 	mov.w	r2, r2, rrx
  4023ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4023f2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4023f6:	ebb6 0e02 	subs.w	lr, r6, r2
  4023fa:	eb75 0e03 	sbcs.w	lr, r5, r3
  4023fe:	bf22      	ittt	cs
  402400:	1ab6      	subcs	r6, r6, r2
  402402:	4675      	movcs	r5, lr
  402404:	ea40 000c 	orrcs.w	r0, r0, ip
  402408:	085b      	lsrs	r3, r3, #1
  40240a:	ea4f 0232 	mov.w	r2, r2, rrx
  40240e:	ebb6 0e02 	subs.w	lr, r6, r2
  402412:	eb75 0e03 	sbcs.w	lr, r5, r3
  402416:	bf22      	ittt	cs
  402418:	1ab6      	subcs	r6, r6, r2
  40241a:	4675      	movcs	r5, lr
  40241c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  402420:	085b      	lsrs	r3, r3, #1
  402422:	ea4f 0232 	mov.w	r2, r2, rrx
  402426:	ebb6 0e02 	subs.w	lr, r6, r2
  40242a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40242e:	bf22      	ittt	cs
  402430:	1ab6      	subcs	r6, r6, r2
  402432:	4675      	movcs	r5, lr
  402434:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  402438:	085b      	lsrs	r3, r3, #1
  40243a:	ea4f 0232 	mov.w	r2, r2, rrx
  40243e:	ebb6 0e02 	subs.w	lr, r6, r2
  402442:	eb75 0e03 	sbcs.w	lr, r5, r3
  402446:	bf22      	ittt	cs
  402448:	1ab6      	subcs	r6, r6, r2
  40244a:	4675      	movcs	r5, lr
  40244c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  402450:	ea55 0e06 	orrs.w	lr, r5, r6
  402454:	d018      	beq.n	402488 <__aeabi_ddiv+0x114>
  402456:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40245a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40245e:	ea4f 1606 	mov.w	r6, r6, lsl #4
  402462:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  402466:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40246a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40246e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  402472:	d1c0      	bne.n	4023f6 <__aeabi_ddiv+0x82>
  402474:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  402478:	d10b      	bne.n	402492 <__aeabi_ddiv+0x11e>
  40247a:	ea41 0100 	orr.w	r1, r1, r0
  40247e:	f04f 0000 	mov.w	r0, #0
  402482:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  402486:	e7b6      	b.n	4023f6 <__aeabi_ddiv+0x82>
  402488:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40248c:	bf04      	itt	eq
  40248e:	4301      	orreq	r1, r0
  402490:	2000      	moveq	r0, #0
  402492:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  402496:	bf88      	it	hi
  402498:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40249c:	f63f aeaf 	bhi.w	4021fe <__aeabi_dmul+0xde>
  4024a0:	ebb5 0c03 	subs.w	ip, r5, r3
  4024a4:	bf04      	itt	eq
  4024a6:	ebb6 0c02 	subseq.w	ip, r6, r2
  4024aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4024ae:	f150 0000 	adcs.w	r0, r0, #0
  4024b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4024b6:	bd70      	pop	{r4, r5, r6, pc}
  4024b8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4024bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4024c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4024c4:	bfc2      	ittt	gt
  4024c6:	ebd4 050c 	rsbsgt	r5, r4, ip
  4024ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4024ce:	bd70      	popgt	{r4, r5, r6, pc}
  4024d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4024d4:	f04f 0e00 	mov.w	lr, #0
  4024d8:	3c01      	subs	r4, #1
  4024da:	e690      	b.n	4021fe <__aeabi_dmul+0xde>
  4024dc:	ea45 0e06 	orr.w	lr, r5, r6
  4024e0:	e68d      	b.n	4021fe <__aeabi_dmul+0xde>
  4024e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4024e6:	ea94 0f0c 	teq	r4, ip
  4024ea:	bf08      	it	eq
  4024ec:	ea95 0f0c 	teqeq	r5, ip
  4024f0:	f43f af3b 	beq.w	40236a <__aeabi_dmul+0x24a>
  4024f4:	ea94 0f0c 	teq	r4, ip
  4024f8:	d10a      	bne.n	402510 <__aeabi_ddiv+0x19c>
  4024fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4024fe:	f47f af34 	bne.w	40236a <__aeabi_dmul+0x24a>
  402502:	ea95 0f0c 	teq	r5, ip
  402506:	f47f af25 	bne.w	402354 <__aeabi_dmul+0x234>
  40250a:	4610      	mov	r0, r2
  40250c:	4619      	mov	r1, r3
  40250e:	e72c      	b.n	40236a <__aeabi_dmul+0x24a>
  402510:	ea95 0f0c 	teq	r5, ip
  402514:	d106      	bne.n	402524 <__aeabi_ddiv+0x1b0>
  402516:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40251a:	f43f aefd 	beq.w	402318 <__aeabi_dmul+0x1f8>
  40251e:	4610      	mov	r0, r2
  402520:	4619      	mov	r1, r3
  402522:	e722      	b.n	40236a <__aeabi_dmul+0x24a>
  402524:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402528:	bf18      	it	ne
  40252a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40252e:	f47f aec5 	bne.w	4022bc <__aeabi_dmul+0x19c>
  402532:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  402536:	f47f af0d 	bne.w	402354 <__aeabi_dmul+0x234>
  40253a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40253e:	f47f aeeb 	bne.w	402318 <__aeabi_dmul+0x1f8>
  402542:	e712      	b.n	40236a <__aeabi_dmul+0x24a>

00402544 <__gedf2>:
  402544:	f04f 3cff 	mov.w	ip, #4294967295
  402548:	e006      	b.n	402558 <__cmpdf2+0x4>
  40254a:	bf00      	nop

0040254c <__ledf2>:
  40254c:	f04f 0c01 	mov.w	ip, #1
  402550:	e002      	b.n	402558 <__cmpdf2+0x4>
  402552:	bf00      	nop

00402554 <__cmpdf2>:
  402554:	f04f 0c01 	mov.w	ip, #1
  402558:	f84d cd04 	str.w	ip, [sp, #-4]!
  40255c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  402560:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  402564:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  402568:	bf18      	it	ne
  40256a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40256e:	d01b      	beq.n	4025a8 <__cmpdf2+0x54>
  402570:	b001      	add	sp, #4
  402572:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  402576:	bf0c      	ite	eq
  402578:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40257c:	ea91 0f03 	teqne	r1, r3
  402580:	bf02      	ittt	eq
  402582:	ea90 0f02 	teqeq	r0, r2
  402586:	2000      	moveq	r0, #0
  402588:	4770      	bxeq	lr
  40258a:	f110 0f00 	cmn.w	r0, #0
  40258e:	ea91 0f03 	teq	r1, r3
  402592:	bf58      	it	pl
  402594:	4299      	cmppl	r1, r3
  402596:	bf08      	it	eq
  402598:	4290      	cmpeq	r0, r2
  40259a:	bf2c      	ite	cs
  40259c:	17d8      	asrcs	r0, r3, #31
  40259e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4025a2:	f040 0001 	orr.w	r0, r0, #1
  4025a6:	4770      	bx	lr
  4025a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4025ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4025b0:	d102      	bne.n	4025b8 <__cmpdf2+0x64>
  4025b2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4025b6:	d107      	bne.n	4025c8 <__cmpdf2+0x74>
  4025b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4025bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4025c0:	d1d6      	bne.n	402570 <__cmpdf2+0x1c>
  4025c2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4025c6:	d0d3      	beq.n	402570 <__cmpdf2+0x1c>
  4025c8:	f85d 0b04 	ldr.w	r0, [sp], #4
  4025cc:	4770      	bx	lr
  4025ce:	bf00      	nop

004025d0 <__aeabi_cdrcmple>:
  4025d0:	4684      	mov	ip, r0
  4025d2:	4610      	mov	r0, r2
  4025d4:	4662      	mov	r2, ip
  4025d6:	468c      	mov	ip, r1
  4025d8:	4619      	mov	r1, r3
  4025da:	4663      	mov	r3, ip
  4025dc:	e000      	b.n	4025e0 <__aeabi_cdcmpeq>
  4025de:	bf00      	nop

004025e0 <__aeabi_cdcmpeq>:
  4025e0:	b501      	push	{r0, lr}
  4025e2:	f7ff ffb7 	bl	402554 <__cmpdf2>
  4025e6:	2800      	cmp	r0, #0
  4025e8:	bf48      	it	mi
  4025ea:	f110 0f00 	cmnmi.w	r0, #0
  4025ee:	bd01      	pop	{r0, pc}

004025f0 <__aeabi_dcmpeq>:
  4025f0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4025f4:	f7ff fff4 	bl	4025e0 <__aeabi_cdcmpeq>
  4025f8:	bf0c      	ite	eq
  4025fa:	2001      	moveq	r0, #1
  4025fc:	2000      	movne	r0, #0
  4025fe:	f85d fb08 	ldr.w	pc, [sp], #8
  402602:	bf00      	nop

00402604 <__aeabi_dcmplt>:
  402604:	f84d ed08 	str.w	lr, [sp, #-8]!
  402608:	f7ff ffea 	bl	4025e0 <__aeabi_cdcmpeq>
  40260c:	bf34      	ite	cc
  40260e:	2001      	movcc	r0, #1
  402610:	2000      	movcs	r0, #0
  402612:	f85d fb08 	ldr.w	pc, [sp], #8
  402616:	bf00      	nop

00402618 <__aeabi_dcmple>:
  402618:	f84d ed08 	str.w	lr, [sp, #-8]!
  40261c:	f7ff ffe0 	bl	4025e0 <__aeabi_cdcmpeq>
  402620:	bf94      	ite	ls
  402622:	2001      	movls	r0, #1
  402624:	2000      	movhi	r0, #0
  402626:	f85d fb08 	ldr.w	pc, [sp], #8
  40262a:	bf00      	nop

0040262c <__aeabi_dcmpge>:
  40262c:	f84d ed08 	str.w	lr, [sp, #-8]!
  402630:	f7ff ffce 	bl	4025d0 <__aeabi_cdrcmple>
  402634:	bf94      	ite	ls
  402636:	2001      	movls	r0, #1
  402638:	2000      	movhi	r0, #0
  40263a:	f85d fb08 	ldr.w	pc, [sp], #8
  40263e:	bf00      	nop

00402640 <__aeabi_dcmpgt>:
  402640:	f84d ed08 	str.w	lr, [sp, #-8]!
  402644:	f7ff ffc4 	bl	4025d0 <__aeabi_cdrcmple>
  402648:	bf34      	ite	cc
  40264a:	2001      	movcc	r0, #1
  40264c:	2000      	movcs	r0, #0
  40264e:	f85d fb08 	ldr.w	pc, [sp], #8
  402652:	bf00      	nop

00402654 <__aeabi_d2iz>:
  402654:	ea4f 0241 	mov.w	r2, r1, lsl #1
  402658:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40265c:	d215      	bcs.n	40268a <__aeabi_d2iz+0x36>
  40265e:	d511      	bpl.n	402684 <__aeabi_d2iz+0x30>
  402660:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  402664:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  402668:	d912      	bls.n	402690 <__aeabi_d2iz+0x3c>
  40266a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40266e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  402672:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  402676:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40267a:	fa23 f002 	lsr.w	r0, r3, r2
  40267e:	bf18      	it	ne
  402680:	4240      	negne	r0, r0
  402682:	4770      	bx	lr
  402684:	f04f 0000 	mov.w	r0, #0
  402688:	4770      	bx	lr
  40268a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40268e:	d105      	bne.n	40269c <__aeabi_d2iz+0x48>
  402690:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  402694:	bf08      	it	eq
  402696:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40269a:	4770      	bx	lr
  40269c:	f04f 0000 	mov.w	r0, #0
  4026a0:	4770      	bx	lr
  4026a2:	bf00      	nop

004026a4 <__aeabi_uldivmod>:
  4026a4:	b953      	cbnz	r3, 4026bc <__aeabi_uldivmod+0x18>
  4026a6:	b94a      	cbnz	r2, 4026bc <__aeabi_uldivmod+0x18>
  4026a8:	2900      	cmp	r1, #0
  4026aa:	bf08      	it	eq
  4026ac:	2800      	cmpeq	r0, #0
  4026ae:	bf1c      	itt	ne
  4026b0:	f04f 31ff 	movne.w	r1, #4294967295
  4026b4:	f04f 30ff 	movne.w	r0, #4294967295
  4026b8:	f000 b99e 	b.w	4029f8 <__aeabi_idiv0>
  4026bc:	f1ad 0c08 	sub.w	ip, sp, #8
  4026c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4026c4:	f000 f82a 	bl	40271c <__udivmoddi4>
  4026c8:	f8dd e004 	ldr.w	lr, [sp, #4]
  4026cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4026d0:	b004      	add	sp, #16
  4026d2:	4770      	bx	lr

004026d4 <__aeabi_d2ulz>:
  4026d4:	b5d0      	push	{r4, r6, r7, lr}
  4026d6:	2200      	movs	r2, #0
  4026d8:	4b0e      	ldr	r3, [pc, #56]	; (402714 <__aeabi_d2ulz+0x40>)
  4026da:	4606      	mov	r6, r0
  4026dc:	460f      	mov	r7, r1
  4026de:	f7ff fd1f 	bl	402120 <__aeabi_dmul>
  4026e2:	f000 f98b 	bl	4029fc <__aeabi_d2uiz>
  4026e6:	4604      	mov	r4, r0
  4026e8:	f7ff fca4 	bl	402034 <__aeabi_ui2d>
  4026ec:	2200      	movs	r2, #0
  4026ee:	4b0a      	ldr	r3, [pc, #40]	; (402718 <__aeabi_d2ulz+0x44>)
  4026f0:	f7ff fd16 	bl	402120 <__aeabi_dmul>
  4026f4:	4602      	mov	r2, r0
  4026f6:	460b      	mov	r3, r1
  4026f8:	4630      	mov	r0, r6
  4026fa:	4639      	mov	r1, r7
  4026fc:	f7ff fb5c 	bl	401db8 <__aeabi_dsub>
  402700:	f000 f97c 	bl	4029fc <__aeabi_d2uiz>
  402704:	4623      	mov	r3, r4
  402706:	2200      	movs	r2, #0
  402708:	ea42 0200 	orr.w	r2, r2, r0
  40270c:	4610      	mov	r0, r2
  40270e:	4619      	mov	r1, r3
  402710:	bdd0      	pop	{r4, r6, r7, pc}
  402712:	bf00      	nop
  402714:	3df00000 	.word	0x3df00000
  402718:	41f00000 	.word	0x41f00000

0040271c <__udivmoddi4>:
  40271c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402720:	468c      	mov	ip, r1
  402722:	460d      	mov	r5, r1
  402724:	4604      	mov	r4, r0
  402726:	9e08      	ldr	r6, [sp, #32]
  402728:	2b00      	cmp	r3, #0
  40272a:	d151      	bne.n	4027d0 <__udivmoddi4+0xb4>
  40272c:	428a      	cmp	r2, r1
  40272e:	4617      	mov	r7, r2
  402730:	d96d      	bls.n	40280e <__udivmoddi4+0xf2>
  402732:	fab2 fe82 	clz	lr, r2
  402736:	f1be 0f00 	cmp.w	lr, #0
  40273a:	d00b      	beq.n	402754 <__udivmoddi4+0x38>
  40273c:	f1ce 0c20 	rsb	ip, lr, #32
  402740:	fa01 f50e 	lsl.w	r5, r1, lr
  402744:	fa20 fc0c 	lsr.w	ip, r0, ip
  402748:	fa02 f70e 	lsl.w	r7, r2, lr
  40274c:	ea4c 0c05 	orr.w	ip, ip, r5
  402750:	fa00 f40e 	lsl.w	r4, r0, lr
  402754:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  402758:	0c25      	lsrs	r5, r4, #16
  40275a:	fbbc f8fa 	udiv	r8, ip, sl
  40275e:	fa1f f987 	uxth.w	r9, r7
  402762:	fb0a cc18 	mls	ip, sl, r8, ip
  402766:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40276a:	fb08 f309 	mul.w	r3, r8, r9
  40276e:	42ab      	cmp	r3, r5
  402770:	d90a      	bls.n	402788 <__udivmoddi4+0x6c>
  402772:	19ed      	adds	r5, r5, r7
  402774:	f108 32ff 	add.w	r2, r8, #4294967295
  402778:	f080 8123 	bcs.w	4029c2 <__udivmoddi4+0x2a6>
  40277c:	42ab      	cmp	r3, r5
  40277e:	f240 8120 	bls.w	4029c2 <__udivmoddi4+0x2a6>
  402782:	f1a8 0802 	sub.w	r8, r8, #2
  402786:	443d      	add	r5, r7
  402788:	1aed      	subs	r5, r5, r3
  40278a:	b2a4      	uxth	r4, r4
  40278c:	fbb5 f0fa 	udiv	r0, r5, sl
  402790:	fb0a 5510 	mls	r5, sl, r0, r5
  402794:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  402798:	fb00 f909 	mul.w	r9, r0, r9
  40279c:	45a1      	cmp	r9, r4
  40279e:	d909      	bls.n	4027b4 <__udivmoddi4+0x98>
  4027a0:	19e4      	adds	r4, r4, r7
  4027a2:	f100 33ff 	add.w	r3, r0, #4294967295
  4027a6:	f080 810a 	bcs.w	4029be <__udivmoddi4+0x2a2>
  4027aa:	45a1      	cmp	r9, r4
  4027ac:	f240 8107 	bls.w	4029be <__udivmoddi4+0x2a2>
  4027b0:	3802      	subs	r0, #2
  4027b2:	443c      	add	r4, r7
  4027b4:	eba4 0409 	sub.w	r4, r4, r9
  4027b8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4027bc:	2100      	movs	r1, #0
  4027be:	2e00      	cmp	r6, #0
  4027c0:	d061      	beq.n	402886 <__udivmoddi4+0x16a>
  4027c2:	fa24 f40e 	lsr.w	r4, r4, lr
  4027c6:	2300      	movs	r3, #0
  4027c8:	6034      	str	r4, [r6, #0]
  4027ca:	6073      	str	r3, [r6, #4]
  4027cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4027d0:	428b      	cmp	r3, r1
  4027d2:	d907      	bls.n	4027e4 <__udivmoddi4+0xc8>
  4027d4:	2e00      	cmp	r6, #0
  4027d6:	d054      	beq.n	402882 <__udivmoddi4+0x166>
  4027d8:	2100      	movs	r1, #0
  4027da:	e886 0021 	stmia.w	r6, {r0, r5}
  4027de:	4608      	mov	r0, r1
  4027e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4027e4:	fab3 f183 	clz	r1, r3
  4027e8:	2900      	cmp	r1, #0
  4027ea:	f040 808e 	bne.w	40290a <__udivmoddi4+0x1ee>
  4027ee:	42ab      	cmp	r3, r5
  4027f0:	d302      	bcc.n	4027f8 <__udivmoddi4+0xdc>
  4027f2:	4282      	cmp	r2, r0
  4027f4:	f200 80fa 	bhi.w	4029ec <__udivmoddi4+0x2d0>
  4027f8:	1a84      	subs	r4, r0, r2
  4027fa:	eb65 0503 	sbc.w	r5, r5, r3
  4027fe:	2001      	movs	r0, #1
  402800:	46ac      	mov	ip, r5
  402802:	2e00      	cmp	r6, #0
  402804:	d03f      	beq.n	402886 <__udivmoddi4+0x16a>
  402806:	e886 1010 	stmia.w	r6, {r4, ip}
  40280a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40280e:	b912      	cbnz	r2, 402816 <__udivmoddi4+0xfa>
  402810:	2701      	movs	r7, #1
  402812:	fbb7 f7f2 	udiv	r7, r7, r2
  402816:	fab7 fe87 	clz	lr, r7
  40281a:	f1be 0f00 	cmp.w	lr, #0
  40281e:	d134      	bne.n	40288a <__udivmoddi4+0x16e>
  402820:	1beb      	subs	r3, r5, r7
  402822:	0c3a      	lsrs	r2, r7, #16
  402824:	fa1f fc87 	uxth.w	ip, r7
  402828:	2101      	movs	r1, #1
  40282a:	fbb3 f8f2 	udiv	r8, r3, r2
  40282e:	0c25      	lsrs	r5, r4, #16
  402830:	fb02 3318 	mls	r3, r2, r8, r3
  402834:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  402838:	fb0c f308 	mul.w	r3, ip, r8
  40283c:	42ab      	cmp	r3, r5
  40283e:	d907      	bls.n	402850 <__udivmoddi4+0x134>
  402840:	19ed      	adds	r5, r5, r7
  402842:	f108 30ff 	add.w	r0, r8, #4294967295
  402846:	d202      	bcs.n	40284e <__udivmoddi4+0x132>
  402848:	42ab      	cmp	r3, r5
  40284a:	f200 80d1 	bhi.w	4029f0 <__udivmoddi4+0x2d4>
  40284e:	4680      	mov	r8, r0
  402850:	1aed      	subs	r5, r5, r3
  402852:	b2a3      	uxth	r3, r4
  402854:	fbb5 f0f2 	udiv	r0, r5, r2
  402858:	fb02 5510 	mls	r5, r2, r0, r5
  40285c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  402860:	fb0c fc00 	mul.w	ip, ip, r0
  402864:	45a4      	cmp	ip, r4
  402866:	d907      	bls.n	402878 <__udivmoddi4+0x15c>
  402868:	19e4      	adds	r4, r4, r7
  40286a:	f100 33ff 	add.w	r3, r0, #4294967295
  40286e:	d202      	bcs.n	402876 <__udivmoddi4+0x15a>
  402870:	45a4      	cmp	ip, r4
  402872:	f200 80b8 	bhi.w	4029e6 <__udivmoddi4+0x2ca>
  402876:	4618      	mov	r0, r3
  402878:	eba4 040c 	sub.w	r4, r4, ip
  40287c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  402880:	e79d      	b.n	4027be <__udivmoddi4+0xa2>
  402882:	4631      	mov	r1, r6
  402884:	4630      	mov	r0, r6
  402886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40288a:	f1ce 0420 	rsb	r4, lr, #32
  40288e:	fa05 f30e 	lsl.w	r3, r5, lr
  402892:	fa07 f70e 	lsl.w	r7, r7, lr
  402896:	fa20 f804 	lsr.w	r8, r0, r4
  40289a:	0c3a      	lsrs	r2, r7, #16
  40289c:	fa25 f404 	lsr.w	r4, r5, r4
  4028a0:	ea48 0803 	orr.w	r8, r8, r3
  4028a4:	fbb4 f1f2 	udiv	r1, r4, r2
  4028a8:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4028ac:	fb02 4411 	mls	r4, r2, r1, r4
  4028b0:	fa1f fc87 	uxth.w	ip, r7
  4028b4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4028b8:	fb01 f30c 	mul.w	r3, r1, ip
  4028bc:	42ab      	cmp	r3, r5
  4028be:	fa00 f40e 	lsl.w	r4, r0, lr
  4028c2:	d909      	bls.n	4028d8 <__udivmoddi4+0x1bc>
  4028c4:	19ed      	adds	r5, r5, r7
  4028c6:	f101 30ff 	add.w	r0, r1, #4294967295
  4028ca:	f080 808a 	bcs.w	4029e2 <__udivmoddi4+0x2c6>
  4028ce:	42ab      	cmp	r3, r5
  4028d0:	f240 8087 	bls.w	4029e2 <__udivmoddi4+0x2c6>
  4028d4:	3902      	subs	r1, #2
  4028d6:	443d      	add	r5, r7
  4028d8:	1aeb      	subs	r3, r5, r3
  4028da:	fa1f f588 	uxth.w	r5, r8
  4028de:	fbb3 f0f2 	udiv	r0, r3, r2
  4028e2:	fb02 3310 	mls	r3, r2, r0, r3
  4028e6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4028ea:	fb00 f30c 	mul.w	r3, r0, ip
  4028ee:	42ab      	cmp	r3, r5
  4028f0:	d907      	bls.n	402902 <__udivmoddi4+0x1e6>
  4028f2:	19ed      	adds	r5, r5, r7
  4028f4:	f100 38ff 	add.w	r8, r0, #4294967295
  4028f8:	d26f      	bcs.n	4029da <__udivmoddi4+0x2be>
  4028fa:	42ab      	cmp	r3, r5
  4028fc:	d96d      	bls.n	4029da <__udivmoddi4+0x2be>
  4028fe:	3802      	subs	r0, #2
  402900:	443d      	add	r5, r7
  402902:	1aeb      	subs	r3, r5, r3
  402904:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  402908:	e78f      	b.n	40282a <__udivmoddi4+0x10e>
  40290a:	f1c1 0720 	rsb	r7, r1, #32
  40290e:	fa22 f807 	lsr.w	r8, r2, r7
  402912:	408b      	lsls	r3, r1
  402914:	fa05 f401 	lsl.w	r4, r5, r1
  402918:	ea48 0303 	orr.w	r3, r8, r3
  40291c:	fa20 fe07 	lsr.w	lr, r0, r7
  402920:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  402924:	40fd      	lsrs	r5, r7
  402926:	ea4e 0e04 	orr.w	lr, lr, r4
  40292a:	fbb5 f9fc 	udiv	r9, r5, ip
  40292e:	ea4f 441e 	mov.w	r4, lr, lsr #16
  402932:	fb0c 5519 	mls	r5, ip, r9, r5
  402936:	fa1f f883 	uxth.w	r8, r3
  40293a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40293e:	fb09 f408 	mul.w	r4, r9, r8
  402942:	42ac      	cmp	r4, r5
  402944:	fa02 f201 	lsl.w	r2, r2, r1
  402948:	fa00 fa01 	lsl.w	sl, r0, r1
  40294c:	d908      	bls.n	402960 <__udivmoddi4+0x244>
  40294e:	18ed      	adds	r5, r5, r3
  402950:	f109 30ff 	add.w	r0, r9, #4294967295
  402954:	d243      	bcs.n	4029de <__udivmoddi4+0x2c2>
  402956:	42ac      	cmp	r4, r5
  402958:	d941      	bls.n	4029de <__udivmoddi4+0x2c2>
  40295a:	f1a9 0902 	sub.w	r9, r9, #2
  40295e:	441d      	add	r5, r3
  402960:	1b2d      	subs	r5, r5, r4
  402962:	fa1f fe8e 	uxth.w	lr, lr
  402966:	fbb5 f0fc 	udiv	r0, r5, ip
  40296a:	fb0c 5510 	mls	r5, ip, r0, r5
  40296e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  402972:	fb00 f808 	mul.w	r8, r0, r8
  402976:	45a0      	cmp	r8, r4
  402978:	d907      	bls.n	40298a <__udivmoddi4+0x26e>
  40297a:	18e4      	adds	r4, r4, r3
  40297c:	f100 35ff 	add.w	r5, r0, #4294967295
  402980:	d229      	bcs.n	4029d6 <__udivmoddi4+0x2ba>
  402982:	45a0      	cmp	r8, r4
  402984:	d927      	bls.n	4029d6 <__udivmoddi4+0x2ba>
  402986:	3802      	subs	r0, #2
  402988:	441c      	add	r4, r3
  40298a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40298e:	eba4 0408 	sub.w	r4, r4, r8
  402992:	fba0 8902 	umull	r8, r9, r0, r2
  402996:	454c      	cmp	r4, r9
  402998:	46c6      	mov	lr, r8
  40299a:	464d      	mov	r5, r9
  40299c:	d315      	bcc.n	4029ca <__udivmoddi4+0x2ae>
  40299e:	d012      	beq.n	4029c6 <__udivmoddi4+0x2aa>
  4029a0:	b156      	cbz	r6, 4029b8 <__udivmoddi4+0x29c>
  4029a2:	ebba 030e 	subs.w	r3, sl, lr
  4029a6:	eb64 0405 	sbc.w	r4, r4, r5
  4029aa:	fa04 f707 	lsl.w	r7, r4, r7
  4029ae:	40cb      	lsrs	r3, r1
  4029b0:	431f      	orrs	r7, r3
  4029b2:	40cc      	lsrs	r4, r1
  4029b4:	6037      	str	r7, [r6, #0]
  4029b6:	6074      	str	r4, [r6, #4]
  4029b8:	2100      	movs	r1, #0
  4029ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4029be:	4618      	mov	r0, r3
  4029c0:	e6f8      	b.n	4027b4 <__udivmoddi4+0x98>
  4029c2:	4690      	mov	r8, r2
  4029c4:	e6e0      	b.n	402788 <__udivmoddi4+0x6c>
  4029c6:	45c2      	cmp	sl, r8
  4029c8:	d2ea      	bcs.n	4029a0 <__udivmoddi4+0x284>
  4029ca:	ebb8 0e02 	subs.w	lr, r8, r2
  4029ce:	eb69 0503 	sbc.w	r5, r9, r3
  4029d2:	3801      	subs	r0, #1
  4029d4:	e7e4      	b.n	4029a0 <__udivmoddi4+0x284>
  4029d6:	4628      	mov	r0, r5
  4029d8:	e7d7      	b.n	40298a <__udivmoddi4+0x26e>
  4029da:	4640      	mov	r0, r8
  4029dc:	e791      	b.n	402902 <__udivmoddi4+0x1e6>
  4029de:	4681      	mov	r9, r0
  4029e0:	e7be      	b.n	402960 <__udivmoddi4+0x244>
  4029e2:	4601      	mov	r1, r0
  4029e4:	e778      	b.n	4028d8 <__udivmoddi4+0x1bc>
  4029e6:	3802      	subs	r0, #2
  4029e8:	443c      	add	r4, r7
  4029ea:	e745      	b.n	402878 <__udivmoddi4+0x15c>
  4029ec:	4608      	mov	r0, r1
  4029ee:	e708      	b.n	402802 <__udivmoddi4+0xe6>
  4029f0:	f1a8 0802 	sub.w	r8, r8, #2
  4029f4:	443d      	add	r5, r7
  4029f6:	e72b      	b.n	402850 <__udivmoddi4+0x134>

004029f8 <__aeabi_idiv0>:
  4029f8:	4770      	bx	lr
  4029fa:	bf00      	nop

004029fc <__aeabi_d2uiz>:
  4029fc:	004a      	lsls	r2, r1, #1
  4029fe:	d211      	bcs.n	402a24 <__aeabi_d2uiz+0x28>
  402a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  402a04:	d211      	bcs.n	402a2a <__aeabi_d2uiz+0x2e>
  402a06:	d50d      	bpl.n	402a24 <__aeabi_d2uiz+0x28>
  402a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  402a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  402a10:	d40e      	bmi.n	402a30 <__aeabi_d2uiz+0x34>
  402a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  402a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  402a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  402a1e:	fa23 f002 	lsr.w	r0, r3, r2
  402a22:	4770      	bx	lr
  402a24:	f04f 0000 	mov.w	r0, #0
  402a28:	4770      	bx	lr
  402a2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  402a2e:	d102      	bne.n	402a36 <__aeabi_d2uiz+0x3a>
  402a30:	f04f 30ff 	mov.w	r0, #4294967295
  402a34:	4770      	bx	lr
  402a36:	f04f 0000 	mov.w	r0, #0
  402a3a:	4770      	bx	lr

00402a3c <__libc_init_array>:
  402a3c:	b570      	push	{r4, r5, r6, lr}
  402a3e:	4e0f      	ldr	r6, [pc, #60]	; (402a7c <__libc_init_array+0x40>)
  402a40:	4d0f      	ldr	r5, [pc, #60]	; (402a80 <__libc_init_array+0x44>)
  402a42:	1b76      	subs	r6, r6, r5
  402a44:	10b6      	asrs	r6, r6, #2
  402a46:	bf18      	it	ne
  402a48:	2400      	movne	r4, #0
  402a4a:	d005      	beq.n	402a58 <__libc_init_array+0x1c>
  402a4c:	3401      	adds	r4, #1
  402a4e:	f855 3b04 	ldr.w	r3, [r5], #4
  402a52:	4798      	blx	r3
  402a54:	42a6      	cmp	r6, r4
  402a56:	d1f9      	bne.n	402a4c <__libc_init_array+0x10>
  402a58:	4e0a      	ldr	r6, [pc, #40]	; (402a84 <__libc_init_array+0x48>)
  402a5a:	4d0b      	ldr	r5, [pc, #44]	; (402a88 <__libc_init_array+0x4c>)
  402a5c:	1b76      	subs	r6, r6, r5
  402a5e:	f000 fe9b 	bl	403798 <_init>
  402a62:	10b6      	asrs	r6, r6, #2
  402a64:	bf18      	it	ne
  402a66:	2400      	movne	r4, #0
  402a68:	d006      	beq.n	402a78 <__libc_init_array+0x3c>
  402a6a:	3401      	adds	r4, #1
  402a6c:	f855 3b04 	ldr.w	r3, [r5], #4
  402a70:	4798      	blx	r3
  402a72:	42a6      	cmp	r6, r4
  402a74:	d1f9      	bne.n	402a6a <__libc_init_array+0x2e>
  402a76:	bd70      	pop	{r4, r5, r6, pc}
  402a78:	bd70      	pop	{r4, r5, r6, pc}
  402a7a:	bf00      	nop
  402a7c:	004037a4 	.word	0x004037a4
  402a80:	004037a4 	.word	0x004037a4
  402a84:	004037ac 	.word	0x004037ac
  402a88:	004037a4 	.word	0x004037a4

00402a8c <memcpy>:
  402a8c:	4684      	mov	ip, r0
  402a8e:	ea41 0300 	orr.w	r3, r1, r0
  402a92:	f013 0303 	ands.w	r3, r3, #3
  402a96:	d16d      	bne.n	402b74 <memcpy+0xe8>
  402a98:	3a40      	subs	r2, #64	; 0x40
  402a9a:	d341      	bcc.n	402b20 <memcpy+0x94>
  402a9c:	f851 3b04 	ldr.w	r3, [r1], #4
  402aa0:	f840 3b04 	str.w	r3, [r0], #4
  402aa4:	f851 3b04 	ldr.w	r3, [r1], #4
  402aa8:	f840 3b04 	str.w	r3, [r0], #4
  402aac:	f851 3b04 	ldr.w	r3, [r1], #4
  402ab0:	f840 3b04 	str.w	r3, [r0], #4
  402ab4:	f851 3b04 	ldr.w	r3, [r1], #4
  402ab8:	f840 3b04 	str.w	r3, [r0], #4
  402abc:	f851 3b04 	ldr.w	r3, [r1], #4
  402ac0:	f840 3b04 	str.w	r3, [r0], #4
  402ac4:	f851 3b04 	ldr.w	r3, [r1], #4
  402ac8:	f840 3b04 	str.w	r3, [r0], #4
  402acc:	f851 3b04 	ldr.w	r3, [r1], #4
  402ad0:	f840 3b04 	str.w	r3, [r0], #4
  402ad4:	f851 3b04 	ldr.w	r3, [r1], #4
  402ad8:	f840 3b04 	str.w	r3, [r0], #4
  402adc:	f851 3b04 	ldr.w	r3, [r1], #4
  402ae0:	f840 3b04 	str.w	r3, [r0], #4
  402ae4:	f851 3b04 	ldr.w	r3, [r1], #4
  402ae8:	f840 3b04 	str.w	r3, [r0], #4
  402aec:	f851 3b04 	ldr.w	r3, [r1], #4
  402af0:	f840 3b04 	str.w	r3, [r0], #4
  402af4:	f851 3b04 	ldr.w	r3, [r1], #4
  402af8:	f840 3b04 	str.w	r3, [r0], #4
  402afc:	f851 3b04 	ldr.w	r3, [r1], #4
  402b00:	f840 3b04 	str.w	r3, [r0], #4
  402b04:	f851 3b04 	ldr.w	r3, [r1], #4
  402b08:	f840 3b04 	str.w	r3, [r0], #4
  402b0c:	f851 3b04 	ldr.w	r3, [r1], #4
  402b10:	f840 3b04 	str.w	r3, [r0], #4
  402b14:	f851 3b04 	ldr.w	r3, [r1], #4
  402b18:	f840 3b04 	str.w	r3, [r0], #4
  402b1c:	3a40      	subs	r2, #64	; 0x40
  402b1e:	d2bd      	bcs.n	402a9c <memcpy+0x10>
  402b20:	3230      	adds	r2, #48	; 0x30
  402b22:	d311      	bcc.n	402b48 <memcpy+0xbc>
  402b24:	f851 3b04 	ldr.w	r3, [r1], #4
  402b28:	f840 3b04 	str.w	r3, [r0], #4
  402b2c:	f851 3b04 	ldr.w	r3, [r1], #4
  402b30:	f840 3b04 	str.w	r3, [r0], #4
  402b34:	f851 3b04 	ldr.w	r3, [r1], #4
  402b38:	f840 3b04 	str.w	r3, [r0], #4
  402b3c:	f851 3b04 	ldr.w	r3, [r1], #4
  402b40:	f840 3b04 	str.w	r3, [r0], #4
  402b44:	3a10      	subs	r2, #16
  402b46:	d2ed      	bcs.n	402b24 <memcpy+0x98>
  402b48:	320c      	adds	r2, #12
  402b4a:	d305      	bcc.n	402b58 <memcpy+0xcc>
  402b4c:	f851 3b04 	ldr.w	r3, [r1], #4
  402b50:	f840 3b04 	str.w	r3, [r0], #4
  402b54:	3a04      	subs	r2, #4
  402b56:	d2f9      	bcs.n	402b4c <memcpy+0xc0>
  402b58:	3204      	adds	r2, #4
  402b5a:	d008      	beq.n	402b6e <memcpy+0xe2>
  402b5c:	07d2      	lsls	r2, r2, #31
  402b5e:	bf1c      	itt	ne
  402b60:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402b64:	f800 3b01 	strbne.w	r3, [r0], #1
  402b68:	d301      	bcc.n	402b6e <memcpy+0xe2>
  402b6a:	880b      	ldrh	r3, [r1, #0]
  402b6c:	8003      	strh	r3, [r0, #0]
  402b6e:	4660      	mov	r0, ip
  402b70:	4770      	bx	lr
  402b72:	bf00      	nop
  402b74:	2a08      	cmp	r2, #8
  402b76:	d313      	bcc.n	402ba0 <memcpy+0x114>
  402b78:	078b      	lsls	r3, r1, #30
  402b7a:	d08d      	beq.n	402a98 <memcpy+0xc>
  402b7c:	f010 0303 	ands.w	r3, r0, #3
  402b80:	d08a      	beq.n	402a98 <memcpy+0xc>
  402b82:	f1c3 0304 	rsb	r3, r3, #4
  402b86:	1ad2      	subs	r2, r2, r3
  402b88:	07db      	lsls	r3, r3, #31
  402b8a:	bf1c      	itt	ne
  402b8c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402b90:	f800 3b01 	strbne.w	r3, [r0], #1
  402b94:	d380      	bcc.n	402a98 <memcpy+0xc>
  402b96:	f831 3b02 	ldrh.w	r3, [r1], #2
  402b9a:	f820 3b02 	strh.w	r3, [r0], #2
  402b9e:	e77b      	b.n	402a98 <memcpy+0xc>
  402ba0:	3a04      	subs	r2, #4
  402ba2:	d3d9      	bcc.n	402b58 <memcpy+0xcc>
  402ba4:	3a01      	subs	r2, #1
  402ba6:	f811 3b01 	ldrb.w	r3, [r1], #1
  402baa:	f800 3b01 	strb.w	r3, [r0], #1
  402bae:	d2f9      	bcs.n	402ba4 <memcpy+0x118>
  402bb0:	780b      	ldrb	r3, [r1, #0]
  402bb2:	7003      	strb	r3, [r0, #0]
  402bb4:	784b      	ldrb	r3, [r1, #1]
  402bb6:	7043      	strb	r3, [r0, #1]
  402bb8:	788b      	ldrb	r3, [r1, #2]
  402bba:	7083      	strb	r3, [r0, #2]
  402bbc:	4660      	mov	r0, ip
  402bbe:	4770      	bx	lr

00402bc0 <register_fini>:
  402bc0:	4b02      	ldr	r3, [pc, #8]	; (402bcc <register_fini+0xc>)
  402bc2:	b113      	cbz	r3, 402bca <register_fini+0xa>
  402bc4:	4802      	ldr	r0, [pc, #8]	; (402bd0 <register_fini+0x10>)
  402bc6:	f000 b805 	b.w	402bd4 <atexit>
  402bca:	4770      	bx	lr
  402bcc:	00000000 	.word	0x00000000
  402bd0:	00402be1 	.word	0x00402be1

00402bd4 <atexit>:
  402bd4:	2300      	movs	r3, #0
  402bd6:	4601      	mov	r1, r0
  402bd8:	461a      	mov	r2, r3
  402bda:	4618      	mov	r0, r3
  402bdc:	f000 b81e 	b.w	402c1c <__register_exitproc>

00402be0 <__libc_fini_array>:
  402be0:	b538      	push	{r3, r4, r5, lr}
  402be2:	4c0a      	ldr	r4, [pc, #40]	; (402c0c <__libc_fini_array+0x2c>)
  402be4:	4d0a      	ldr	r5, [pc, #40]	; (402c10 <__libc_fini_array+0x30>)
  402be6:	1b64      	subs	r4, r4, r5
  402be8:	10a4      	asrs	r4, r4, #2
  402bea:	d00a      	beq.n	402c02 <__libc_fini_array+0x22>
  402bec:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402bf0:	3b01      	subs	r3, #1
  402bf2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  402bf6:	3c01      	subs	r4, #1
  402bf8:	f855 3904 	ldr.w	r3, [r5], #-4
  402bfc:	4798      	blx	r3
  402bfe:	2c00      	cmp	r4, #0
  402c00:	d1f9      	bne.n	402bf6 <__libc_fini_array+0x16>
  402c02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402c06:	f000 bdd1 	b.w	4037ac <_fini>
  402c0a:	bf00      	nop
  402c0c:	004037bc 	.word	0x004037bc
  402c10:	004037b8 	.word	0x004037b8

00402c14 <__retarget_lock_acquire_recursive>:
  402c14:	4770      	bx	lr
  402c16:	bf00      	nop

00402c18 <__retarget_lock_release_recursive>:
  402c18:	4770      	bx	lr
  402c1a:	bf00      	nop

00402c1c <__register_exitproc>:
  402c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402c20:	4d2c      	ldr	r5, [pc, #176]	; (402cd4 <__register_exitproc+0xb8>)
  402c22:	4606      	mov	r6, r0
  402c24:	6828      	ldr	r0, [r5, #0]
  402c26:	4698      	mov	r8, r3
  402c28:	460f      	mov	r7, r1
  402c2a:	4691      	mov	r9, r2
  402c2c:	f7ff fff2 	bl	402c14 <__retarget_lock_acquire_recursive>
  402c30:	4b29      	ldr	r3, [pc, #164]	; (402cd8 <__register_exitproc+0xbc>)
  402c32:	681c      	ldr	r4, [r3, #0]
  402c34:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  402c38:	2b00      	cmp	r3, #0
  402c3a:	d03e      	beq.n	402cba <__register_exitproc+0x9e>
  402c3c:	685a      	ldr	r2, [r3, #4]
  402c3e:	2a1f      	cmp	r2, #31
  402c40:	dc1c      	bgt.n	402c7c <__register_exitproc+0x60>
  402c42:	f102 0e01 	add.w	lr, r2, #1
  402c46:	b176      	cbz	r6, 402c66 <__register_exitproc+0x4a>
  402c48:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  402c4c:	2401      	movs	r4, #1
  402c4e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  402c52:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  402c56:	4094      	lsls	r4, r2
  402c58:	4320      	orrs	r0, r4
  402c5a:	2e02      	cmp	r6, #2
  402c5c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  402c60:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  402c64:	d023      	beq.n	402cae <__register_exitproc+0x92>
  402c66:	3202      	adds	r2, #2
  402c68:	f8c3 e004 	str.w	lr, [r3, #4]
  402c6c:	6828      	ldr	r0, [r5, #0]
  402c6e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  402c72:	f7ff ffd1 	bl	402c18 <__retarget_lock_release_recursive>
  402c76:	2000      	movs	r0, #0
  402c78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402c7c:	4b17      	ldr	r3, [pc, #92]	; (402cdc <__register_exitproc+0xc0>)
  402c7e:	b30b      	cbz	r3, 402cc4 <__register_exitproc+0xa8>
  402c80:	f44f 70c8 	mov.w	r0, #400	; 0x190
  402c84:	f3af 8000 	nop.w
  402c88:	4603      	mov	r3, r0
  402c8a:	b1d8      	cbz	r0, 402cc4 <__register_exitproc+0xa8>
  402c8c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  402c90:	6002      	str	r2, [r0, #0]
  402c92:	2100      	movs	r1, #0
  402c94:	6041      	str	r1, [r0, #4]
  402c96:	460a      	mov	r2, r1
  402c98:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  402c9c:	f04f 0e01 	mov.w	lr, #1
  402ca0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  402ca4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  402ca8:	2e00      	cmp	r6, #0
  402caa:	d0dc      	beq.n	402c66 <__register_exitproc+0x4a>
  402cac:	e7cc      	b.n	402c48 <__register_exitproc+0x2c>
  402cae:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  402cb2:	430c      	orrs	r4, r1
  402cb4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  402cb8:	e7d5      	b.n	402c66 <__register_exitproc+0x4a>
  402cba:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  402cbe:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  402cc2:	e7bb      	b.n	402c3c <__register_exitproc+0x20>
  402cc4:	6828      	ldr	r0, [r5, #0]
  402cc6:	f7ff ffa7 	bl	402c18 <__retarget_lock_release_recursive>
  402cca:	f04f 30ff 	mov.w	r0, #4294967295
  402cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402cd2:	bf00      	nop
  402cd4:	20400ed0 	.word	0x20400ed0
  402cd8:	00403794 	.word	0x00403794
  402cdc:	00000000 	.word	0x00000000

00402ce0 <sysfont_glyphs>:
	...
  402d00:	00300030 00300030 00300030 00300000     0.0.0.0.0.0...0.
  402d10:	00000030 00000000 00000000 006c006c     0...........l.l.
  402d20:	006c006c 00000000 00000000 00000000     l.l.............
	...
  402d38:	00280000 007c0028 00280028 0028007c     ..(.(.|.(.(.|.(.
  402d48:	00000028 00000000 00000000 003c0010     (.............<.
  402d58:	00200040 00080010 00780004 00000010     @. .......x.....
	...
  402d70:	007c0000 00a800a4 00280050 00940054     ..|.....P.(.T...
  402d80:	00000088 00000000 00000000 00900060     ............`...
  402d90:	00900090 00940060 00880088 00000070     ....`.......p...
	...
  402da8:	00100010 00000010 00000000 00000000     ................
	...
  402dc4:	00100008 00200020 00200020 00200020     .... . . . . . .
  402dd4:	00080010 00000000 00000000 00100020     ............ ...
  402de4:	00080008 00080008 00080008 00200010     .............. .
  402df4:	00000000 00280000 007c0010 00280010     ......(...|...(.
	...
  402e1c:	00100010 00fe0010 00100010 00000010     ................
	...
  402e44:	00300010 00000020 00000000 00000000     ..0. ...........
  402e54:	00000000 007c0000 00000000 00000000     ......|.........
	...
  402e78:	00300000 00000030 00000000 00000000     ..0.0...........
  402e88:	00080000 00100008 00200010 00400020     .......... . .@.
  402e98:	00000040 00000000 00000000 00780000     @.............x.
  402ea8:	008c0084 00a40094 008400c4 00000078     ............x...
	...
  402ec0:	00100000 00500030 00100010 00100010     ....0.P.........
  402ed0:	0000007c 00000000 00000000 00700000     |.............p.
  402ee0:	00080088 00200010 00800040 000000f8     ...... .@.......
	...
  402ef8:	00700000 00080088 00080030 00880008     ..p.....0.......
  402f08:	00000070 00000000 00000000 00080000     p...............
  402f18:	00280018 00880048 000800fc 00000008     ..(.H...........
	...
  402f30:	00780000 00800080 000800f0 00080008     ..x.............
  402f40:	000000f0 00000000 00000000 00300000     ..............0.
  402f50:	00800040 008800f0 00880088 00000070     @...........p...
	...
  402f68:	00f80000 00100008 00200010 00400020     .......... . .@.
  402f78:	00000040 00000000 00000000 00700000     @.............p.
  402f88:	00880088 00880070 00880088 00000070     ....p.......p...
	...
  402fa0:	00700000 00880088 00780088 00100008     ..p.......x.....
  402fb0:	00000060 00000000 00000000 00000000     `...............
  402fc0:	00300000 00000030 00300000 00000030     ..0.0.....0.0...
	...
  402fdc:	00300000 00000030 00300000 00600030     ..0.0.....0.0.`.
  402fec:	00000040 00000000 00000000 00100008     @...............
  402ffc:	00400020 00100020 00000008 00000000      .@. ...........
	...
  403018:	0000007c 0000007c 00000000 00000000     |...|...........
	...
  403030:	00200040 00080010 00200010 00000040     @. ....... .@...
	...
  403048:	00300000 00080048 00200010 00000000     ..0.H..... .....
  403058:	00000020 00000000 00000000 00000000      ...............
  403068:	0042003c 00aa009a 00be00aa 00780080     <.B...........x.
	...
  403080:	00100000 00280028 007c0044 00440044     ....(.(.D.|.D.D.
  403090:	00000044 00000000 00000000 00f80000     D...............
  4030a0:	00840084 008400f8 00840084 000000f8     ................
	...
  4030b8:	003c0000 00800040 00800080 00400080     ..<.@.........@.
  4030c8:	0000003c 00000000 00000000 00f00000     <...............
  4030d8:	00840088 00840084 00880084 000000f0     ................
	...
  4030f0:	00f80000 00800080 008000f0 00800080     ................
  403100:	000000f8 00000000 00000000 00f80000     ................
  403110:	00800080 008000f8 00800080 00000080     ................
	...
  403128:	003c0000 00800040 009c0080 00440084     ..<.@.........D.
  403138:	00000038 00000000 00000000 00880000     8...............
  403148:	00880088 008800f8 00880088 00000088     ................
	...
  403160:	00f80000 00200020 00200020 00200020     .... . . . . . .
  403170:	000000f8 00000000 00000000 00f80000     ................
  403180:	00080008 00080008 00080008 000000f0     ................
	...
  403198:	00840000 00900088 00d000a0 00840088     ................
  4031a8:	00000084 00000000 00000000 00800000     ................
  4031b8:	00800080 00800080 00800080 000000fc     ................
	...
  4031d0:	00840000 00cc00cc 00b400b4 00840084     ................
  4031e0:	00000084 00000000 00000000 00840000     ................
  4031f0:	00c400c4 00a400a4 00940094 0000008c     ................
	...
  403208:	00780000 00840084 00840084 00840084     ..x.............
  403218:	00000078 00000000 00000000 00f80000     x...............
  403228:	00840084 00f80084 00800080 00000080     ................
	...
  403240:	00780000 00840084 00840084 00840084     ..x.............
  403250:	00200078 00000018 00000000 00f80000     x. .............
  403260:	00840084 00f80084 00840088 00000084     ................
	...
  403278:	007c0000 00800080 00180060 00040004     ..|.....`.......
  403288:	000000f8 00000000 00000000 00f80000     ................
  403298:	00200020 00200020 00200020 00000020      . . . . . . ...
	...
  4032b0:	00840000 00840084 00840084 00840084     ................
  4032c0:	00000078 00000000 00000000 00840000     x...............
  4032d0:	00840084 00480048 00300048 00000030     ....H.H.H.0.0...
	...
  4032e8:	00880000 00a800a8 00a800a8 005000a8     ..............P.
  4032f8:	00000050 00000000 00000000 00880000     P...............
  403308:	00500088 00200020 00880050 00000088     ..P. . .P.......
	...
  403320:	00880000 00880088 00500050 00200020     ........P.P. . .
  403330:	00000020 00000000 00000000 00fc0000      ...............
  403340:	00080004 00200010 00800040 000000fc     ...... .@.......
	...
  403358:	00400070 00400040 00400040 00400040     p.@.@.@.@.@.@.@.
  403368:	00400040 00000070 00000000 00400040     @.@.p.......@.@.
  403378:	00200020 00100020 00100010 00080008      . . ...........
	...
  403390:	00080038 00080008 00080008 00080008     8...............
  4033a0:	00080008 00000038 00000000 00280010     ....8.........(.
  4033b0:	00000044 00000000 00000000 00000000     D...............
	...
  4033d8:	00000038 00000000 00000000 00200000     8............. .
  4033e8:	00000010 00000000 00000000 00000000     ................
	...
  403404:	00700000 00080008 00880078 0000007c     ..p.....x...|...
	...
  40341c:	00800080 00f80080 00840084 00840084     ................
  40342c:	000000f8 00000000 00000000 00000000     ................
  40343c:	00780000 00800080 00800080 00000078     ..x.........x...
	...
  403454:	00040004 007c0004 00840084 008c0084     ......|.........
  403464:	00000074 00000000 00000000 00000000     t...............
  403474:	00780000 00fc0084 00800080 0000007c     ..x.........|...
	...
  40348c:	0020001c 00fc0020 00200020 00200020     .. . ... . . . .
  40349c:	000000fc 00000000 00000000 00000000     ................
  4034ac:	007c0000 00840084 00840084 0004007c     ..|.........|...
  4034bc:	00000078 00000000 00800080 00b80080     x...............
  4034cc:	008400c4 00840084 00000084 00000000     ................
  4034dc:	00000000 00100000 00700000 00100010     ..........p.....
  4034ec:	00100010 0000007c 00000000 00000000     ....|...........
  4034fc:	00080000 00780000 00080008 00080008     ......x.........
  40350c:	00080008 00700008 00000000 00800080     ......p.........
  40351c:	00880080 00a00090 008800d0 00000088     ................
	...
  403534:	002000e0 00200020 00200020 00200020     .. . . . . . . .
  403544:	000000f8 00000000 00000000 00000000     ................
  403554:	00a40000 00a400fc 00a400a4 000000a4     ................
	...
  403570:	00b80000 008400c4 00840084 00000084     ................
	...
  40358c:	00780000 00840084 00840084 00000078     ..x.........x...
	...
  4035a8:	00b80000 008400c4 00840084 008000f8     ................
  4035b8:	00000080 00000000 00000000 007c0000     ..............|.
  4035c8:	00840084 00840084 0004007c 00000004     ........|.......
	...
  4035e0:	00d80000 00400060 00400040 000000f0     ....`.@.@.@.....
	...
  4035fc:	00780000 00400080 00080030 000000f0     ..x...@.0.......
	...
  403618:	00fc0020 00200020 00200020 0000001c      ... . . . .....
	...
  403634:	00880000 00880088 00880088 0000007c     ............|...
	...
  403650:	00840000 00840084 00480048 00000030     ........H.H.0...
	...
  40366c:	00880000 00a800a8 00a800a8 00000050     ............P...
	...
  403688:	00880000 00200050 00500020 00000088     ....P. . .P.....
	...
  4036a4:	00840000 00480084 00300048 00200010     ......H.H.0... .
  4036b4:	00000040 00000000 00000000 00f80000     @...............
  4036c4:	00100008 00400020 000000f8 00000000     .... .@.........
  4036d4:	00000000 00200010 00100020 00200020     ...... . ... . .
  4036e4:	00200010 00100020 00000000 00000000     .. . ...........
  4036f4:	00100010 00100010 00000000 00100010     ................
  403704:	00100010 00000000 00000000 00100020     ............ ...
  403714:	00200010 00100010 00100020 00200010     .. ..... ..... .
  403724:	00000000 43494c43 5542204b 00322054     ....CLICK BUT 2.
  403734:	6972614d 614d206f 54206e69 656d6568     Mario Main Theme
  403744:	00000000 61726950 20736574 7420666f     ....Pirates of t
  403754:	43206568 62697261 6e616562 00000000     he Caribbean....
  403764:	65646e55 726f7772 4d20646c 6f697261     Underworld Mario
  403774:	65685420 0000656d 6f727245 00000072      Theme..Error...
  403784:	59414c50 00000020 53554150 00000045     PLAY ...PAUSE...

00403794 <_global_impure_ptr>:
  403794:	20400aa8                                ..@ 

00403798 <_init>:
  403798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40379a:	bf00      	nop
  40379c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40379e:	bc08      	pop	{r3}
  4037a0:	469e      	mov	lr, r3
  4037a2:	4770      	bx	lr

004037a4 <__init_array_start>:
  4037a4:	00402bc1 	.word	0x00402bc1

004037a8 <__frame_dummy_init_array_entry>:
  4037a8:	00400165                                e.@.

004037ac <_fini>:
  4037ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4037ae:	bf00      	nop
  4037b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4037b2:	bc08      	pop	{r3}
  4037b4:	469e      	mov	lr, r3
  4037b6:	4770      	bx	lr

004037b8 <__fini_array_start>:
  4037b8:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sysfont>:
2040000c:	0000 0000 2ce0 0040 0e0a 7d20               .....,@... }

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <mario_main>:
20400020:	0a4d 0000 0a4d 0000 0000 0000 0a4d 0000     M...M.......M...
20400030:	0000 0000 082d 0000 0a4d 0000 0000 0000     ....-...M.......
20400040:	0c40 0000 0000 0000 0000 0000 0000 0000     @...............
20400050:	0620 0000 0000 0000 0000 0000 0000 0000      ...............
20400060:	082d 0000 0000 0000 0000 0000 0620 0000     -........... ...
	...
20400078:	0527 0000 0000 0000 0000 0000 06e0 0000     '...............
20400088:	0000 0000 07b8 0000 0000 0000 0749 0000     ............I...
20400098:	06e0 0000 0000 0000 0620 0000 0a4d 0000     ........ ...M...
204000a8:	0c40 0000 0dc0 0000 0000 0000 0aea 0000     @...............
204000b8:	0c40 0000 0000 0000 0a4d 0000 0000 0000     @.......M.......
204000c8:	082d 0000 092d 0000 07b8 0000 0000 0000     -...-...........
204000d8:	0000 0000 082d 0000 0000 0000 0000 0000     ....-...........
204000e8:	0620 0000 0000 0000 0000 0000 0527 0000      ...........'...
	...
20400100:	06e0 0000 0000 0000 07b8 0000 0000 0000     ................
20400110:	0749 0000 06e0 0000 0000 0000 0620 0000     I........... ...
20400120:	0a4d 0000 0c40 0000 0dc0 0000 0000 0000     M...@...........
20400130:	0aea 0000 0c40 0000 0000 0000 0a4d 0000     ....@.......M...
20400140:	0000 0000 082d 0000 092d 0000 07b8 0000     ....-...-.......
	...

20400158 <mario_main_tempo>:
20400158:	000c 0000 000c 0000 000c 0000 000c 0000     ................
20400168:	000c 0000 000c 0000 000c 0000 000c 0000     ................
20400178:	000c 0000 000c 0000 000c 0000 000c 0000     ................
20400188:	000c 0000 000c 0000 000c 0000 000c 0000     ................
20400198:	000c 0000 000c 0000 000c 0000 000c 0000     ................
204001a8:	000c 0000 000c 0000 000c 0000 000c 0000     ................
204001b8:	000c 0000 000c 0000 000c 0000 000c 0000     ................
204001c8:	000c 0000 000c 0000 000c 0000 000c 0000     ................
204001d8:	0009 0000 0009 0000 0009 0000 000c 0000     ................
204001e8:	000c 0000 000c 0000 000c 0000 000c 0000     ................
204001f8:	000c 0000 000c 0000 000c 0000 000c 0000     ................
20400208:	000c 0000 000c 0000 000c 0000 000c 0000     ................
20400218:	000c 0000 000c 0000 000c 0000 000c 0000     ................
20400228:	000c 0000 000c 0000 000c 0000 000c 0000     ................
20400238:	000c 0000 000c 0000 000c 0000 000c 0000     ................
20400248:	000c 0000 000c 0000 000c 0000 0009 0000     ................
20400258:	0009 0000 0009 0000 000c 0000 000c 0000     ................
20400268:	000c 0000 000c 0000 000c 0000 000c 0000     ................
20400278:	000c 0000 000c 0000 000c 0000 000c 0000     ................
20400288:	000c 0000 000c 0000                         ........

20400290 <pirates_of_the_caribean>:
20400290:	014a 0000 0188 0000 01b8 0000 01b8 0000     J...............
204002a0:	0000 0000 01b8 0000 01ee 0000 020b 0000     ................
204002b0:	020b 0000 0000 0000 020b 0000 024b 0000     ............K...
204002c0:	01ee 0000 01ee 0000 0000 0000 01b8 0000     ................
204002d0:	0188 0000 01b8 0000 0000 0000 014a 0000     ............J...
204002e0:	0188 0000 01b8 0000 01b8 0000 0000 0000     ................
204002f0:	01b8 0000 01ee 0000 020b 0000 020b 0000     ................
20400300:	0000 0000 020b 0000 024b 0000 01ee 0000     ........K.......
20400310:	01ee 0000 0000 0000 01b8 0000 0188 0000     ................
20400320:	01b8 0000 0000 0000 014a 0000 0188 0000     ........J.......
20400330:	01b8 0000 01b8 0000 0000 0000 01b8 0000     ................
20400340:	020b 0000 024b 0000 024b 0000 0000 0000     ....K...K.......
20400350:	024b 0000 0293 0000 02ba 0000 02ba 0000     K...............
20400360:	0000 0000 0293 0000 024b 0000 0293 0000     ........K.......
20400370:	01b8 0000 0000 0000 01b8 0000 01ee 0000     ................
20400380:	020b 0000 020b 0000 0000 0000 024b 0000     ............K...
20400390:	0293 0000 01b8 0000 0000 0000 01b8 0000     ................
204003a0:	020b 0000 01ee 0000 01ee 0000 0000 0000     ................
204003b0:	020b 0000 01b8 0000 01ee 0000 0000 0000     ................
204003c0:	01b8 0000 01b8 0000 01b8 0000 01ee 0000     ................
204003d0:	020b 0000 020b 0000 0000 0000 020b 0000     ................
204003e0:	024b 0000 01ee 0000 01ee 0000 0000 0000     K...............
204003f0:	01b8 0000 0188 0000 01b8 0000 0000 0000     ................
20400400:	014a 0000 0188 0000 01b8 0000 01b8 0000     J...............
20400410:	0000 0000 01b8 0000 01ee 0000 020b 0000     ................
20400420:	020b 0000 0000 0000 020b 0000 024b 0000     ............K...
20400430:	01ee 0000 01ee 0000 0000 0000 01b8 0000     ................
20400440:	0188 0000 01b8 0000 0000 0000 014a 0000     ............J...
20400450:	0188 0000 01b8 0000 01b8 0000 0000 0000     ................
20400460:	01b8 0000 020b 0000 024b 0000 024b 0000     ........K...K...
20400470:	0000 0000 024b 0000 0293 0000 02ba 0000     ....K...........
20400480:	02ba 0000 0000 0000 0293 0000 024b 0000     ............K...
20400490:	0293 0000 01b8 0000 0000 0000 01b8 0000     ................
204004a0:	01ee 0000 020b 0000 020b 0000 0000 0000     ................
204004b0:	024b 0000 0293 0000 01b8 0000 0000 0000     K...............
204004c0:	01b8 0000 020b 0000 01ee 0000 01ee 0000     ................
204004d0:	0000 0000 020b 0000 01b8 0000 01ee 0000     ................
204004e0:	0000 0000 0293 0000 0000 0000 0000 0000     ................
204004f0:	02ba 0000 0000 0000 0000 0000 0293 0000     ................
20400500:	0293 0000 0000 0000 0310 0000 0000 0000     ................
20400510:	0293 0000 024b 0000 0000 0000 0000 0000     ....K...........
20400520:	024b 0000 0000 0000 0000 0000 020b 0000     K...............
	...
20400538:	01ee 0000 020b 0000 0000 0000 01ee 0000     ................
20400548:	0000 0000 01b8 0000 0293 0000 0000 0000     ................
20400558:	0000 0000 02ba 0000 0000 0000 0000 0000     ................
20400568:	0293 0000 0293 0000 0000 0000 0310 0000     ................
20400578:	0000 0000 0293 0000 024b 0000 0000 0000     ........K.......
20400588:	0000 0000 024b 0000 0000 0000 0000 0000     ....K...........
20400598:	020b 0000 0000 0000 0000 0000 01ee 0000     ................
204005a8:	020b 0000 0000 0000 01ee 0000 0000 0000     ................
204005b8:	01b8 0000                                   ....

204005bc <pirates_of_the_caribean_tempo>:
204005bc:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
204005cc:	007d 0000 007d 0000 007d 0000 00fa 0000     }...}...}.......
204005dc:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
204005ec:	00fa 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
204005fc:	007d 0000 0177 0000 007d 0000 007d 0000     }...w...}...}...
2040060c:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
2040061c:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
2040062c:	007d 0000 007d 0000 007d 0000 00fa 0000     }...}...}.......
2040063c:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
2040064c:	0177 0000 007d 0000 007d 0000 007d 0000     w...}...}...}...
2040065c:	00fa 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
2040066c:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
2040067c:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
2040068c:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
2040069c:	00fa 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
204006ac:	00fa 0000 007d 0000 007d 0000 00fa 0000     ....}...}.......
204006bc:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
204006cc:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
204006dc:	007d 0000 007d 0000 0177 0000 0177 0000     }...}...w...w...
204006ec:	00fa 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
204006fc:	00fa 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
2040070c:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
2040071c:	007d 0000 007d 0000 0177 0000 007d 0000     }...}...w...}...
2040072c:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
2040073c:	007d 0000 007d 0000 007d 0000 00fa 0000     }...}...}.......
2040074c:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
2040075c:	00fa 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
2040076c:	007d 0000 0177 0000 007d 0000 007d 0000     }...w...}...}...
2040077c:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
2040078c:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
2040079c:	007d 0000 007d 0000 007d 0000 00fa 0000     }...}...}.......
204007ac:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
204007bc:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
204007cc:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
204007dc:	00fa 0000 007d 0000 00fa 0000 007d 0000     ....}.......}...
204007ec:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
204007fc:	007d 0000 007d 0000 007d 0000 0177 0000     }...}...}...w...
2040080c:	0177 0000 00fa 0000 007d 0000 0177 0000     w.......}...w...
2040081c:	00fa 0000 007d 0000 0177 0000 007d 0000     ....}...w...}...
2040082c:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
2040083c:	007d 0000 007d 0000 007d 0000 0177 0000     }...}...}...w...
2040084c:	00fa 0000 007d 0000 0177 0000 00fa 0000     ....}...w.......
2040085c:	007d 0000 0177 0000 007d 0000 007d 0000     }...w...}...}...
2040086c:	007d 0000 007d 0000 007d 0000 01f4 0000     }...}...}.......
2040087c:	00fa 0000 007d 0000 0177 0000 00fa 0000     ....}...w.......
2040088c:	007d 0000 0177 0000 007d 0000 007d 0000     }...w...}...}...
2040089c:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
204008ac:	007d 0000 007d 0000 0177 0000 00fa 0000     }...}...w.......
204008bc:	007d 0000 0177 0000 00fa 0000 007d 0000     }...w.......}...
204008cc:	0177 0000 007d 0000 007d 0000 007d 0000     w...}...}...}...
204008dc:	007d 0000 007d 0000 01f4 0000               }...}.......

204008e8 <underworld_mario>:
204008e8:	0106 0000 020b 0000 00dc 0000 01b8 0000     ................
204008f8:	00e9 0000 01d2 0000 0000 0000 0000 0000     ................
20400908:	0106 0000 020b 0000 00dc 0000 01b8 0000     ................
20400918:	00e9 0000 01d2 0000 0000 0000 0000 0000     ................
20400928:	00af 0000 015d 0000 0093 0000 0126 0000     ....].......&...
20400938:	009c 0000 0137 0000 0000 0000 0000 0000     ....7...........
20400948:	00af 0000 015d 0000 0093 0000 0126 0000     ....].......&...
20400958:	009c 0000 0137 0000 0000 0000 0000 0000     ....7...........
20400968:	0137 0000 0115 0000 0126 0000 0115 0000     7.......&.......
20400978:	0137 0000 0137 0000 00d0 0000 00c4 0000     7...7...........
20400988:	0115 0000 0106 0000 0172 0000 015d 0000     ........r...]...
20400998:	00a5 0000 01d2 0000 01b8 0000 019f 0000     ................
204009a8:	0137 0000 00f7 0000 00e9 0000 00dc 0000     7...............
204009b8:	00d0 0000 0000 0000 0000 0000 0000 0000     ................

204009c8 <underworld_mario_tempo>:
204009c8:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
204009d8:	0053 0000 0053 0000 00a6 0000 014d 0000     S...S.......M...
204009e8:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
204009f8:	0053 0000 0053 0000 00a6 0000 014d 0000     S...S.......M...
20400a08:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
20400a18:	0053 0000 0053 0000 00a6 0000 014d 0000     S...S.......M...
20400a28:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
20400a38:	0053 0000 0053 0000 00a6 0000 00a6 0000     S...S...........
20400a48:	0037 0000 0037 0000 0037 0000 00a6 0000     7...7...7.......
20400a58:	00a6 0000 00a6 0000 00a6 0000 00a6 0000     ................
20400a68:	00a6 0000 0037 0000 0037 0000 0037 0000     ....7...7...7...
20400a78:	0037 0000 0037 0000 0037 0000 0064 0000     7...7...7...d...
20400a88:	0064 0000 0064 0000 0064 0000 0064 0000     d...d...d...d...
20400a98:	0064 0000 014d 0000 014d 0000 014d 0000     d...M...M...M...

20400aa8 <impure_data>:
20400aa8:	0000 0000 0d94 2040 0dfc 2040 0e64 2040     ......@ ..@ d.@ 
	...
20400b50:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400b60:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400ed0 <__atexit_recursive_mutex>:
20400ed0:	49f4 2040                                   .I@ 
